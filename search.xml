<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>equals和hashCode</title>
      <link href="/2019/02/27/Java-2019-02-27-equals%E5%92%8ChashCode/"/>
      <url>/2019/02/27/Java-2019-02-27-equals%E5%92%8ChashCode/</url>
      <content type="html"><![CDATA[<p>最近在看<code>Java</code>集合框架，然后看到<code>Map</code>和<code>Set</code>时，避免不了的提到了<code>equals</code>和<code>hashCode</code>方法。正好面试问基础的时候也爱问这个，借此机会，正好就系统记录一下。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知<code>equals</code>和<code>hashCode</code>方法是来自<code>Object</code>这个顶层基类的。我们来看一下在<code>Object</code>中怎么说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether some other object is "equal to" this one.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a hash code value for the object.</span></span><br><span class="line"><span class="comment"> * As much as is reasonably practical, the hashCode method defined by</span></span><br><span class="line"><span class="comment"> * class &#123;<span class="doctag">@code</span> Object&#125; does return distinct integers for distinct</span></span><br><span class="line"><span class="comment"> * objects. (This is typically implemented by converting the internal</span></span><br><span class="line"><span class="comment"> * address of the object into an integer, but this implementation</span></span><br><span class="line"><span class="comment"> * technique is not required by the</span></span><br><span class="line"><span class="comment"> * Java&amp;trade; programming language.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>这里截取了源码以及部分注释。</p><p>对于<code>equals</code>方法，可以看到，这里比较的是地址值是否相等，即看两个对象的引用是否指向同一个内存地址。对于<code>hashCode</code>方法，这里是一个本地方法，返回的是对象的哈希值，默认情况下返回的是内存地址转换而来的的<code>integer</code>值。</p><p>顺便提到一下<code>toString</code>方法，我们来看下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string representation of the object. In general, the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> toString&#125; method returns a string that</span></span><br><span class="line"><span class="comment"> * "textually represents" this object. The result should</span></span><br><span class="line"><span class="comment"> * be a concise but informative representation that is easy for a</span></span><br><span class="line"><span class="comment"> * person to read.</span></span><br><span class="line"><span class="comment"> * It is recommended that all subclasses override this method.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> toString&#125; method for class &#123;<span class="doctag">@code</span> Object&#125;</span></span><br><span class="line"><span class="comment"> * returns a string consisting of the name of the class of which the</span></span><br><span class="line"><span class="comment"> * object is an instance, the at-sign character `&#123;<span class="doctag">@code</span> @&#125;', and</span></span><br><span class="line"><span class="comment"> * the unsigned hexadecimal representation of the hash code of the</span></span><br><span class="line"><span class="comment"> * object. In other words, this method returns a string equal to the</span></span><br><span class="line"><span class="comment"> * value of:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * getClass().getName() + '@' + Integer.toHexString(hashCode())</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string representation of the object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里的实现，其调用了<code>hashCode</code>，这也解释了为啥我们在没有重写<code>toString</code>时调用<code>toString</code>会返回类名@十六进制地址值了。</p><h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><p>这是一个很常用的方法了，它是在<code>Object</code>类中的，从它的完整注释中，我们可以对它有个大致了解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether some other object is "equal to" this one.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> equals&#125; method implements an equivalence relation</span></span><br><span class="line"><span class="comment"> * on non-null object references:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x&#125;, &#123;<span class="doctag">@code</span> x.equals(x)&#125; should return</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x&#125; and &#123;<span class="doctag">@code</span> y&#125;, &#123;<span class="doctag">@code</span> x.equals(y)&#125;</span></span><br><span class="line"><span class="comment"> *     should return &#123;<span class="doctag">@code</span> true&#125; if and only if</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> y.equals(x)&#125; returns &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x&#125;, &#123;<span class="doctag">@code</span> y&#125;, and &#123;<span class="doctag">@code</span> z&#125;, if</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x.equals(y)&#125; returns &#123;<span class="doctag">@code</span> true&#125; and</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> y.equals(z)&#125; returns &#123;<span class="doctag">@code</span> true&#125;, then</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x.equals(z)&#125; should return &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x&#125; and &#123;<span class="doctag">@code</span> y&#125;, multiple invocations of</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x.equals(y)&#125; consistently return &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment"> *     or consistently return &#123;<span class="doctag">@code</span> false&#125;, provided no</span></span><br><span class="line"><span class="comment"> *     information used in &#123;<span class="doctag">@code</span> equals&#125; comparisons on the</span></span><br><span class="line"><span class="comment"> *     objects is modified.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;For any non-null reference value &#123;<span class="doctag">@code</span> x&#125;,</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@code</span> x.equals(null)&#125; should return &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> equals&#125; method for class &#123;<span class="doctag">@code</span> Object&#125; implements</span></span><br><span class="line"><span class="comment"> * the most discriminating possible equivalence relation on objects;</span></span><br><span class="line"><span class="comment"> * that is, for any non-null reference values &#123;<span class="doctag">@code</span> x&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> y&#125;, this method returns &#123;<span class="doctag">@code</span> true&#125; if and only</span></span><br><span class="line"><span class="comment"> * if &#123;<span class="doctag">@code</span> x&#125; and &#123;<span class="doctag">@code</span> y&#125; refer to the same object</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> x == y&#125; has the value &#123;<span class="doctag">@code</span> true&#125;).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note that it is generally necessary to override the &#123;<span class="doctag">@code</span> hashCode&#125;</span></span><br><span class="line"><span class="comment"> * method whenever this method is overridden, so as to maintain the</span></span><br><span class="line"><span class="comment"> * general contract for the &#123;<span class="doctag">@code</span> hashCode&#125; method, which states</span></span><br><span class="line"><span class="comment"> * that equal objects must have equal hash codes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   obj   the reference object with which to compare.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if this object is the same as the obj</span></span><br><span class="line"><span class="comment"> *          argument; &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #hashCode()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.util.HashMap</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它是用来判断两个对象是否相同的。而默认实现是用的<code>==</code>，也就是如果不重写，则也只是判断地址值是否相等，而非比较内容。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们写个简单的类，而不去重写其<code>equals</code>方法。再写个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setAge(<span class="number">27</span>);</span><br><span class="line">        u1.setName(<span class="string">"felixu"</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setName(<span class="string">"felixu"</span>);</span><br><span class="line">        u2.setAge(<span class="number">27</span>);</span><br><span class="line">        System.out.println(u1 == u2);</span><br><span class="line">        System.out.println(u1.equals(u2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>结果不出意料，因为两个都是判断了地址值是否相等，而这样的两个对象显然地址值是不可能相同的，而重写<code>equals</code>后，返回的结果取决于我们怎么去重写<code>equals</code>方法。<code>Java</code>中定义好的引用类型都重写了该方法，而我们自定义的引用类型如何去重写该方法，得看实际情况，但是应当遵循以下规则(注释上给出的)：</p><ul><li>自反性(reflexive)：对于任意不为<code>null</code>的引用值<code>x</code>，<code>x.equals(x)</code> 一定是<code>true</code>。</li><li>对称性(symmetric)：对于任意不为<code>null</code>的引用值<code>x</code>和<code>y</code>，当且仅当<code>y.equals(x)</code>是<code>true</code>时，<code>x.equals(y)</code>也应当返回<code>true</code>。</li><li>传递性(transitive)：对于任意不为<code>null</code>的引用值<code>x</code>、<code>y</code>和<code>z</code>，如果 <code>x.equals(y)</code> 是<code>true</code>，同时 <code>y.equals(z)</code> 是<code>true</code>，那么<code>x.equals(z)</code>一定是<code>true</code>。</li><li>一致性(consistent)：对于任意不为<code>null</code>的引用值<code>x</code>和<code>y</code>，如果用于<code>equals</code>比较的对象信息没有被修改的话，多次调用时 <code>x.equals(y)</code> 要么一致地返回<code>true</code>要么一致地返回<code>false</code>。</li><li>对于任意不为<code>null</code>的引用值<code>x</code>，<code>x.equals(null)</code>返回<code>false</code>。</li></ul><p>这里重写<code>equals</code>方法的示例就不再贴了。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比=="></a>对比==</h2><p>说说<code>equals</code>和<code>==</code>的区别，这大概是初级程序员面试中都遇到过的问题吧。那么这里就再比较一下吧：</p><p>对于<code>==</code>而言：</p><ul><li>对于基本类型，<code>==</code>比较的是值是否相等。</li><li>对呀引用类型，<code>==</code>比较的是地址值是否相同。</li></ul><p>对于<code>equals</code>而言：</p><ul><li>未重写的情况下，与<code>==</code>结果一直，比较的是地址值。</li><li>重写的情况下，看具体实现，一般是比较内容。</li></ul><p>好了，<code>equals</code>方法就说到这里，下面来看看<code>hashCode</code>方法。</p><h1 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h1><p>提到<code>hashCode</code>避免不了要知道什么是哈希表，这里不再展开说哈希表了，有需要了解的可以参考：<a href="http://www.cnblogs.com/jiewei915/archive/2010/08/09/1796042.html" target="_blank" rel="noopener">哈希</a></p><p>在日常开发中，<code>hashCode</code>方法其实用的不多，但是它却又无处不在，它更多的用在集合容器中，比如<code>HashMap</code>、<code>HashSet</code>等等，用以快速的初步确定元素在容器中的位置。</p><p>比如我们拿<code>HashSet</code>来说，它是一个不允许有重复元素的集合容器，那么我们要怎么去确定容器中有没有重复元素呢，有人可能会想到上面正好提到过<code>equals</code>方法，倒是可以，但是我们试想这样一个场景，当集合中元素很多的时候，使用<code>equals</code>方法来一个个判断得效率多低。而使用<code>hashCode</code>就不一样了，首先我们对要存储的对象散列，如果散列值在哈希表中没有存储，那就直接存，因为必然不存在重复元素，如果已经存储过相同的<code>hash</code>值，这里就再调用<code>equals</code>方法，如果相同，则不存储，如果不同，进一步散列到其他地址(<code>hash</code>值相同也就是碰撞)，这样极大的减少了<code>equals</code>方法的使用，且不需要逐一对比。<code>Java</code>中的<code>hashCode</code>方法就是根据一定的规则将与对象相关的信息(比如对象的存储地址，对象的字段等)映射成一个数值，这个数值称作为散列值。</p><p>和<code>equals</code>方法一样，我们从注释中来看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a hash code value for the object. This method is</span></span><br><span class="line"><span class="comment"> * supported for the benefit of hash tables such as those provided by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.util.HashMap&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The general contract of &#123;<span class="doctag">@code</span> hashCode&#125; is:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Whenever it is invoked on the same object more than once during</span></span><br><span class="line"><span class="comment"> *     an execution of a Java application, the &#123;<span class="doctag">@code</span> hashCode&#125; method</span></span><br><span class="line"><span class="comment"> *     must consistently return the same integer, provided no information</span></span><br><span class="line"><span class="comment"> *     used in &#123;<span class="doctag">@code</span> equals&#125; comparisons on the object is modified.</span></span><br><span class="line"><span class="comment"> *     This integer need not remain consistent from one execution of an</span></span><br><span class="line"><span class="comment"> *     application to another execution of the same application.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If two objects are equal according to the &#123;<span class="doctag">@code</span> equals(Object)&#125;</span></span><br><span class="line"><span class="comment"> *     method, then calling the &#123;<span class="doctag">@code</span> hashCode&#125; method on each of</span></span><br><span class="line"><span class="comment"> *     the two objects must produce the same integer result.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal</span></span><br><span class="line"><span class="comment"> *     according to the &#123;<span class="doctag">@link</span> java.lang.Object#equals(java.lang.Object)&#125;</span></span><br><span class="line"><span class="comment"> *     method, then calling the &#123;<span class="doctag">@code</span> hashCode&#125; method on each of the</span></span><br><span class="line"><span class="comment"> *     two objects must produce distinct integer results.  However, the</span></span><br><span class="line"><span class="comment"> *     programmer should be aware that producing distinct integer results</span></span><br><span class="line"><span class="comment"> *     for unequal objects may improve the performance of hash tables.</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * As much as is reasonably practical, the hashCode method defined by</span></span><br><span class="line"><span class="comment"> * class &#123;<span class="doctag">@code</span> Object&#125; does return distinct integers for distinct</span></span><br><span class="line"><span class="comment"> * objects. (This is typically implemented by converting the internal</span></span><br><span class="line"><span class="comment"> * address of the object into an integer, but this implementation</span></span><br><span class="line"><span class="comment"> * technique is not required by the</span></span><br><span class="line"><span class="comment"> * Java&amp;trade; programming language.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a hash code value for this object.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Object#equals(java.lang.Object)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.System#identityHashCode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>注释中间我们可以看到对于<code>hashCode</code>的一些约定：</p><ul><li>在程序执行期间，只要<code>equals</code>方法的比较操作用到的信息没有被修改，那么对这同一个对象调用多次，<code>hashCode</code>方法必须始终如一地返回同一个整数。</li><li>如果两个对象根据<code>equals</code>方法比较是相等的，那么调用两个对象的<code>hashCode</code>方法必须返回相同的整数结果。</li><li>如果两个对象根据<code>equals</code>方法比较是不等的，则<code>hashCode</code>方法不一定得返回不同的整数。</li></ul><p>第一条在《<code>Thinking In Java</code>》也有类似言论，对比一下可能更容易理解一点，即</p><blockquote><p>设计hashCode()时最重要的因素就是：无论何时，对同一个对象调用hashCode()都应该产生同样的值。如果在讲一个对象用put()添加进HashMap时产生一个hashCdoe值，而用get()取出时却产生了另一个hashCode值，那么就无法获取该对象了。所以如果你的hashCode方法依赖于对象中易变的数据，用户就要当心了，因为此数据发生变化时，hashCode()方法就会生成一个不同的散列码。</p></blockquote><p>这里可以举个简单例子说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">27</span>);</span><br><span class="line">        user.setName(<span class="string">"felixu"</span>);</span><br><span class="line">        System.out.println(user.hashCode());</span><br><span class="line">        Map&lt;User, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(user, <span class="number">1</span>);</span><br><span class="line">        user.setAge(<span class="number">28</span>);</span><br><span class="line">        System.out.println(user.hashCode());</span><br><span class="line">        System.out.println(map.get(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-969372541</span><br><span class="line">-969372540</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>这正是由于在重写<code>hashCode</code>方法时依赖了易变属性，进而导致了明明是同一个对象，却有不同的哈希值，从而导致取不到值。</p><p>第二条其实不难理解，<code>equals</code>返回<code>true</code>即说明对象相等，那么同样的<code>hashCode</code>方法生成的散列码应该是相同的。</p><p>第三条也不难理解，不同对象也有可能产生相同的散列码，即哈希碰撞，毕竟没有哪个<code>hash</code>算法能保证绝对无碰撞。</p><h1 id="equals和hashCode的关系"><a href="#equals和hashCode的关系" class="headerlink" title="equals和hashCode的关系"></a>equals和hashCode的关系</h1><p>我们从<code>equals</code>方法上的注释可以看到，其要求我们在重写<code>equals</code>方法时，必须重写<code>hashCode</code>方法，以保证其不会破坏上面所说<code>hashCode</code>的三条约定。</p><p>我们可以这样来想，当我们重写<code>equals</code>方法，而不重写<code>hashCode</code>方法，其内容相等时，由于默认<code>hashCode</code>实现是返回地址值，很容易就造成了<code>equals</code>方法相等，而<code>hashCode</code>不等(这就违反了<code>hashCode</code>方法的约定)。我们可以用上面的例子来说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">27</span>);</span><br><span class="line">        user.setName(<span class="string">"felixu"</span>);</span><br><span class="line">        Map&lt;User, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(user, <span class="number">1</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setAge(<span class="number">27</span>);</span><br><span class="line">        user1.setName(<span class="string">"felixu"</span>);</span><br><span class="line">        System.out.println(user.equals(user1));</span><br><span class="line">        System.out.println(map.get(user1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">null</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>扯了这么些，应该可以看出来以下几点：</p><ol><li>重写<code>equals</code>方法时，必须重写<code>hashCode</code>方法。</li><li>自定义对象不重写<code>equals</code>方法等同<code>==</code>比较对象，对比的是地址值。</li><li>调用<code>equals</code>返回<code>true</code>的两个对象，拥有相同的<code>hash</code>值。</li><li><code>hash</code>值相同的两个对象，不一定<code>equals</code>返回<code>true</code>。</li><li><code>hashCode</code>返回的不一定是地址值，比如重写后，比如碰撞。</li></ol>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LinkedList源码分析</title>
      <link href="/2019/02/24/Java-2019-02-24-LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/02/24/Java-2019-02-24-LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="LinkedList简介"><a href="#LinkedList简介" class="headerlink" title="LinkedList简介"></a>LinkedList简介</h1><p><code>LinkedList</code>是基于双向链表实现的，其不仅实现了<code>List</code>接口实现了一个列表，同时也实现了<code>Deque</code>接口，使其可以作为一个队列甚至是栈使用。在<code>Java 7</code>以前，<code>LinkedList</code>实现的是双向循环链表，在<code>Java 7</code>时改为双向链表。它是非线程安全的，链表的特性使其具有高效的插入和删除，但是在查询上效率稍低。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="节点源码"><a href="#节点源码" class="headerlink" title="节点源码"></a>节点源码</h2><p>既然它是基于双向链表实现的，那么首先来看一下它的节点源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LinkedList内部类，用于双向链表的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 实际存放元素的</span></span><br><span class="line">    E item;</span><br><span class="line">    <span class="comment">// 指向当前节点的后继节点</span></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    <span class="comment">// 指向当前节点的前驱节点</span></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点的构造函数，传入前驱节点和节点内容以及后继节点，构造一个新节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节点的源码相对简单，上面代码中已经加上了详细注释，就不再多展开了。</p><h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><p>添加节点有两个方法，即<code>add(E e)</code>和<code>add(int index, E e)</code>，我们一一来看：</p><ul><li><p><code>add(E e)</code></p><p>这个方法是用于直接向链表后面添加元素，其源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向链表后添加元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表尾节点后添加元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到LinkedList尾节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">// 以元素e构造新节点，其前驱节点为原尾节点，后继节点为null</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 以新节点替换原尾节点</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">// 是否为空链表</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 若是，则头节点也设置为新节点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 若不是，则让原尾节点的后继指向新节点</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其图示如下：</p><p><img src="http://oss-blog.felixu.top/LinkedList%E5%B0%BE%E6%8F%92.jpg" alt="add(E e)图示"></p></li><li><p><code>add(int index, E e)</code></p><p>该方法用于在指定位置插入一个新节点，其源码稍微复杂一些，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在指定索引位置插入元素e</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断index是否合法</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断index是否为链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        <span class="comment">// 若是，则在最后插入</span></span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 若不是，则在指定的索引位置插入</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在指定节点前插入节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="comment">// 拿到原节点的前驱节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="comment">// 构建新节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    <span class="comment">// 原节点前驱指向新节点</span></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="comment">// 判断是否空链表</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 空链表令新节点为头节点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 非空链表则令原节点的前驱节点的后继指向新节点</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定索引位置的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前索引靠前还是靠后，以决定从前开始查找还是从后开始查找</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="comment">// 索引靠前从前查找</span></span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 索引靠后从后查找</span></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其示意图如下：</p><p><img src="http://oss-blog.felixu.top/LinkedList%E4%B8%AD%E9%97%B4%E6%8F%92%E5%85%A5.jpg" alt="add(int index, E e)示意图"></p></li></ul><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>常用的删除方法也有两个，即<code>remove(int index)</code>和<code>remove(Object o)</code>，其核心都是如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从链表中移除指定节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="comment">// 得到待移除节点的值</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="comment">// 得到待移除节点的后继节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="comment">// 得到待移除节点的前驱节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果前驱为null，即为头节点</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 若待移除节点为头节点，令头节点为待移除节点的后继节点</span></span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则将待移除节点的前驱节点的后继指向待移除节点的后继节点</span></span><br><span class="line">        prev.next = next;</span><br><span class="line">        <span class="comment">// 断开待移除节点与其前驱节点的联系</span></span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断后继是否为null，即为尾节点</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 若待移除节点为尾节点，令尾节点为待移除节点的前驱节点</span></span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则将后继节点的前驱指向待移除节点的前驱节点</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        <span class="comment">// 断开待移除节点与其后继节点的联系</span></span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放节点值</span></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果上面源码中的注释看起来有点绕，我们可以结合这个图来看：</p><p><img src="http://oss-blog.felixu.top/LinkedList%E5%88%A0%E9%99%A4.jpg" alt="移除节点示意图"></p><h1 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h1><p>至于说到查找节点，其核心其实在上面已经说过了，那就是<code>node(int index)</code>方法，这里再看一眼吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定索引位置的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前索引靠前还是靠后，以决定从前开始查找还是从后开始查找</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="comment">// 索引靠前从前查找</span></span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 索引靠后从后查找</span></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个小点，即<code>index &lt; (size &gt;&gt; 1)</code>一句，用<code>size &gt;&gt; 1</code>找到中间节点，用一次二分决定其查找该从前开始，还是从后开始，但是其实这样的查找效率也并不高，特别是当<code>index</code>接近链表中间时。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>正是由于<code>LinkedList</code>使用双向链表实现，其插入和删除只需要移动指针，所以速度较快，而查找元素时则需要从一端开始遍历查找，速度较慢</p><h2 id="ArrayList和LinkedList对比"><a href="#ArrayList和LinkedList对比" class="headerlink" title="ArrayList和LinkedList对比"></a>ArrayList和LinkedList对比</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">ArrayList</th><th style="text-align:center">LinkedList</th></tr></thead><tbody><tr><td style="text-align:center">数据结构</td><td style="text-align:center">基于动态数组实现</td><td style="text-align:center">基于双向链表实现</td></tr><tr><td style="text-align:center">查找</td><td style="text-align:center">支持随机查找，速度较快</td><td style="text-align:center">遍历查找，速度较慢</td></tr><tr><td style="text-align:center">增、删</td><td style="text-align:center">需要大量移动数据，速度较慢</td><td style="text-align:center">只需要移动指针，速度较快</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ArrayList源码分析</title>
      <link href="/2019/02/20/Java-2019-02-20-ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/02/20/Java-2019-02-20-ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="ArrayList简介"><a href="#ArrayList简介" class="headerlink" title="ArrayList简介"></a>ArrayList简介</h1><p><code>ArrayList</code>底层基于动态数组实现，相比于<code>Java</code>中的数组，它可以动态扩容。当需要大量增加新元素时，建议先调用<code>ensureCapacity</code>方法来扩容，避免在添加元素过程中多次扩容，来提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p><code>ArrayList</code>继承自<code>AbstractList</code>，实现了<code>List</code>、<code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code>接口。</p><p>其是<code>List</code>的实现，必然实现<code>List</code>接口</p><p>实现<code>RandomAccess</code>使其具有可随机访问的特性</p><p>实现<code>Cloneable</code>使其可被克隆</p><p>实现<code>Serializable</code>使其可被序列化传输</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>下面我们来具体看一下整个<code>ArrayList</code>的源码，介绍每个方法的作用，熟悉<code>API</code>可跳过本段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.UnaryOperator;</span><br><span class="line"><span class="keyword">import</span> sun.misc.SharedSecrets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认初始容量为10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的空数组，用于空实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的空数组，用于默认容量的空实例</span></span><br><span class="line"><span class="comment">     * 区别于EMPTY_ELEMENTDATA是因为在添加第一个元素的时候我们知道要扩容多少</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来存放元素的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所含元素个数，也就是elementData中所含元素个数，并不是elementData的length，这点需要注意</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造带初始大小的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空参构造使用默认大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个包含指定集合的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// replace with empty array.</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改当前ArrayList的容量和当前所含元素个数一样，此操作可以最小化ArrayList实例存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (size == <span class="number">0</span>)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用以扩容，确定当前容量是否可以容纳下要添加的元素，如果不够则进行扩容</span></span><br><span class="line"><span class="comment">     * 在批量添加大量元素前可以使用此操作以提高性能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="comment">// any size if not default element table</span></span><br><span class="line">            ? <span class="number">0</span></span><br><span class="line">            <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">            <span class="comment">// supposed to be at default size.</span></span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算最小所需容量</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用以确认是否需要扩容，内部使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组大小的最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容核心</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断最小所需容量是否超过数组最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数组中的元素数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前数组是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前数组中是否包含指定元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前数组中首次出现指定元素的索引，不存在返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前数组中最后一次出现指定元素的索引，不存在返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前ArrayList的浅拷贝实例，元素本身不被拷贝。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照顺序将其拷贝为一个数组</span></span><br><span class="line"><span class="comment">     * 数组为拷贝产生的新数组，调用者可以任意处理数组而不对原列表产生影响</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Positional Access Operations</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定索引位置的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回列表中指定索引位置的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用指定元素替换指定索引位置的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向列表的末位添加元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向指定索引位置添加元素，指定索引位置的元素向后移动一位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定索引位置的元素，其后的元素向前移动一位填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除第一次出现的指定元素，如果不存在则不做改变</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment">     * return the value removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除列表中所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定集合按照其遍历顺序添加到当前列表后面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定索引位置将指定集合按照其遍历顺序插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除formIndex到toIndex索引之间的元素</span></span><br><span class="line"><span class="comment">     * 若toIndex后面还有元素，需要移动至原formIndex处</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查给定索引是否合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查给定索引是否合法</span></span><br><span class="line"><span class="comment">     * add或addAll使用的版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回IndexOutOfBoundsException的具体信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从列表中移除指定集合所包含的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 仅保留指定集合所包含的元素</span></span><br><span class="line"><span class="comment">     * 也就是说移除列表中非指定集合所包含的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">            <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">            <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment">     * is, serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *             instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment">     *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            <span class="keyword">int</span> capacity = calculateCapacity(elementData, size);</span><br><span class="line">            SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);</span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回从指定索引位置开始的一个列表迭代器(按适当的顺序)</span></span><br><span class="line"><span class="comment">     * 初始调用ListIterator迭代器的next返回的第一个元素是指定索引位置的元素</span></span><br><span class="line"><span class="comment">     * 初始调用ListIterator迭代器的previous返回的元素是指定索引-1位置的元素</span></span><br><span class="line"><span class="comment">     * ListIterator是一个fail-fast迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回从开始位置的一个列表迭代器(按适当的顺序)</span></span><br><span class="line"><span class="comment">     * ListIterator是一个fail-fast迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个适当顺序的迭代器</span></span><br><span class="line"><span class="comment">     * 返回的Iterator是一个fail-fast迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个优化版本的AbstractList.Itr，普通的Iterator迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(consumer);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                consumer.accept((E) elementData[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">            cursor = i;</span><br><span class="line">            lastRet = i - <span class="number">1</span>;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个优化版本的AbstractList.ListItr，ListIterator迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            cursor = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个从formIndex索引位置到toIndex索引位置的新List视图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查索引是否合法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</span><br><span class="line">        <span class="keyword">if</span> (toIndex &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</span><br><span class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于截取ArrayList生成的新List</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentOffset;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">                <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.parentOffset = fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.offset = offset + fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.size = toIndex - fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.add(parentOffset + index, e);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E result = parent.remove(parentOffset + index);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size--;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.removeRange(parentOffset + fromIndex,</span><br><span class="line">                               parentOffset + toIndex);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size -= toIndex - fromIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">int</span> cSize = c.size();</span><br><span class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.addAll(parentOffset + index, c);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size += cSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> listIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="keyword">this</span>.offset;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;() &#123;</span><br><span class="line">                <span class="keyword">int</span> cursor = index;</span><br><span class="line">                <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != SubList.<span class="keyword">this</span>.size;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= SubList.<span class="keyword">this</span>.size)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    cursor = i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    cursor = i;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">                    Objects.requireNonNull(consumer);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> size = SubList.<span class="keyword">this</span>.size;</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                        consumer.accept((E) elementData[offset + (i++)]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">                    lastRet = cursor = i;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SubList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                        cursor = lastRet;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ArrayList.<span class="keyword">this</span>.set(offset + lastRet, e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> i = cursor;</span><br><span class="line">                        SubList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                        cursor = i + <span class="number">1</span>;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (expectedModCount != ArrayList.<span class="keyword">this</span>.modCount)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">            subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, offset, fromIndex, toIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(ArrayList.<span class="keyword">this</span>, offset,</span><br><span class="line">                                               offset + <span class="keyword">this</span>.size, <span class="keyword">this</span>.modCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            action.accept(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到一个可分割迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;&gt;(<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 实现Spliterator接口，是一个可分割迭代器，用于并行遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;E&gt; list;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index; <span class="comment">// current index, modified on advance/split</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fence; <span class="comment">// -1 until used; then one past last index</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount; <span class="comment">// initialized when fence set</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Create new spliterator covering the given  range */</span></span><br><span class="line">        ArrayListSpliterator(ArrayList&lt;E&gt; list, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence,</span><br><span class="line">                             <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list = list; <span class="comment">// OK if null unless traversed</span></span><br><span class="line">            <span class="keyword">this</span>.index = origin;</span><br><span class="line">            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize fence to size on first use</span></span><br><span class="line">            <span class="keyword">int</span> hi; <span class="comment">// (a specialized variant appears in method forEach)</span></span><br><span class="line">            ArrayList&lt;E&gt; lst;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lst = list) == <span class="keyword">null</span>)</span><br><span class="line">                    hi = fence = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    expectedModCount = lst.modCount;</span><br><span class="line">                    hi = fence = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ArrayListSpliterator&lt;E&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid) ? <span class="keyword">null</span> : <span class="comment">// divide range in half unless too small</span></span><br><span class="line">                <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(list, lo, index = mid,</span><br><span class="line">                                            expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), i = index;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; hi) &#123;</span><br><span class="line">                index = i + <span class="number">1</span>;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E)list.elementData[i];</span><br><span class="line">                action.accept(e);</span><br><span class="line">                <span class="keyword">if</span> (list.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc; <span class="comment">// hoist accesses and checks from loop</span></span><br><span class="line">            ArrayList&lt;E&gt; lst; Object[] a;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> ((lst = list) != <span class="keyword">null</span> &amp;&amp; (a = lst.elementData) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    mc = lst.modCount;</span><br><span class="line">                    hi = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    mc = expectedModCount;</span><br><span class="line">                <span class="keyword">if</span> ((i = index) &gt;= <span class="number">0</span> &amp;&amp; (index = hi) &lt;= a.length) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; i &lt; hi; ++i) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) a[i];</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (lst.modCount == mc)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>) (getFence() - index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(filter);</span><br><span class="line">        <span class="comment">// figure out which elements are to be removed</span></span><br><span class="line">        <span class="comment">// any exception thrown from the filter predicate at this stage</span></span><br><span class="line">        <span class="comment">// will leave the collection unmodified</span></span><br><span class="line">        <span class="keyword">int</span> removeCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> BitSet removeSet = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="keyword">final</span> E element = (E) elementData[i];</span><br><span class="line">            <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">                removeSet.set(i);</span><br><span class="line">                removeCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> anyToRemove = removeCount &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> newSize = size - removeCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">                i = removeSet.nextClearBit(i);</span><br><span class="line">                elementData[j] = elementData[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">                elementData[k] = <span class="keyword">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.size = newSize;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            modCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> anyToRemove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(operator);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = operator.apply((E) elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><p>在添加元素时，当容量不足就会发生扩容，而扩容本质是创建新的数组，将旧数组的数据拷贝到新的数组上，从而实现扩容，这一系列操作是相对耗费资源的，在可以预知大致多少数据时，最好指定容量，这样可以减少在添加元素时发生的扩容操作，从而提高性能。</p><p>从添加元素来看一下扩容的几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 确保容量</span></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部使用的，用以确保容量，容量不足时扩容</span></span><br><span class="line"><span class="comment"> * 当需要批量加入大量元素时，可以先调用此方法扩容</span></span><br><span class="line"><span class="comment"> * 避免在添加过程中发生多次扩容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">           <span class="comment">// any size if not default element table</span></span><br><span class="line">           ? <span class="number">0</span></span><br><span class="line">           <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">           <span class="comment">// supposed to be at default size.</span></span><br><span class="line">           : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">           ensureExplicitCapacity(minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确定最小容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 如果当前数组是默认的空数组</span></span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           <span class="comment">// 则返回所需最小容量为默认大小与当前所需最小容量的较大值</span></span><br><span class="line">           <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部使用的，用以确保容量，容量不足时扩容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确保容量的实现，决定是否需要扩容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 当所需最小容量大于当前容量</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正扩容机制的核心代码</span></span><br><span class="line"><span class="comment"> * minCapacity最小容量，即当前添加之后所需最小容量，为size + newNum</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 得到当前容量</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">// 新的容量为原来容量的1.5倍</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">// 如果新容量比添加元素后的最小容量小</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">// 令新的容量等于添加元素后的最小容量</span></span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="comment">// 检查新的容量是否超过了数组最大值</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">// 超过了则检查所需最小容量</span></span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// 将原数据拷贝到以新容量创建的数组中，并替换</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查最小所需容量是否超过数组最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">       <span class="comment">// 如果最小容量也超过了数组最大值则使用Int的最大值，否则使用数组最大值作为新的容量进行扩容</span></span><br><span class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">           Integer.MAX_VALUE :</span><br><span class="line">           MAX_ARRAY_SIZE;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>综合上面的源码中构造函数我们可以知道，当我们使用空参构造创建一个<code>ArrayList</code>时，一开始并没有分配空间，而是一个空的数组，当添加第一元素的时候，才扩容到默认大小。</p><p>需要注意的是<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>这句，<code>&gt;&gt;</code>相当于<code>/ 2</code>即，这句等同于<code>int newCapacity = oldCapacity + (oldCapacity / 2);</code>，故扩容后容量为原容量的<code>1.5</code>倍。众所周知的使用位移运算比普通的运算要快得多，提高效率。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li><p><code>private class ltr implement Iterator&lt;E&gt;</code></p><p>优化版本的<code>AbstractList</code>中的<code>Itr</code>。</p><p>继承自<code>Iterator</code>，重写了<code>hasNext()</code>、<code>next()</code>、<code>remove()</code>等方法。</p></li><li><p><code>private class ListItr extends Itr implement ListIterator&lt;E&gt;</code></p><p>优化版本的<code>AbstractList</code>中的<code>ListItr</code>。</p><p>继承自<code>Itr</code>，实现了<code>ListIterator</code>接口，同时重写了<code>hasPrevious()</code>，<code>nextIndex()</code>，<code>previousIndex()</code>，<code>previous()</code>，<code>set(E e)</code>，<code>add(E e)</code>等方法。</p></li><li><p><code>private class SubList extends AbstractList&lt;E&gt; implements RandomAccess</code></p><p>继承自<code>AbstractList</code>，实现了<code>RandomAccess</code>，用于在截断<code>ArrayList</code>时返回一个新的视图。</p></li><li><p><code>static final class ArrayListSpliterator&lt;E&gt; implements Spliterator&lt;E&gt;</code></p><p>实现了<code>Spliterator</code>，这个接口可以对比<code>Iterator</code>来看，<code>Iterator</code>接口是个顺序迭代器，而<code>Spliterator</code>是个可分割迭代器，<code>Java 8</code>大大增强了并行处理能力，而<code>Spliterator</code>正是为并行遍历集合而设计的。</p></li></ul><h2 id="Iterator和ListIterator"><a href="#Iterator和ListIterator" class="headerlink" title="Iterator和ListIterator"></a>Iterator和ListIterator</h2><p>在使用<code>List</code>、<code>Set</code>等集合的时候，要对数据进行遍历，经常会使用到迭代器。通常我们所说的迭代器都是<code>Iterator</code>，但是在<code>List</code>中还有一种迭代器，即<code>ListIterator</code>。那么它于<code>Iterator</code>迭代器有啥区别呢：</p><ul><li><code>ListIterator</code>有<code>add()</code>方法，可以向<code>List</code>中添加元素，而<code>Iterator</code>不能。</li><li><code>ListIterator</code>和<code>Iterator</code>都有<code>hasNext()</code>和<code>next()</code>方法，可以实现顺序向后遍历，但是<code>ListIterator</code>有<code>hasPrevious()</code>和<code>previous()</code>方法，可以实现逆向遍历(即向前遍历)，而<code>Iterator</code>不可以。</li><li><code>ListIterator</code>可以定位当前的索引位置，<code>nextIndex()</code>和<code>previousIndex()</code>可以实现。而<code>Iterator</code>没有此功能。</li><li>都可实现删除元素，但是<code>ListIterator</code>可以实现元素的修改，<code>set()</code>方法可以实现。<code>Iierator</code>仅能遍历，不能修改。</li></ul><p><code>ListIterator</code>是一个功能更加强大的迭代器, 它继承于<code>Iterator</code>接口,只能用于各种<code>List</code>类型的访问。例如<code>ArrayList</code>可以通过调用<code>listIterator()</code>方法产生一个指向开始处的<code>ListIterator</code>，还可以调用<code>listIterator(int index)</code>方法创建一个一开始就指向列表索引为<code>index</code>的元素处的<code>ListIterator</code>。</p><h2 id="fail-fast"><a href="#fail-fast" class="headerlink" title="fail-fast"></a>fail-fast</h2><p><code>fail-fast</code>机制是在遍历一个集合的时候，如果集合结构发生改变将会抛出<code>ConcurrentModificationException</code>，也就是并发修改异常。</p><p><code>fail-fast</code>会在以下两种情况下抛出<code>ConcurrentModificationException</code>：</p><ol><li><p>单线程环境</p><ul><li>集合被创建后，在遍历它的过程中修改了结构。</li><li>注意<code>remove()</code>方法会让<code>expectedModCount</code>和<code>modCount</code>相等，所以是不会抛出这个异常。</li></ul></li><li><p>多线程环境</p><ul><li>当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。</li></ul></li></ol><p><code>modCount</code>用来记录<code>ArrayList</code>结构发生变化的次数。结构发生变化是指<strong>添加</strong>或者<strong>删除</strong>至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。</p><p>在进行序列化或者迭代等操作时，需要比较操作前后<code>modCount</code>是否改变，如果改变了需要抛出<code>ConcurrentModificationException</code>。</p><h2 id="System-arrayCopy-和Arrays-copyOf"><a href="#System-arrayCopy-和Arrays-copyOf" class="headerlink" title="System.arrayCopy()和Arrays.copyOf()"></a>System.arrayCopy()和Arrays.copyOf()</h2><p>有注意看源码不难看到，源码中出现了两种复制数组的方法，即<code>System.arrayCopy()</code>和<code>Arrays.copyOf()</code>。这两种也是我们平常复制数组常用的方式，那么他们有什么区别呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">            ? (T[]) <span class="keyword">new</span> Object[newLength]</span><br><span class="line">            : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                         Math.min(original.length, newLength));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从<code>Arrays.copyOf()</code>的具体实现源码中可以看到，其最后也是调用的<code>System.arrayCopy()</code>，从这段代码以及<code>System.arrayCopy()</code>源码上的注释来看：</p><ul><li><code>System.arrayCopy()</code>需要源数组和目标数组，可以指定源数组的起点和目标数组的起点以及要拷贝的长度。</li><li><code>Arrays.copyOf()</code>需要源数组和新数组长度，会在内部以指定长度创建一个新的目标数组。</li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>里氏替换原则</title>
      <link href="/2019/01/25/DesignPattern-2019-01-25-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E8%81%8C%E8%B4%A3/"/>
      <url>/2019/01/25/DesignPattern-2019-01-25-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E8%81%8C%E8%B4%A3/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>里氏替换原则<code>(Liskov Substitution Principle)</code>由2008年图灵奖得主、美国第一位计算机科学女博士<code>Barbara Liskov</code>教授和卡内基·梅隆大学<code>Jeannette Wing</code>教授于1994年提出。它有如下定义：</p><blockquote><p>If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</p><p>如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型。</p></blockquote><p>也可以有另一种定义：</p><blockquote><p>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p><p>所有引用基类的地方必须能透明地使用其子类的对象。</p></blockquote><p>通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必就能适应。比如：我如果说我喜欢动物，那么说我喜欢狗子没有错，因为狗子也是动物嘛，但是要是我说我说我喜欢狗子，你说我喜欢动物可能就不太恰当了，毕竟看到老鼠还是要上脚的。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>说到里氏替换原则不得不提的是继承，在面向对象语言中，继承是必不可少的。继承有着众多的优点，当然也有缺点。我们先来看看继承有哪些优缺点：</p><p><strong>优点</strong>：</p><ol><li>代码共享</li><li>提高代码的重用性</li><li>子类形似父类</li><li>提高代码的扩展性</li><li>提高产品或项目的开放性</li></ol><p><strong>缺点</strong>：</p><ol><li>代码入侵</li><li>降低代码的灵活性</li><li>增强了耦合性</li></ol><p>正是为了最大化优点，减少缺点带来的麻烦，引入了里氏替换原则。里氏替换原则为良好的继承定义了一个规范。</p><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><p>里氏替换原则需要注意以下几点：</p><ul><li><p>子类必须完全实现父类的方法。</p><p>一般我们在设计的时候，通常都是定义一个接口或者抽象类，然后子类去具体实现，在调用时之间传入父类或接口，其实这里已经使用了里氏替换原则。在类中调用其他类时务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了<code>LSP</code>原则。如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生畸变，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承。</p></li><li><p>子类可以有自己的个性。</p><p>在继承中，子类是可以有自己的行为的，也就是自己的方法和属性。这里要说的是里氏替换原则只可以正着使用(即可以用子类代替父类)，而不能反正用(即使用父类替代子类)。如果使用，可能会出现<code>java.lang.ClassCastException</code>，其实这也就是我们常说的继承体系中，向下转型(downcast)是不安的。里氏替换原则来看的话就是，子类出现的地方未必可以用父类替代。</p></li><li><p>覆盖或实现父类的方法时输入参数可以被放大。</p><p>对于一个方法的输入参数，我们也可以使用里氏替换原则，就是使用父类或者接口。我们来看以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(HashMap map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"invoke father"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"invoke son"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Father f = <span class="keyword">new</span> Father();</span><br><span class="line">        f.doSomething(<span class="keyword">new</span> HashMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke father</span><br></pre></td></tr></table></figure><p>根据里氏替换原则，父类的地方可以用子类替换，修改一下<code>Client</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son f = <span class="keyword">new</span> Son();</span><br><span class="line">        f.doSomething(<span class="keyword">new</span> HashMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke father</span><br></pre></td></tr></table></figure><p>这里可以看到，子类的方法没有被执行，那是因为这里是重载(Overload)，而不是重写(Override)，出现这种现象是正常的，要子类方法可以正常执行，应该重写父类的方法。在继承中，即可以重写父类方法，也可以重载父类方法，重载要求入参类型要宽于父类入参类型(对入参使用里氏替换)。</p><p>如果反过来会出现什么情况，我们不妨也来看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"invoke father"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(HashMap map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"invoke son"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Father f = <span class="keyword">new</span> Father();</span><br><span class="line">        f.doSomething(<span class="keyword">new</span> HashMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke father</span><br></pre></td></tr></table></figure><p>根据里氏替换原则，父类的地方可以用子类替换，修改一下<code>Client</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son f = <span class="keyword">new</span> Son();</span><br><span class="line">        f.doSomething(<span class="keyword">new</span> HashMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke son</span><br></pre></td></tr></table></figure><p>我们会看到，子类执行了。这样会引起不必要的误会，因为在实际业务中，父类一般是抽象类或者接口，在子类中实现，当传递这样一个子类，会引发业务逻辑的混乱，所以子类中方法的入参类型必须与超类中被覆写的方法的入参类型相同或者更宽松。</p></li><li><p>覆写或实现父类的方法时输出结果可以被缩小。</p><p>即是子类返回值的类型必须小于等于父类返回值的类型。情况与上面类似就不再赘述。</p></li></ul><p>要满足里氏替换原则，我们<strong>应该尽量避免重写或者重载父类已经实现的方法</strong>，这也是里氏替换原则的核心。因为在继承体系中，父类中已实现的方法实际上是在对子类做一定的限制，或者说这是一种规范或者契约，而一旦子类对其进行修改，就会造成与里氏替换原则定义相违背的情况，使用子类替换父类的时候出现了不可预知的意外情况</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉通篇下来都是在说继承，是啊，里氏替换原则本来就是为了让我们更加规范的使用继承，最大化优点嘛。里氏替换原则可以使我们的程序更加健壮，更加稳定，在升级过程中能够有更好的兼容性。在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有“个性”，这个子类和父类之间的关系就很难调和了，把子类当做父类使用，子类的“个性”被抹杀——委屈了点；把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离——缺乏类替换的标准。 </p><blockquote><p>参考自《设计模式之禅》</p></blockquote>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解volatile</title>
      <link href="/2019/01/23/Concurrency-2019-01-23-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3volatile/"/>
      <url>/2019/01/23/Concurrency-2019-01-23-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3volatile/</url>
      <content type="html"><![CDATA[<h1 id="硬件问题"><a href="#硬件问题" class="headerlink" title="硬件问题"></a>硬件问题</h1><p>前面说了一些<a href="https://blogs.felixu.top/2019/01/17/Concurrency-2019-01-17-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/">JMM</a>中的一些基本的概念，为了便于后面的理解，再补充一点别的知识(感觉有个大致印象就够用了)。</p><h2 id="CPU高速缓存"><a href="#CPU高速缓存" class="headerlink" title="CPU高速缓存"></a>CPU高速缓存</h2><p>我们都知道，计算机处理一个问题多数情况下，总是需要与内存交互的，这一部分的<code>I/O</code>操作是很难被消除的，而计算机处理器和存储设备之间的运算速度差距是十分巨大的。为了解决这一问题，现代计算机都会在他们二者之间加上一层高速缓存，用以将需要计算的数据复制缓存到高速缓存中，计算完成后，再将结果刷新回内存。高速缓存越接近<code>CPU</code>速度越快，但其容量也越小，现代计算机一般设3级缓存。</p><p>可以用下图来表述：</p><p><img src="http://oss-blog.felixu.top/CPU3%E7%BA%A7%E7%BC%93%E5%AD%98.jpg" alt="CPU3级缓存"></p><ul><li><code>L1 Cache</code>，一级缓存，本地<code>core</code>的缓存，分成<code>32K</code>的数据缓存<code>L1d</code>和<code>32k</code>指令缓存<code>L1i</code>，访问<code>L1</code>需要 <code>3cycles</code>，耗时大约<code>1ns</code>；</li><li><code>L2 Cache</code>，二级缓存，本地<code>core</code>的缓存，被设计为<code>L1</code>缓存与共享的<code>L3</code>缓存之间的缓冲，大小为<code>256K</code>，访问<code>L2</code>需要<code>12cycles</code>，耗时大约<code>3ns</code>；</li><li><code>L3 Cache</code>，三级缓存，在同插槽的所有<code>core</code>共享<code>L3</code>缓存，分为多个<code>2M</code>的段，访问<code>L3</code>需要<code>38cycles</code>，耗时大约<code>12ns</code>；</li></ul><p>由于<code>CPU</code>高速缓存的存在，虽然在速度上带来了很大的提升，但是多级多核心缓存也带来了另一个问题，即缓存一致性问题，比如多个核心缓存了同样的数据，其中一个将其值修改了，没有及时刷新到主内存，进而也导致后续其他操作有可能出现错误。</p><p>为了解决缓存一致性带来的问题，<code>CPU</code>提供了对应的解决方案：</p><ul><li><p>总线锁</p><p>在多核<code>CPU</code>中，当其中一个核心在操作数据时，会像总线发送一个<code>LOCK#</code>信号，当其他核心再请求时，会被阻塞，此时在处理中的核心独占共享内存。总线锁相当于是锁住<code>CPU</code>与总线的通信，所以效率上会有很大影响。</p></li><li><p>缓存锁</p><p>如果缓存在处理器缓存行中的内存区域在<code>LOCK</code>操作期间被锁定，当它执行锁操作回写内存时，处理不在总线上声明<code>LOCK#</code>信号，而是修改内部的缓存地址，然后通过缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域的数据，当其他处理器回写已经被锁定的缓存行的数据时会导致该缓存行无效。所以如果声明了 CPU 的锁机制，会生成一个<code>LOCK</code>指令，会产生两个作用：</p><ol><li><p><code>Lock</code>前缀指令会引起引起处理器缓存回写到内存，在<code>P6</code>以后的处理器中， <code>LOCK</code>信号一般不锁总线，而是锁缓存。</p></li><li><p>一个处理器的缓存回写到内存会导致其他处理器的缓存无效。</p></li></ol></li><li><p>缓存一致性协议</p><p>处理器定义一套完整的协议用于保证缓存的一致性，比如经典的<code>MESI</code>协议，它是给缓存设置一个标记，共四种：</p><ul><li><code>M(Modified)</code>：修改缓存，表示当前缓存已经被修改，跟内存中的不一样了</li><li><code>E(Exclusive)</code>：独占缓存，表示当前缓存与内存中一致，并且其他核心没有缓存</li><li><code>S(Shared)</code>：共享缓存，表示当前缓存和内存中一致，并且有多个核心也缓存了</li><li><code>I(Invaild)</code>：失效缓存，表示当前缓存已经失效</li></ul><p><code>CPU</code>通过嗅探(snooping)协议，每个核心的缓存控制器不仅仅控制自己核心的读写，同时也会嗅探其他核心的读写操作。</p><ol><li>如果当前缓存状态是<code>I</code>，就从内存中读取，否则直接使用高速缓存。</li><li>如果缓存状态是<code>E</code>或者<code>M</code>的核心嗅探到其他核心有读操作，则会将自己更新后到值刷新到内存，并将缓存状态设置为<code>S</code>。</li></ol></li></ul><h2 id="CPU优化"><a href="#CPU优化" class="headerlink" title="CPU优化"></a>CPU优化</h2><p>除了使用高速缓存来提升性能以外，为了更充分的利用处理器内部的运算单元，处理器可能会对输入的指令进行乱序执行优化，处理器会在执行之后将乱序执行的结果重组，保证该结果与顺序执行的结果一致，但并不保证程序中各个语句执行先后顺序与输入代码中的顺序一致，这个是处理器的优化执行；还有一个就是编程语言的编译器也会有类似的优化，比如指令重排来提升性能。</p><h1 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h1><p>在<code>Java 5</code>以前，<code>volatile</code>是一个备受争议的关键字，因为使用它总会出现一些出乎意料的结果，直到<code>Java 5</code>之后，对<code>volatile</code>做了优化，它才得以重获新生。</p><h2 id="内存语义"><a href="#内存语义" class="headerlink" title="内存语义"></a>内存语义</h2><p>当一个变量被<code>volatile</code>关键字修饰之后，会在其汇编指令加上一个<code>lock</code>前缀。而<code>lock</code>指令在多核<code>CPU</code>中出触发如下动作：</p><ol><li><p><code>lock</code>指令会引起处理器将缓存回写到内存。</p><p><code>lock</code>前缀的指令在执行时，会声言处理器的<code>LOCK#</code>信号。如果是多处理器的情况下，当前处理器会独占共享内存。这种情况是锁总线，而现在更多的采取锁缓存的方式，即不在总线上声言<code>LOCK#</code>信号，而是，锁定内存在处理器中被缓存的区块，并回写到主存，使用缓存一致性机制来保证修改的原子性。缓存一致性机制会禁止同时修改两个及以上处理缓存的内存区域数据。</p></li><li><p>缓存回写到内存之后会导致其他处理器的缓存失效。</p><p>处理器使用<code>MESI</code>协议维护处理器内的缓存和其他处理器缓存的一致性，通过嗅探技术，保证自己的缓存、其他处理器的缓存、主存的数据在总线上保持一致。比如通过嗅探发现有别的处理器打算写内存地址，而这个地址属于共享状态，那么当前处理器会使自己的缓存行无效，下次访问相同内存地址时，强制填充缓存行。</p></li></ol><h2 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a>happens-before规则</h2><p>前面在说到<a href="https://blogs.felixu.top/2019/01/17/Concurrency-2019-01-17-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/">JMM</a>的<code>happens-before</code>规则时曾提到过一条规则：<code>volatile</code>变量规则：对一个<code>volatile</code>域的写，<code>happens-before</code>于任意后续对这个<code>volatile</code>域的读。 我们来看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;<span class="comment">// 1</span></span><br><span class="line">        flag = <span class="keyword">true</span>;<span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;<span class="comment">// 3</span></span><br><span class="line">            <span class="keyword">int</span> i = a;<span class="comment">// 4</span></span><br><span class="line">            . . .</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当A线程执行<code>writer()</code>之后，B线程执行<code>read()</code>，根据<code>happens-before</code>规则可以建立如下关系：</p><ul><li>根据程序次序规则：1 <code>happens-before</code> 2，3 <code>happens-before</code> 4。</li><li>根据<code>volatile</code>规则：2 <code>happens-before</code> 3。</li><li>根据<code>happens-before</code>的传递性：1 <code>happens-before</code> 4。</li></ul><p>由执行结果可知，A执行的结果对B是可见的。</p><h2 id="volatile的读-写"><a href="#volatile的读-写" class="headerlink" title="volatile的读-写"></a>volatile的读-写</h2><p>当写一个<code>volatile</code>变量时，<code>JMM</code>会把该线程工作内存中共享变量的值刷新到主存中，我们以上面代码为例，来看写一个<code>volatile</code>变量的示意图：</p><p><img src="http://oss-blog.felixu.top/volatile%E5%86%99%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="volatile写示意图"></p><p>如图所示，当A线程执行之后，会讲执行结果刷新到主存，此时主存与A线程工作内存中共享变量的值是一样的。</p><p>当读一个<code>volatile</code>变量时，<code>JMM</code>会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。</p><p><img src="http://oss-blog.felixu.top/volatile%E8%AF%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="volatile读示意图"></p><p>如图所示，当B线程在读<code>flag</code>变量后，本地内存B包含的值已经被置为无效。此时，线程B必须从主内存中读取共享变量。线程B的读取操作将导致本地内存B与主内存中的共享变量的值变成一 致。</p><p>综合来看也就是<code>volatile</code>变量的写操作结果将对后续<code>volatile</code>读操作可见。总结如下：</p><ul><li>在<a href="https://blogs.felixu.top/2019/01/17/Concurrency-2019-01-17-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/">JMM</a>中说过，<code>Java</code>的线程通信是基于共享内存模型的，线程A写一个<code>volatile</code>变量，线程B读这个<code>volatile</code>变量，等价于A线程给B线程发消息告诉其共享变量已经被修改。</li><li>线程A写一个<code>volatile</code>变量，本质是向后续要读这个<code>volatile</code>变量发送消息，告诉其当前共享变量已发生改变。</li><li>线程B读一个<code>volatile</code>变量，本质是接收到了前面某个线程对共享变量进行修改的消息。</li></ul><h2 id="原子性、可见性、顺序性"><a href="#原子性、可见性、顺序性" class="headerlink" title="原子性、可见性、顺序性"></a>原子性、可见性、顺序性</h2><p>前面已经解释过原子性、可见性、有序性的概念，不知道的可以<a href="https://blogs.felixu.top/2019/01/18/Concurrency-2019-01-18-%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7/">戳这里</a>。</p><p>经常听到有同行小伙伴问这样一个问题：<code>volatile</code>为啥保证不了原子性或者说<code>volatile</code>为什么不能保证线程安全。要搞清楚这个问题，首先的搞清楚原子性的概念，其次需要理解<code>volatile</code>的特性。要理解<code>volatile</code>的特性，我们不妨认为其是对单个读写操作做了同步(加锁)，比如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> a = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        a = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在多线程环境下，其效果等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> a = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        a = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> temp = getA();</span><br><span class="line">        temp += <span class="number">1L</span>;</span><br><span class="line">        setA(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锁的<code>happens-before</code>规则保证释放锁和获取锁之间的内存可见性，这也对应着<code>volatile</code>变量的读总会读到上次写的结果。</p><p>锁的语义决定了临界区代码执行具有原子性，所以即便是64位的<code>long</code>类型或者是<code>double</code>类型，它们也是具有原子性的。但是<code>volatile</code>只是相当于对变量加锁，只是原子操作具有原子性，而对于非原子操作，比如典型的<code>a++</code>，我们看下面的等效代码就可以知道，其是不具有原子性的。所以多线程执行<code>a++</code>时，还是会出现线程安全问题。</p><p><code>volatile</code>通过插入特定的屏障，来禁止编译器和处理器的一些重排序，来保证顺序性。比如单例模式中的<code>Double Check</code></p><p>所以总的来说：</p><ul><li>具有可见性。<code>volatile</code>读操作总能看到对<code>volatile</code>变量最后的写入。</li><li>具有一定的原子性。对原子操作是具有原子性的，但对于复合操作不具有原子性，这也回答了这段开始那个问题。</li><li>具有顺序性。通过特定的屏障禁用了一些处理器和编译器的重排序，保证了多线程环境下，由于重排序带来的程序错误。</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>为了实现<code>volatile</code>的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障用以禁止特定类型的重排序。<code>JMM</code>基于保守策略来插入屏障，策略如下：</p><ul><li>在每个<code>volatile</code>写操作前面插入一个<code>StoreStore</code>屏障。</li><li>在每个<code>volatile</code>写操作后面插入一个<code>StoreLoad</code>屏障。</li><li>在每个<code>volatile</code>读操作前面插入一个<code>LoadLoad</code>屏障。</li><li>在每个<code>volatile</code>读操作后面插入一个<code>LoadStore</code>屏障。</li></ul><p>正是通过这种保守的策略，保证在任意处理器平台，任意的程序中都能得到正确的<code>volatile</code>内存语义。</p><p>由于这些屏障的存在，<code>volatile</code>可以禁止以下重排序：</p><table align="center"><br>    <tr><br>        <td>是否能重排序</td><br>        <td colspan="3">第二个操作</td><br>   </tr><br>    <tr><br>        <td>第一个操作</td><br>        <td>普通读/写</td><br>        <td>volatile读</td><br>        <td>volatile写</td><br>    </tr><br>    <tr><br>        <td>普通读/写</td><br>        <td></td><br>        <td></td><br>        <td>NO</td><br>    </tr><br>    <tr><br>        <td>volatile读</td><br>        <td>NO</td><br>        <td>NO</td><br>        <td>NO</td><br>    </tr><br>    <tr><br>        <td>volatile写</td><br>        <td></td><br>        <td>NO</td><br>        <td>NO</td><br>    </tr><br></table><p>从表中可以得到如下结论：</p><ul><li>当后一个操作是<code>volatile</code>写时，无论前面是什么操作都不可以发生重排序，这个规则保证了<code>volatile</code>写之前的操作不会被重排序到<code>volatile</code>写之后。</li><li>当前一个操作是<code>volatile</code>读时，无论后面是什么操作都不可以发生重排序，这个规则保证了<code>volatile</code>读之后的操作不会被重排序到<code>volatile</code>读之前。</li><li>当前一个操作是<code>volatile</code>写，后一个操作是<code>volatile</code>读时，不能重排序。</li></ul><p>我们来看一下<code>volatile</code>读/写插入屏障的示意图：</p><p><img src="http://oss-blog.felixu.top/volatile%10%E8%AF%BB%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97.jpg" alt="volatile读指令序列"></p><p>以上就是<code>volatile</code>读的指令执行序列，下面我们再来看看写：</p><p><img src="http://oss-blog.felixu.top/volatile%E5%86%99%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97.jpg" alt="volatile写指令序列"></p><p>这里<code>volatile</code>写后面的<code>StoreLoad</code>作用是避免<code>volatile</code>写与后面可能有的<code>volatile</code>读/写操作重排序。因为编译器常常无法准确判断在一个<code>volatile</code>写的后面是否需要插入一个<code>StoreLoad</code>屏障(比如，一个<code>volatile</code>写之后方法立即<code>return</code>)。为了保证能正确实现<code>volatile</code>的内存语义，<code>JMM</code>在采取了保守策略：在每个<code>volatile</code>写的后面，或者在每个<code>volatile</code> 读的前面插入一个<code>StoreLoad</code>屏障。从整体执行效率的角度考虑，<code>JMM</code>最终选择了在每个<code>volatile</code>写的后面插入一个<code>StoreLoad</code>屏障。因为<code>volatile</code>写-读内存语义的常见使用模式是：一个写线程写<code>volatile</code>变量，多个读线程读同一个<code>volatile</code>变量。当读线程的数量大大超过写线程时， 选择在<code>volatile</code>写之后插入<code>StoreLoad</code>屏障将带来可观的执行效率的提升。从这里可以看到<code>JMM</code>在实现上的一个特点：首先确保正确性，然后再去追求执行效率。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>使用<code>volatile</code>应满足以下条件：</p><ol><li>对变量的写操作不依赖当前值。</li><li>该变量没有包含在具有其他变量的不变式中。</li></ol><p>我们常用的<code>volatile</code>的地方有两个地方，比如前面介绍<a href="https://blogs.felixu.top/2019/01/10/Concurrency-2019-01-10-%E4%BB%8E%E7%BA%BF%E7%A8%8B%E5%88%B0%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">线程</a>的时候提到的中断标志，还有单例模式中的<code>Double Check</code>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>volatile</code>仅仅保证了单个变量的读/写具有原子性，而锁(synchronized)的互斥执行的特性可以保证整个临界区(临界区用来表示一种公共资源或者说是共享数据，可以被多个线程使用。但是每个线程使用时，一旦临界区资源被一个线程占有，那么其他线程必须等待。)代码的执行具有原子性。</p><p>从功能上讲，锁的功能比<code>volatile</code>更加强大，但从性能上讲，<code>volatile</code>更有优势。</p><ul><li>具有可见性</li><li>具有有序性</li><li>具有一定的原子性(对单个变量而言)</li></ul><blockquote><p>参考自《Java并发编程的艺术》</p></blockquote>]]></content>
      
      <categories>
          
          <category> Concurrrnt Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concurrrnt Programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原子性、可见性、有序性</title>
      <link href="/2019/01/18/Concurrency-2019-01-18-%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7/"/>
      <url>/2019/01/18/Concurrency-2019-01-18-%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E6%9C%89%E5%BA%8F%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>在介绍<a href="https://blogs.felixu.top/2019/01/17/Concurrency-2019-01-17-Java内存模型-JMM/">JMM</a>时提到过，造成并发问题的根本原因是在于对共享变量的操作，而导致并发场景下数据一致性问题的本质在于三个特性没有得到保证，即原子性、可见性、有序性。</p><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><p>所谓原子性，我的理解就是，一个或者一组操作是不可被分割的，一旦开始执行，则会一直执行到结束，中间不会有线程切换。</p><p>原子性保证了读取到的某个值是由一个线程写入的，而不是由多个线程同时写入而造成的错误数据。如在32位的<code>JVM</code>中对64位<code>long</code>或<code>double</code>值的写操作是分成两次相邻的32位值写操作，在多线程的环境下，可能会有线程只读到了前32位，这种操作就是非原子性的，非原子性操作会受到多线程的干扰而产生结果错误。这里列举几个操作，来对原子性操作有个印象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">int</span> b = a;</span><br></pre></td></tr></table></figure><ul><li><p>第一句，将1赋值给a，只有一个操作，它必然是不可被分割的，所以它是原子性操作。</p></li><li><p>第二句，这是一个举例原子操作典型的一个反例，看似只有一个操作，但是它并不是，它分了3步，首先获取a的值，然后将a加1，最后将结果再赋值给a。这是三步操作，所以如果a作为共享变量的话，在多线程场景下，如果不保证其操作的原子性，就有可能会造成错误的结果。我们可以用<code>CountDownLatch</code>来模拟问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span>  <span class="keyword">static</span> CountDownLatch count = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                a++;</span><br><span class="line">                count.countDown();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        count.await();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单线程执行后应该是10，但是结果并不是，基本上全是小于10。</p></li><li><p>第三句，先读取a的值，再赋值给b，同样也不是原子操作。</p></li></ul><p>在<code>JMM</code>中定义了8个原子操作，在前面介绍<code>JMM</code>的一副图中出现过，但是当时并没有进行介绍，这里简单介绍一下：</p><ul><li><strong>lock</strong>：标记一个变量为线程独占状态，作用于主内存。</li><li><strong>unlock</strong>：释放变量的线程独占状态，使其可被其他线程操作，作用于主内存。</li><li><strong>read</strong>：将主内存中的变量读入到工作内存中，以便<code>load</code>到工作内存对应的变量副本中，作用于主内存。</li><li><strong>write</strong>：将工作内存中<code>store</code>传递过来的变量写回到主内存中，作用于主内存。</li><li><strong>load</strong>：将<code>read</code>操作得到的变量值放入到工作内存中的变量副本，作用于工作内存。</li><li><strong>store</strong>：将工作内存中的变量副本传递给<code>write</code>刷新到主内存，作用于工作内存。</li><li><strong>use</strong>：将工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作，作用于工作内存。</li><li><strong>assign</strong>：将一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作，作用于工作内存。</li></ul><p>基本类型的单次读写操作是原子的。</p><h1 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h1><p>可见性是指，当一个线程对共享变量进行修改之后，其他线程会得知变量值已，而去重新获取新的值。</p><p>多线程场景下共享变量在多线程中如下图所示：</p><p><img src="http://oss-blog.felixu.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F.jpg" alt="多线程共享变量"></p><p>可见性是保证多线程场景下数据一致性和正确性的基石有序性。<code>Java</code>通过一些关键字(如<code>synchronized</code>、<code>volatile</code>等，后面会专门介绍)来保证共享变量的可见性。</p><h1 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h1><p>在介绍<a href="https://blogs.felixu.top/2019/01/17/Concurrency-2019-01-17-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/">JMM</a>时，说到重排序的时候提到过，从源代码到最后执行的指令集，需要经历编译器的重排序和处理器的重排序，重排序虽然带来了性能上的提升，但是同时也带来了有序性问题。</p><p>所以为了保证有序性，需要合理的禁止重排序。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>多线程问题，归根结底就是解决这三大问题，为了解决这三大问题，<code>Java</code>为我们提供了诸多解决办法，比如锁、<code>synchronized</code>、<code>volatile</code>、<code>final</code>等，后面有时间在慢慢来介绍这些玩意。</p>]]></content>
      
      <categories>
          
          <category> Concurrrnt Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concurrrnt Programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java内存模型(JMM)</title>
      <link href="/2019/01/17/Concurrency-2019-01-17-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/"/>
      <url>/2019/01/17/Concurrency-2019-01-17-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/</url>
      <content type="html"><![CDATA[<p>在并发编程中，需要处理两个关键问题：线程之间如何通信以及线程之间如何同步。</p><ul><li>通信：是指线程之间以何种机制来进行信息交换。在命令式编程中有两种方式进行通信，即共享内存和消息传递。共享内存是通过内存中的共享状态来进行隐式通信，而消息传递是通过发消息来进行显式通信。</li><li>同步：是指程序中用于控制不同线程执行顺序的机制。在共享内存的并发模型中，线程同步是显式进行的，需要程序员指定方法或代码块在线程间互斥执行，在消息通信的并发模型中，同步是隐式进行的，因为发消息必然要在收消息之前。</li></ul><p><code>Java</code>的并发采用的是共享内存模型。</p><h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><p><code>JMM(Java Memory Model)</code>内存模型定义了共享内存系统中多线程程序读写操作的行为规范，来屏蔽各种和操作系统内存访问的差异，来实现<code>Java</code>程序在各个平台下都能达到一致性的内存访问效果。<code>JMM</code>的主要目标是定义程序中各个变量的访问规则，也就是在虚拟机中将变量(这里的变量是指共享变量，即实例域，静态域和数组元素，局部变量是线程私有的，不会共享，也不受<code>Java</code>内存模型的影响)存储到内存以及从内存中取出变量这类的底层细节。通过这些规则来规范对内存的读写操作，从而保证指令执行的正确性。它与处理器有关、与缓存有关、与并发有关、与编译器也有关。它解决了<code>CPU</code>多级缓存、处理器优化、指令重排等导致的内存访问问题，保证了并发场景下的可见性、原子性和有序性。内存模型解决并发问题主要采用两种方式：限制处理器优化和使用内存屏障。</p><p><code>JMM</code>定义了线程和内存的交互方式，在<code>JMM</code>抽象模型中，分为主内存、工作内存。主内存是所有线程共享的，工作内存是每个线程独有的。线程对变量的所有操作(读取、赋值)都必须在工作内存中进行，不能直接读写主内存中的变量。并且不同的线程之间无法访问对方工作内存中的变量，线程间的变量值的传递都需要通过主内存来完成，他们三者的交互关系如下：</p><p><img src="http://oss-blog.felixu.top/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%86%85%E5%AD%98%E4%BA%A4%E4%BA%92.jpg" alt="JMM"></p><p>总的来说，<code>JMM</code>是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会 对代码乱序执行等带来的问题。目的是保证并发编程场景中的原子性、可见性和有序性。</p><h1 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h1><p>很多时候，指令执行的顺序并不是按照我们写代码的顺序执行的，在单线程下语义不变情况下，为了提高性能，处理器，编译器等都会对指令进行重新排序，让我们觉得指令是按照顺序执行的。重排序分为三种：</p><ul><li>编译器优化的重排序。编译器在不改变单线程语义的前提下，可以重新安排语句的执行顺序。</li><li>指令集并行的重排序。现代计算机多采用了指令集并行技术来将多条指令并行执行，如果不存在数据依赖，处理器可以改变语句对应处理器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是乱序的。</li></ul><p>从<code>Java</code>源代码到最终执行的指令集，可能会经历如下步骤：</p><p><img src="http://oss-blog.felixu.top/%E6%BA%90%E7%A0%81%E7%BB%8F%E9%87%8D%E6%8E%92%E5%BA%8F%E5%88%B0%E6%8C%87%E4%BB%A4%E9%9B%86.jpg" alt="Java源代码到指令集"></p><p>这三种重排序，第一种为编译器的重排序，后两种属于处理器的重排序，<code>JMM</code>对于这两种类型的重排序分别有对应的策略，对于编译器的重排序，<code>JMM</code>的编译器重排序规则会禁止特定类型的编译器重排序(并不是所有)，而对于处理器的重排序，则<code>JMM</code>规则会在编译器生成指令序列的时候，插入内存屏障(<code>Memory Barriers</code>或<code>Memory Fence</code>)，通过内存屏障来禁止特定类型的处理器重排序。</p><p><code>JMM</code>是语言级别的内存模型，它保证了在不同的编译器和不同的处理器上，通过禁止特定类型的编译器和处理器重排序，为程序员提供一致的内存可见性保证。</p><h1 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h1><p>现代计算机多采用多核心处理器，且每个处理器有自己的高速缓冲区，由于<code>CPU</code>处理速度与主存处理速度存在巨大差距，所以采用多级缓存来提高性能，保证指令流水线可以持续执行，避免处理器停顿下来等待与主存交换数据。这样做的弊端也很明显，即缓存并不是实时与主存发生交互，可能出现多个缓存不一致的问题，从而给程序带来一些问题。而内存屏障正是用来解决这一问题的。</p><p>硬件层面内存屏障分为两种：<code>Load Barriers</code>和<code>Store Barriers</code>，<code>Load</code>顾名思义加载，<code>Store</code>储存，也就是读屏障和写屏障。读屏障可以使缓存失效，强制从主存重新<code>Load</code>数据。写屏障是强制将更新的数据<code>Store</code>入主存，使其他缓存无效，可以看到新的值。</p><p>内存屏障一方面通过禁止屏障前后的指令重排序，另一方面可以通过强制<code>Load</code>和<code>Store</code>来保证可见性。</p><p>在<code>JMM</code>中一共有四种类型的屏障，其实也是通过以上两种屏障组合而来：</p><ul><li><p><strong>LoadLoad Barriers</strong>：<code>Load1 | LoadLoad | Load2</code></p><p><code>Load2</code>及后续读取的操作必须等待<code>Load1</code>读取数据完成。</p></li><li><p><strong>StoreStore Barriers</strong>：<code>Store1 | StoreStore | Store2</code></p><p><code>Store2</code>及后续写入的操作必须等待<code>Store1</code>写入完成，保证<code>Store1</code>写入结果对其他线程可见。</p></li><li><p><strong>LoadStore Barriers</strong>：<code>Load1 | LoadStore | Store2</code></p><p><code>Store2</code>及后续写入的操作必须等待<code>Load1</code>读取数据完成。</p></li><li><p><strong>StoreLoad Barriers</strong>：<code>Store1 | StoreLoad | Load2</code></p><p><code>Load2</code>及后续读取的操作必须等待<code>Store1</code>写入完成，保证<code>Store1</code>写入结果对其他线程可见。该屏障会使屏障前所有的内存指令执行完毕之后才会允许屏障之后的操作执行，且会将屏障前操作的结果全部从高速缓存区刷新到主存中。</p></li></ul><p><code>StoreLoad Barriers</code>是一个全能屏障，兼具其他3种屏障的功能，也是大多数处理器所支持的一种屏障。使用该屏障需要高昂的开销，因为这个屏障前所有操作的结果都要对屏障后可见，即会将屏障前操作的结果全部刷新到主存，操作结果对屏障后的相关操作可见。</p><p><code>Java</code>代码中一般不会主动使用内存屏障，主要用到内存屏障的地方在三个关键字上，即<code>synchronized</code>、<code>volatile</code>、<code>final</code>(后续会单独介绍这三个关键字)。当然实在要自己加也是有办法的，那就是<code>Java</code>的<code>Unsafe</code>类，这个类提供了一些和硬件交互的一些本地方法，这里不再展开，需要了解可<code>Google</code>。</p><h1 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>happens-before</code>是<code>JMM</code>最核心的概念，理解<code>happens-before</code>也是理解<code>JMM</code>的核心。那么什么是<code>happens-before</code>呢，<code>happens-before</code>的概念最初由<code>Leslie Lamport</code>在其一篇影响深远的论文《Time，Clocks and the Ordering of Events in a Distributed System》中提出的，<code>JSR-133</code>中使用<code>happens-before</code>来阐述操作之间的内存可见性，如果一个操作的执行结果需要对另一个操作可见，那么这两个这两个操作就必须存在<code>happens-before</code>的关系，两个操作可以在同一个线程内，也可以在不同线程之间，其次，<code>happens-before</code>仅仅是要求前一个操作的结果对后一个操作可见，并不是说前一个操作一定要先于后一个操作发生。</p><p><code>JMM</code>在设计时关键需要考虑两点：</p><ul><li><p>程序员对内存模型的使用。</p><p>程序员希望内存模型是易于理解、易于编程的，程序员希望基于一个强内存模型来编写代码。</p></li><li><p>编译器和处理器对内存模型的实现。</p><p>编译器和处理器是希望内存模型对它们的束缚越少越好，这样它们就可以尽可能的优化来提升效率，编译器和处理器希望实现一个弱内存模型。</p></li></ul><p><code>JMM</code>将重排序分为两种情况：</p><ul><li><p>会改变程序运行结果的重排序。</p><p>对于这类重排序，<code>JMM</code>要求编译器和处理器必须禁止重排序。</p></li><li><p>不会改变程序运行结果的重排序。</p><p>对于这类重排序，<code>JMM</code>则不做要求(即<code>JMM</code>允许此类重排序)。</p></li></ul><p>下面是<code>JMM</code>设计示意图：</p><p><img src="http://oss-blog.felixu.top/happens-before%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="JMM设计示意图"></p><p>不难理解<code>JMM</code>在设计时关键需要考虑两点是互相矛盾的，那么<code>JMM</code>是如何平衡这两点的呢。从图中可以看到<code>JMM</code>为程序员提供了易于理解的<code>happens-before</code>规则，同时也为程序员提供了足够的内存可见性保证。同时，<code>JMM</code>也尽可能少的对编译器和处理器进行限制。</p><p><code>JMM</code>其实一直都是在遵循一个原则：只要不改变程序的执行结果(指单线程程序和正确同步的多线程程序)，编译器和处理器怎么优化都可以(其实<code>as-if-serial</code>语义也是这样的)。例如，如果编译器经过细致的分析后，认定一个锁只会被单个 线程访问，那么这个锁可以被消除。再如，如果编译器经过细致的分析后，认定一个volatile变 量只会被单个线程访问，那么编译器可以把这个volatile变量当作一个普通变量来对待。这些 优化既不会改变程序的执行结果，又能提高程序的执行效率。</p><p><code>JSR-133</code>对<code>happens-before</code>有如下定义：</p><ul><li>如果一个操作<code>happens-before</code>另一个操作，那么第一个操作的执行结果将对第二个操作 可见，而且第一个操作的执行顺序排在第二个操作之前。</li><li>两个操作之间存在<code>happens-before</code>关系，并不意味着<code>Java</code>平台的具体实现必须要按照<code>happens-before</code>关系指定的顺序来执行。如果重排序之后的执行结果，与按<code>happens-before</code>关系来执行的结果一致，那么这种重排序并不非法（也就是说，JMM允许这种重排序）。</li></ul><p>上面两点同样还是对应于程序员和处理器、编译器双方的矛盾作出的平衡。第一点是对程序员的保证，从程序员的角度来说，可以这样理解<code>happens-before</code>关系：如果<code>A happens-before B</code>，那么<code>Java</code>内存模型将向程序员保证——A操作的结果将对B可见， 且A的执行顺序排在B之前。注意，这只是Java内存模型向程序员做出的保证！而第二点则是<code>JMM</code>对处理器、编译器的让步，<code>JMM</code>其实是在遵循一个基本原则：只要不改变程序的执行结果(指的是单线程程序和正确同步的多线程程序)， 编译器和处理器怎么优化都行。JMM这么做的原因是：程序员对于这两个操作是否真的被重 排序并不关心，程序员关心的是程序执行时的语义不能被改变(即执行结果不能被改变)。因 此，<code>happens-before</code>关系本质上和<code>as-if-serial</code>语义是一回事。</p><h2 id="对比as-if-serial"><a href="#对比as-if-serial" class="headerlink" title="对比as-if-serial"></a>对比as-if-serial</h2><p>对比<code>happens-before</code>和<code>as-if-serial</code>：</p><ul><li><code>as-if-serial</code>语义保证单线程内程序的执行结果不被改变，<code>happens-before</code>关系保证正确同步的多线程程序的执行结果不被改变。</li><li><code>as-if-serial</code>语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按程序的顺 序来执行的。<code>happens-before</code>关系给编写正确同步的多线程程序的程序员创造了一个幻境：正 确同步的多线程程序是按<code>happens-before</code>指定的顺序来执行的。</li><li><code>as-if-serial</code>语义和<code>happens-before</code>这么做的目的，都是为了在不改变程序执行结果的前提 下，尽可能地提高程序执行的并行度。</li></ul><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>在<code>JSR-133</code>中定义了如下规则：</p><ul><li>程序顺序规则：一个线程中的每个操作，<code>happens-before</code>于该线程中的任意后续操作。</li><li>监视器锁规则：对一个锁的解锁，<code>happens-before</code>于随后对这个锁的加锁。</li><li><code>volatile</code>变量规则：对一个<code>volatile</code>域的写，<code>happens-before</code>于任意后续对这个<code>volatile</code>域的读。 </li><li>传递性：如果<code>A happens-before B</code>，且<code>B happens-before C</code>，那么<code>A happens-before C</code>。 </li><li><code>start()</code>规则：如果线程A执行操作<code>ThreadB.start()</code>(启动线程B)，那么A线程的 <code>ThreadB.start()</code>操作<code>happens-before</code>于线程B中的任意操作。</li><li><code>join()</code>规则：如果线程A执行操作<code>ThreadB.join()</code>并成功返回，那么线程B中的任意操作 <code>happens-before</code>于线程A从<code>ThreadB.join()</code>操作成功返回。</li></ul><blockquote><p>参考自《Java并发编程的艺术》</p></blockquote>]]></content>
      
      <categories>
          
          <category> Concurrrnt Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concurrrnt Programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程的生命周期</title>
      <link href="/2019/01/11/Concurrency-2019-01-11-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2019/01/11/Concurrency-2019-01-11-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>前面介绍了线程相关的一些基本概念，也说了一个线程的创建以及销毁，那么一个线程应该是有生命周期的。这里就来看一下，一个线程一生可能会经历哪些阶段。</p><h1 id="线程的六种状态"><a href="#线程的六种状态" class="headerlink" title="线程的六种状态"></a>线程的六种状态</h1><p>线程的一生可能会经过以下6种状态：</p><ul><li><p><code>NEW</code></p><p>初始化状态，线程被创建，但是还没有调用<code>start</code>方法。</p><p>线程的创建过程其实在前面<a href="https://blogs.felixu.top/2019/01/10/Concurrency-2019-01-10-%E4%BB%8E%E7%BA%BF%E7%A8%8B%E5%88%B0%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">从线程说起并发问题</a>介绍线程创建的时候已经说过了，这里就不再上代码了，简单说一下创建线程的三种方式：</p><ul><li>实现<code>Runnable</code>接口，重写<code>run</code>方法。</li><li>继承<code>Thread</code>类，重写<code>run</code>方法。</li><li>实现<code>Callable</code>接口，重写<code>call</code>方法，实现带返回值的线程。</li></ul></li><li><p><code>RUNNABLE</code></p><p>运行中状态，其实这里应该是包含两种状态的，一种是就绪状态(即线程调用了<code>start</code>方法，但是不一定会立马运行，还需要等待系统<code>OS</code>的调度)，另一种是运行状态(即正在执行中)。</p></li><li><p><code>BLOCKED</code></p><p>阻塞状态，线程进入等待状态。而阻塞又分为多种情况。</p><ul><li>等待阻塞：线程执行<code>wait</code>方法，<code>JVM</code>将当前线程加入等待队列。</li><li>同步阻塞：与其他线程竞争同步锁时，由于锁已被其他线程获取，进而被<code>JVM</code>加入同步队列。</li><li>其他阻塞：<code>Thread.sleep()</code>、<code>join</code>、<code>IO</code>等操作时，<code>JVM</code>会阻塞直至上述操作结束才会恢复线程。</li></ul></li><li><p><code>WAITTING</code></p><p>等待状态，线程进入等待，需要被唤醒。</p></li><li><p><code>TIME_WAITTING</code></p><p>等待状态，超时以后自动返回。</p></li><li><p><code>TERMINATED</code></p><p>终止状态，线程执行完毕退出。</p></li></ul><h1 id="线程状态的转换"><a href="#线程状态的转换" class="headerlink" title="线程状态的转换"></a>线程状态的转换</h1><p>线程的一生可能会经过以上六个阶段，那么它们之间又是怎么转换的呢，这里贴上流程转换的图：</p><p><img src="http://oss-blog.felixu.top/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" alt="线程状态转换"></p><p>在图上可以看到一些操作，等到后面再慢慢介绍这些都是干嘛用的。</p><p>我们也可以通过以下代码来演示一下线程的相关状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStatus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"time-waiting"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (ThreadStatus.class) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ThreadStatus.class.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"waiting"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Block(),<span class="string">"Block-01"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Block(),<span class="string">"Block-02"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Block.class)&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码运行起来之后，我们打开控制台，执行<code>jps</code>命令，这个命令可以获得相应<code>Java</code>进程的<code>PID</code>。</p><p>在执行<code>jstack PID</code>(<code>PID</code>是我们上一步拿到的)可以得到下面的<code>dump</code>信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">. . . . . .省略部分信息</span><br><span class="line">"Block-02" #16 prio=5 os_prio=31 tid=0x00007ffe1683e000 nid=0xa303 waiting for monitor entry [0x0000700006b83000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at top.felixu.chapter1.lifecycle.ThreadStatus$Block.run(ThreadStatus.java:44)</span><br><span class="line">        - waiting to lock &lt;0x000000076b0cdb00&gt; (a java.lang.Class for top.felixu.chapter1.lifecycle.ThreadStatus$Block)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">"Block-01" #14 prio=5 os_prio=31 tid=0x00007ffe1683a000 nid=0xa503 waiting on condition [0x0000700006a80000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">        at java.lang.Thread.sleep(Native Method)</span><br><span class="line">        at java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">        at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span><br><span class="line">        at top.felixu.chapter1.lifecycle.ThreadStatus$Block.run(ThreadStatus.java:44)</span><br><span class="line">        - locked &lt;0x000000076b0cdb00&gt; (a java.lang.Class for top.felixu.chapter1.lifecycle.ThreadStatus$Block)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">"waiting" #12 prio=5 os_prio=31 tid=0x00007ffe13089000 nid=0xa603 in Object.wait() [0x000070000697d000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x000000076aeed260&gt; (a java.lang.Class for top.felixu.chapter1.lifecycle.ThreadStatus)</span><br><span class="line">        at java.lang.Object.wait(Object.java:502)</span><br><span class="line">        at top.felixu.chapter1.lifecycle.ThreadStatus.lambda$main$1(ThreadStatus.java:26)</span><br><span class="line">        - locked &lt;0x000000076aeed260&gt; (a java.lang.Class for top.felixu.chapter1.lifecycle.ThreadStatus)</span><br><span class="line">        at top.felixu.chapter1.lifecycle.ThreadStatus$$Lambda$2/668386784.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">"time-waiting" #11 prio=5 os_prio=31 tid=0x00007ffe16839000 nid=0xa803 waiting on condition [0x000070000687a000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">        at java.lang.Thread.sleep(Native Method)</span><br><span class="line">        at java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">        at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span><br><span class="line">        at top.felixu.chapter1.lifecycle.ThreadStatus.lambda$main$0(ThreadStatus.java:15)</span><br><span class="line">        at top.felixu.chapter1.lifecycle.ThreadStatus$$Lambda$1/764977973.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">. . . . . .省略部分信息</span><br></pre></td></tr></table></figure><p>从上面的<code>dump</code>可以看到线程的大部分状态了。</p><blockquote><p>参考自《Java并发编程的艺术》</p></blockquote>]]></content>
      
      <categories>
          
          <category> Concurrrnt Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concurrrnt Programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从线程到并发编程</title>
      <link href="/2019/01/10/Concurrency-2019-01-10-%E4%BB%8E%E7%BA%BF%E7%A8%8B%E5%88%B0%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/01/10/Concurrency-2019-01-10-%E4%BB%8E%E7%BA%BF%E7%A8%8B%E5%88%B0%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h1><p>说起线程，还是得从进程说起。那么进程是什么呢？现代操作系统在运行一个程序时，会为其创建一个进程。比如你电脑上打开个<code>QQ</code>或者是启动一个<code>Java</code>程序，操作系统都会为其创建一个进程。而线程是操作系统的最小调度单元，一个进程中可以有多个线程。<code>OS</code>调度会让多个线程之间高速切换，让我们以为是多个线程在同时执行。</p><h1 id="线程的创建与销毁"><a href="#线程的创建与销毁" class="headerlink" title="线程的创建与销毁"></a>线程的创建与销毁</h1><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>那么怎么去创建一个线程呢。在<code>Java</code>中我们可以有以下三种方式来创建线程：</p><ol><li><p>继承<code>Thread</code>类，重写<code>run</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"extends thread run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo1 thread1 = <span class="keyword">new</span> ThreadDemo1();</span><br><span class="line">        ThreadDemo1 thread2 = <span class="keyword">new</span> ThreadDemo1();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>Runnable</code>接口，重写<code>run</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" implements runnable run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo2(), <span class="string">"thread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo2(), <span class="string">"thread2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>Callable</code>接口，重写<code>call</code>方法，实现带返回值的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo3</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executorService = newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        ThreadDemo3 thread = <span class="keyword">new</span> ThreadDemo3();</span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(thread);</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" implements callable"</span>);</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h2><ol><li><p><code>interrupt</code>中断标志</p><p>前面看完了如何创建一个线程，那么又怎么去终止一个线程呢。以前的<code>Thread</code>类中有个<code>stop</code>方法可以用来终止线程，而现在已经被标记过期了，其实也不建议使用<code>stop</code>方法来终止线程，为什么呢！因为我想用过<code>Linux</code>系统的都知道<code>kill -9</code>吧，<code>stop</code>方法与其类似，<code>stop</code>方法会强制杀死线程，而不管线程中的任务是否执行完毕。那么我们如何更加优雅的去终止一个线程呢。</p><p>这里<code>Thread</code>类为我们提供了一个<code>interrupt</code>方法。</p><p>当我们需要终止一个线程，可以调用它的<code>interrupt</code>方法，相当于告诉这个线程你可以终止了，而不是暴力的杀死该线程，线程会自行中断，我们可以使用<code>isInterrupted</code>方法来判断线程是否已经终止了：这段代码可以测试到，如果<code>interrupt</code>方法无法终止线程，那么这个线程将会是死循环，而无法结束。这里使用<code>interrupt</code>以一种更加安全中断线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"result: "</span> + i);</span><br><span class="line">        &#125;, <span class="string">"interrupt-test"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>volatile</code>共享变量作为中断标志</p><p>这里先不介绍<code>volatile</code>的内存语义以及原理，它可以解决共享变量的内存可见性问题。使其他线程可以及时看到被<code>volatile</code>变量修饰的共享变量的变更。所以我们也可以使用<code>volatile</code>来达到中断线程的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">long</span> i = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;, <span class="string">"volatile-demo"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">"volatile-demo is start"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如上面示例中的代码，我们可以控制在特定的地方，改变共享变量，来达到让线程退出。</p></li></ol><h2 id="线程复位"><a href="#线程复位" class="headerlink" title="线程复位"></a>线程复位</h2><ul><li><p><code>interrupted</code></p><p>前面说了使用<code>interrupt</code>可以告诉线程可以中断了，线程同时也提供了另外一个方法即<code>Thread.interrupted()</code>可以已经设置过中断标志的线程进行复位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isInterrupted = Thread.currentThread().isInterrupted();</span><br><span class="line">                <span class="keyword">if</span>(isInterrupted)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"before: "</span> + isInterrupted);</span><br><span class="line">                    Thread.interrupted(); <span class="comment">// 对线程进行复位，中断标识为false</span></span><br><span class="line">                    System.out.println(<span class="string">"after: "</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"InterruptDemo"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        thread.interrupt(); <span class="comment">// 设置中断标识为true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before: true</span><br><span class="line">after: false</span><br></pre></td></tr></table></figure><p>通过<code>demo</code>可以看到线程确实是先被设置了中断标识，后又被复位。</p></li><li><p>异常复位</p><p>除了使用<code>interupted</code>来设置中断复位，还有一种情况，就是对抛出<code>InterruptedException</code>异常的方法，在 <code>InterruptedExceptio</code>抛出之前，<code>JVM</code>会先把线程的中断标识位清除，然后才会抛出 <code>InterruptedException</code>，这个时候如果调用<code>isInterrupted</code>方法，将会返回<code>false</code>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 抛出InterruptedException会将复位标识设置为false</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"InterruptDemo"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        thread.interrupt(); <span class="comment">// 设置中断标志为true</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(thread.isInterrupted()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at top.felixu.chapter1.lifecycle.InterruptDemo.lambda$main$0(InterruptDemo.java:48)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>通过例子可以看到，在抛出异常之后，<code>isInterrupted</code>确实是又变成了<code>false</code>。</p></li></ul><h1 id="为什么要并发编程"><a href="#为什么要并发编程" class="headerlink" title="为什么要并发编程"></a>为什么要并发编程</h1><p>单线程有时候也可以解决问题啊，那么我们为什么还要并发编程呢，很大程度上是因为更好的利用<code>CPU</code>资源，提升我们系统的性能。根据摩尔定律(当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18-24个月翻一倍以上。这一定律揭示了信息技术进步的速度。)推算，不久就会有超强的计算能力，然而，事情并未像预料的那样发展。2004年，Intel宣布4GHz芯片的计划推迟到2005年，然后在2004年秋季，Intel宣布彻底取消4GHz的计划。现在虽然有4GHz的芯片但频率极限已逼近，而且近10年停留在4GHz，也就是摩尔定律应该是失效了。既然单核<code>CPU</code>的计算能力短期无法提升了，多核<code>CPU</code>在此时应运而生。单线程毕竟只可能跑在一个核心上，浪费了<code>CPU</code>的资源，从而催生了并发编程，并发编程是为了发挥出多核<code>CPU</code>的计算能力，提升性能。</p><blockquote><p>顶级计算机科学家<code>Donald Ervin Knuth</code>如此评价这种情况：在我看来，这种现象（并发）或多或少是由于硬件设计者无计可施了导致的，他们将摩尔定律的责任推给了软件开发者。</p></blockquote><p>并发编程总结起来说大致有以下优点：</p><ul><li>充分利用<code>CPU</code>，提高计算能力。</li><li><p>方便对业务的拆分。比如一个购物流程，我们可以拆分成下单，减库存等，利用多线程来加快响应。</p></li><li><p>对于需要阻塞的场景，可以异步处理，来减少阻塞。</p></li><li>对于执行性能，可以通过多线程并行计算。</li></ul><h1 id="并发编程有哪些问题"><a href="#并发编程有哪些问题" class="headerlink" title="并发编程有哪些问题"></a>并发编程有哪些问题</h1><p>看起来好像多线程确实很好，那么我们就可以尽量多的去开线程了嘛。也并不是这样的，多线程的性能也受多方面因素所影响：</p><ul><li><p>时间片的切换</p><p>时间片是<code>CPU</code>分配给线程执行的时间，即便是单核<code>CPU</code>也是可以通过时间片的切换使多个线程切换执行，让我们觉得是多个线程在同时执行，因为时间片的切换是非常快的，我们感觉不到的。每次切换线程是需要时间的，而且切换的时候需要保存当前线程的状态，以便切换回来的时候可以继续执行。所以当线程较多的时候，切换时间片所带来的消耗也同样可观。那么有没有什么姿势可以解决这个问题呢，是有的：</p><ul><li>无锁并发编程：多线程在竞争锁时会引起上下文的切换，可以使用对数据<code>Hash</code>取模分段的思想来避免使用锁。</li><li><code>CAS</code>算法：可以使用<code>Atomic</code>包中相关原子操作，来避免使用锁。</li><li>使用最少线程：根据业务需求创建线程数，过多的创建线程会造成线程闲置和资源浪费。</li><li>协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li></ul></li><li><p>死锁</p><p>为了保证多线程的正确性，很多时候，我们都会使用锁，它是一个很好用的工具，然而在一些时候，不正确的姿势会造成死锁问题，进而引发系统不可用。下面我们就来看一个死锁案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DeadLockDemo().deadLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">        Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread one = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-one"</span>);</span><br><span class="line"></span><br><span class="line">        Thread two = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread-two"</span>);</span><br><span class="line"></span><br><span class="line">        one.start();</span><br><span class="line">        two.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后便会发现程序无法终止了，那么究竟发生了什么呢？我们通过<code>jps</code>命令来查看一下当前<code>Java</code>的<code>PID</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jps</span><br><span class="line">1483 DeadLockDemo</span><br></pre></td></tr></table></figure><p>可以看到当前的程序<code>PID</code>为<code>1483</code>(每个人的都不一样，得自己执行哦)，接下来我们使用<code>jstack</code>命令<code>dump</code>出当前程序的线程信息，看一下究竟发生了什么。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> jstack 1483</span><br><span class="line">. . . . . .省略部分信息</span><br><span class="line">"thread-two" #12 prio=5 os_prio=31 tid=0x00007fbba9956800 nid=0x5603 waiting for monitor entry [0x0000700011058000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo.lambda$deadLock$1(DeadLockDemo.java:32)</span><br><span class="line">        - waiting to lock &lt;0x000000076ada81b8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ada81c8&gt; (a java.lang.Object)</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo$$Lambda$2/381259350.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">"thread-one" #11 prio=5 os_prio=31 tid=0x00007fbba8033800 nid=0xa803 waiting for monitor entry [0x0000700010f55000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo.lambda$deadLock$0(DeadLockDemo.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ada81c8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ada81b8&gt; (a java.lang.Object)</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo$$Lambda$1/1607521710.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">. . . . . .省略部分信息</span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">"thread-two":</span><br><span class="line">  waiting to lock monitor 0x00007fbba9006eb8 (object 0x000000076ada81b8, a java.lang.Object),</span><br><span class="line">  which is held by "thread-one"</span><br><span class="line">"thread-one":</span><br><span class="line">  waiting to lock monitor 0x00007fbba90082a8 (object 0x000000076ada81c8, a java.lang.Object),</span><br><span class="line">  which is held by "thread-two"</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">"thread-two":</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo.lambda$deadLock$1(DeadLockDemo.java:32)</span><br><span class="line">        - waiting to lock &lt;0x000000076ada81b8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ada81c8&gt; (a java.lang.Object)</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo$$Lambda$2/381259350.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">"thread-one":</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo.lambda$deadLock$0(DeadLockDemo.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ada81c8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ada81b8&gt; (a java.lang.Object)</span><br><span class="line">        at top.felixu.section1.deadlock.DeadLockDemo$$Lambda$1/1607521710.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></table></figure><p>从上面来看，两个线程都是阻塞状态，都在等待别的线程释放锁，但是永远都等不到，从而形成了死锁。那么平常开发过程中尽量按以下操作来避免不必要的死锁(当然有时候不注意还是会莫名死锁，得<code>dump</code>信息加以分析才能找出问题的)：</p><ul><li>避免一个线程同时获取多个锁。</li><li>尽量避免一个线程在锁内同时获取多个资源，尽量保证每个锁内只占有一个资源。</li><li>尝试使用定时锁，使用<code>lock.tryLock(timeout)</code>来替代使用内部锁机制。</li><li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li></ul></li><li><p>软件和硬件资源的限制</p><p>程序跑在服务器上，必然受到服务器等方面的限制。</p><ul><li>硬件资源限制：一般指磁盘读写速度、带宽、<code>CPU</code>性能等方面</li><li>软件资源限制：一般指数据库连接数、<code>Socket</code>连接数等方面</li></ul></li></ul><p>所以，如何合理的使用线程需要我们在实践中具体去分析。</p><blockquote><p>参考自《Java并发编程的艺术》</p></blockquote>]]></content>
      
      <categories>
          
          <category> Concurrrnt Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concurrrnt Programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单一职责原则</title>
      <link href="/2019/01/08/DesignPattern-2019-01-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/"/>
      <url>/2019/01/08/DesignPattern-2019-01-02-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/</url>
      <content type="html"><![CDATA[<blockquote><p>想要精通设计模式，必须要先搞清楚设计模式的六大原则。</p></blockquote><p>在开始设计模式之前，先来谈谈设计模式的六大设计原则，第一个便是单一职责原则<code>(Single Responsibility Principle)</code>了。</p><h2 id="单一职责原则定义"><a href="#单一职责原则定义" class="headerlink" title="单一职责原则定义"></a>单一职责原则定义</h2><blockquote><p>There should never be more than one reason for a class to change.   </p></blockquote><p>这句话意思很简单，不应该存在多于一个导致类变更的原因。通俗来说就是，一个类应该只有一项职责，不会有多个原因导致类发生变更。</p><h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>我们设计这样一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsername</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显看到这样一个接口，谁都会觉得有问题，用户属性怎么可以和用户行为放在一起。肯定应该是用户属性放一起，用户行为放一起啊。</p><h2 id="单一职责解决问题"><a href="#单一职责解决问题" class="headerlink" title="单一职责解决问题"></a>单一职责解决问题</h2><p>对啊，根据这样的想法，我们把刚刚的接口拆成两个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsername</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserBiz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这就是单一职责原则。<br>有人可能就要说了，这也太简单了吧。对啊，对于一个从未接触过设计模式的小白来说，在设计接口的时候，都会去这么设计的。<br>是啊，真的很简单，可是有时候却又十分的难去实现，因为职责的划分很难，就比如手机打电话来说<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dial</span><span class="params">(String phoneNumber)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chat</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们定义一个手机接口，我们来划分职责，接通和挂断应该是通信协议上的，而聊电话则是数据传输。那按照单一原则来说，我们应该给它们也拆到两个接口中去，但是拆开之后呢，我们会发现，当我想打电话的时候我需要将他们再组装到一起，这样反而是增加了系统的复杂度，我想平时遇到类似情况的时候，我们都是放在一个接口中的。</p><p>另一方面，职责扩散，就是由于某种原因，导致原来单一的职责变成了若干了更细粒度的职责。这时候如果再去拆分，代价还是比较高的。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>单一职责原则会有以下优点：</p><ol><li>降低了类的复杂度，实现什么职责都有清晰明确的定义。</li><li>提高了可读性。</li><li>提高了可维护性。</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到过大佬有这样的说法，只有逻辑足够简单，才可以在方法级别上违反单一职责原则，只有类中方法数量足够少，才可以在类级别上违反单一职责原则。     </p><p>单一职责原则看起来很简单，做起来却很难，单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类的设计是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。       </p><p>因此对于单一职责原则，我的建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</p>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IDEA常用快捷键(Mac版)</title>
      <link href="/2019/01/02/IDE-2019-01-02-IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac%E7%89%88/"/>
      <url>/2019/01/02/IDE-2019-01-02-IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac%E7%89%88/</url>
      <content type="html"><![CDATA[<h2 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h2><p><strong>⌘</strong> <code>Command</code><br><strong>⇧</strong> <code>Shift</code><br><strong>⌥</strong> <code>Option</code><br><strong>⌃</strong> <code>Control</code><br><strong>↩︎</strong> <code>Return/Enter</code><br><strong>⌫</strong> <code>Delete</code><br><strong>⌦</strong> <code>向前删除键(Fn+Delete)</code><br><strong>↑</strong> <code>上箭头</code><br><strong>↓</strong> <code>下箭头</code><br><strong>←</strong> <code>左箭头</code><br><strong>→</strong> <code>右箭头</code><br><strong>⇞</strong> <code>Page Up(Fn+↑)</code><br><strong>⇟</strong> <code>Page Down(Fn+↓)</code><br><strong>Home</strong> <code>Fn + ←</code><br><strong>End</strong> <code>Fn + →</code><br><strong>⇥</strong> <code>右制表符(Tab键)</code><br><strong>⇤</strong> <code>左制表符(Shift+Tab)</code><br><strong>⎋</strong> <code>Escape(Esc)</code>    </p><h2 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p><strong>全局查找</strong>：<code>Alt+F7</code>全局查找在哪里使用<br><strong>全局查找选中字符</strong>：<code>Command+Alt+F7</code>查找选中的字符在工程中出现的地方，可以不是方法变量类等，这个和上面的有区别的<br><strong>在当前文件中查找某个字符串</strong>：<code>Command＋F7</code>可以查询当前元素在当前文件中的引用，然后按F3可以选择 ，功能基本同上<br><strong>高亮选中的文本</strong>：选中文本，按<code>Command+Shift+F7</code>高亮显示所有该文本，按Esc高亮消失<br><strong>查找相同文本并高亮</strong>：选中文本，按<code>Alt+F3</code>逐个往下查找相同文本，并高亮显示，<code>shift+f3</code>就是往上找<br><strong>GET/SET方法</strong>：<code>Ctrl+Enter</code>出现生成GET/SET方法的界面<br><strong>任意处切换到下一行</strong>：<code>Shift+Enter</code>任意处往下面添加一行空行并切换到下一行<br><strong>查找类</strong>：<code>Command+N</code>查找类<br><strong>查找文件</strong>：<code>Command+shift+N</code>查找文件<br><strong>当前文件中搜索并替换</strong>：<code>Command+R</code>替换<br><strong>在整个工程或者某个目录下替换变量</strong>：<code>Ctrl+Shift+R</code>可以在整个工程或着某个目录下面替换变量<br><strong>删除当前行</strong>：<code>Command+Y</code> 删除当前光标所在行<br><strong>复制当前行到下一行</strong>：<code>Command+D</code>将当前光标所在行复制到下一行<br><strong>合并多行到一行</strong>：<code>Ctrl+Shift+J</code>将多行连接成一行，会去掉空行<br><strong>自动生成一些代码结构</strong>：<code>Command+J</code>自动生成一些代码结构，比如for循环之类的<br><strong>查找变量来源或在哪里被使用</strong>：<code>Command+B</code>查找变量的来源或者变量在哪里被使用，同<code>F4</code>相似，查找变量来源<br><strong>查找变量所属类</strong>：<code>Ctrl+Shift+B</code>查找变量所属的类<br><strong>定位当前行和列或跳转至某行某列</strong>：<code>Command+G</code>定位当前所在的行和列，或者跳转至某行某列<br><strong>在当前文件中查找</strong>：<code>Command+F</code>在当前文件里查找文本，<code>F3</code>向下看，<code>Shift+F3</code>向上看<br><strong>在整个工程或者某个目录下查找变量</strong>：<code>Ctrl+Shift+F</code>可以在整个工程或着某个目录下面查找变量<br><strong>查看最近修改的文件</strong>：<code>Alt+Shift+C</code>查看最近修改的文件<br><strong>查看最近打开过的文件</strong>：<code>command+E</code>查看最近打开的文件<br><strong>万能键</strong>：<code>alt+enter</code>导入包，自动修改，自动补全啊，很多功能<br><strong>格式化代码</strong>：<code>Command+Alt+L</code>格式化代码<br><strong>自动缩进</strong>：<code>Command+Alt+I</code>自动缩进，不用多次使用tab或着backspace键，也是比较方便的<br><strong>代码补全</strong>：<code>Ctrl+Shift+Space</code>代码补全，这个会判断可能用到的，这个代码补全和代码提示是不一样的，可能和系统快捷键冲突，反正我是没反应<br><strong>方法参数提示</strong>：<code>Command+P</code>方法参数提示<br><strong>将选中代码放入代码块中</strong>：<code>Command+Alt+T</code>把选中的代码放在try{}，if{}，else{}里<br><strong>多文本复制</strong>：<code>Command+Shift+V</code>会出来之前复制过的内容列表，可以复制多个文本<br><strong>大小写转换</strong>：<code>Command+Shift+U</code>大小写转换<br><strong>查找文件所在位置</strong>：<code>Alt+F1</code>查找文件所在目录位置<br><strong>单行注释</strong>：<code>Command+/</code>注释一行或着多行 //<br><strong>多行注释</strong>：<code>Ctrl+Shift+/</code>多行注释/*…*/<br><strong>返回上次编辑的位置</strong>：<code>Command+alt+左右箭头</code>返回上次编辑的位置<br><strong>重命名</strong>：<code>Shift+F6</code>重命名<br><strong>上移或下移代码</strong>：<code>Command+Shift+上下箭头</code>把代码上移或着下移<br><strong>跳至大括号开头或结尾</strong>：<code>Command+[或]</code>可以跳到大括号的开头结尾，毫无效果<br><strong>显示当前类中所有方法</strong>：<code>Command+f12</code>可以显示当前类中所有方法<br><strong>跳转至接口或抽象方法的实现代码</strong>：<code>Command+Alt+B</code>可以跳转至接口的实现类，接口或抽象方法的实现方法<br><strong>debug时查看选中值</strong>：<code>Alt+F8</code>debug时选中查看值<br><strong>debug跳到下一步</strong>：<code>F8</code>跳到下一步<br><strong>debug跳至下一个断点</strong>：<code>Shift+F8</code>跳到下一个断点<br><strong>debug中进入代码</strong>：<code>F7</code>进入到代码<br><strong>debug强行进入代码</strong>：<code>Alt+Shift+F7</code>强制进入代码<br><strong>debug运行</strong>：<code>Ctrl+Shift+F9</code> debug运行java类<br><strong>非debug运行</strong>：<code>Ctrl+Shift+F10</code>正常运行java类<br><strong>停止运行</strong>：<code>Command+F2</code>停止运行           </p>]]></content>
      
      <categories>
          
          <category> IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Validation参数校验</title>
      <link href="/2018/12/21/Spring-2018-12-21-Spring-Validation%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
      <url>/2018/12/21/Spring-2018-12-21-Spring-Validation%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Spring Validation</code>是在<code>Spring Context</code>下的，在<code>Spring Boot</code>项目中，我们引入<code>spring-boot-starter-web</code>便会引入进来，<code>Spring Validation</code>是对<code>Hibernate Validator</code>的二次封装，使我们可以更方便的在<code>Spring MVC</code>中完成自动校验。</p><p><code>Hibernate Validator</code>是对<code>JSR-303(Bean Validation)</code>的参考实现。<code>Hibernate Validator</code> 提供了<code>JSR-303</code>规范中所有内置<code>constraint</code>的实现，除此之外还有一些附加的<code>constraint</code>。</p><p><code>JSR-303</code>定义的<code>constraint</code>：</p><table><thead><tr><th style="text-align:center">Constraint</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">@Null</td><td style="text-align:center">被注解的元素必须为<code>null</code></td></tr><tr><td style="text-align:center">@NotNull</td><td style="text-align:center">被注解的元素必须不为<code>null</code></td></tr><tr><td style="text-align:center">@AssertTure</td><td style="text-align:center">被注解的元素必须为<code>ture</code></td></tr><tr><td style="text-align:center">@AssertFalse</td><td style="text-align:center">被注解的元素必须为<code>false</code></td></tr><tr><td style="text-align:center">@Min(value)</td><td style="text-align:center">被注解的元素必须是数字且必须大于等于指定值</td></tr><tr><td style="text-align:center">@Max(value)</td><td style="text-align:center">被注解的元素必须是数字且必须小于等于指定值</td></tr><tr><td style="text-align:center">@DecimalMin(value)</td><td style="text-align:center">被注解的元素必须是数字且必须大于等于指定值</td></tr><tr><td style="text-align:center">@DecimalMax(value)</td><td style="text-align:center">被注解的元素必须是数字且必须小于等于指定值</td></tr><tr><td style="text-align:center">@Size(max, min)</td><td style="text-align:center">被注解的元素必须在指定的范围内</td></tr><tr><td style="text-align:center">@Digits(integer, fraction)</td><td style="text-align:center">被注解的元素必须是数字且其值必须在给定的范围内</td></tr><tr><td style="text-align:center">@Past</td><td style="text-align:center">被注解的元素必须是一个过去的日期</td></tr><tr><td style="text-align:center">@Future</td><td style="text-align:center">被注解的元素必须是一个将来的日期</td></tr><tr><td style="text-align:center">@Pattern(value)</td><td style="text-align:center">被注解的元素必须符合给定正则表达式</td></tr></tbody></table><p><code>Hibernate Validator</code>附加实现的<code>constraint</code></p><table><thead><tr><th style="text-align:center">Constraint</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">@Email</td><td style="text-align:center">被注解的元素必须是<code>Email</code>地址</td></tr><tr><td style="text-align:center">@Length(min, max)</td><td style="text-align:center">被注解的元素长度必须在指定的范围内</td></tr><tr><td style="text-align:center">@NotEmpty</td><td style="text-align:center">被注解的元素必须</td></tr><tr><td style="text-align:center">@Range</td><td style="text-align:center">被注解的元素(可以是数字或者表示数字的字符串)必须在给定的范围内</td></tr><tr><td style="text-align:center">@URL</td><td style="text-align:center">被注解的元素必须是<code>URL</code></td></tr></tbody></table><p>当然，我们也可以自定义实现，自定义实现在下面使用中在讲吧。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在开始使用之前，先做好准备工作，创建一个<code>Spring Boot</code>项目，然后引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只需要引入这个依赖就可以了。</p><h2 id="使用-Validated注解拦截校验"><a href="#使用-Validated注解拦截校验" class="headerlink" title="使用@Validated注解拦截校验"></a>使用@Validated注解拦截校验</h2><p>在<code>Controller</code>中，我们需要校验前端传递过来的参数，我们可以这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(@RequestBody @Validated User user, BindingResult result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.getAllErrors().stream().map(ObjectError::getDefaultMessage).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在需要校验的实体前面打上<code>@Validated</code>注解就可以了，这时候，如果我们传递的参数符合要求，则会正常返回。否则返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    "age字段不合法",</span><br><span class="line">    "name字段不合法"</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>它会将我们所有不合法信息一次性全部返回，在日常开发中，我们可以吧校验<code>BindingResult</code>是否有错误信息的校验统一抽出到一个工具类中去做处理，使用项目中统一格式返回错误信息就好。这就是一个最简单的校验示例了，其他注解也都是类似的，就不多举例了，可以自己尝试着玩玩。</p><p>在日常开发中想必都曾遇到过这样的需求，比如这个age这个字段，我想要这个字段只在<code>PC</code>端校验，在<code>App</code>端不做限制，这就需要用到分组校验了，每个注解都提供了一个<code>group</code>属性，利用这个属性就可以轻易做到以上需求。比如在User上的注解中加入<code>group</code>属性，指定其被校验的<code>group</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">1</span>, max = <span class="number">22</span>, message = <span class="string">"name字段不合法"</span>, groups = &#123;App.class, PC.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"age字段不合法"</span>, groups = PC.class)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Controller中的@Validated中指定当前<code>group</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(@RequestBody @Validated(App.class)</span> User user, BindingResult result) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.getAllErrors().stream().map(ObjectError::getDefaultMessage).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我再使用两个不合法字段访问返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    "name字段不合法"</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到，它并没有对<code>age</code>字段进行校验。这就是它的分组校验。</p><h2 id="在方法实现中拦截校验"><a href="#在方法实现中拦截校验" class="headerlink" title="在方法实现中拦截校验"></a>在方法实现中拦截校验</h2><p>它不只是在Controller校验前端传递过来的参数的时候可以用，它在方法中同样可以用，我们可以这样来使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SmartValidator smartValidator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="string">"&#123;\"name\": \"felixu\",\"age\": 0&#125;"</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = objectMapper.readValue(context, User.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        BeanPropertyBindingResult result = <span class="keyword">new</span> BeanPropertyBindingResult(user, <span class="string">"user"</span>);</span><br><span class="line">        smartValidator.validate(user, result);</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.getAllErrors().stream().map(ObjectError::getDefaultMessage).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用需要被校验的实体构造<code>BeanPropertyBindingResult</code>对象，然后将传递给<code>SmartValidator</code>的<code>validate</code>方法来完成跟上面相同的校验。<code>validate</code>有个重载方法，也接收分组，所以这种方式同样可以实现分组校验。</p><h2 id="自定义实现"><a href="#自定义实现" class="headerlink" title="自定义实现"></a>自定义实现</h2><p>需求总是多变的，有时候，可能上面的校验方式并不能满足我们的要求，这时候就需要我们自定义一下校验了，要做到自定义注解来校验，我们需要做以下两步，首先实现<code>ConstraintValidator&lt;A extends Annotation, T&gt;</code>(ps：原谅我的自恋。。。)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsFelixuValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">IsFelixu</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(IsFelixu constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"felixu"</span>.equals(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>isValid</code>便是我们的校验逻辑，<code>true</code>为通过校验。</p><p>然后我们实现注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(</span><br><span class="line">    <span class="comment">// 指定对应的校验类</span></span><br><span class="line">    validatedBy = &#123;IsFelixuValidator.class&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsFelixu &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">this</span> value is not felixu"</span>;</span><br><span class="line">    <span class="comment">// 这两个属性必须要存在</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就<code>ok</code>了，我们继续使用之前的来做测试，在<code>User</code>的<code>name</code>属性上加上<code>@IsFelixu</code>注解，此时测试，如果不传递<code>name</code>为<code>felixu</code>的值，则会提示如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    "this value is not felixu",</span><br><span class="line">    "age字段不合法"</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>JSR-303</code> 的发布使得在数据自动绑定和验证变得简单，使开发人员在定义数据模型时不必考虑实现框架的限制。当然<code>Bean Validation</code>还只是提供了一些最基本的<code>constraint</code>。</p><p>上面只是相对简单的用法，也是我们现在项目中所用到的方式，在实际的开发过程中，用户可以根据自己的需要组合或开发出更加复杂的<code>constraint</code>。这就需要想象力了，从上面的用法中应该可以想到很多地方可以去使用，但是设计和实现时，往往需要考虑诸多因素，比如易用性和封装的复杂度，等等方面，还需要自己去考量了。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java异常处理体系</title>
      <link href="/2018/12/13/Java-2018-12-13-Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/"/>
      <url>/2018/12/13/Java-2018-12-13-Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>吹逼两小时，代码五分钟。平常写代码中异常无处不在，早就练就了我们<code>try{...} actch(){...}finally{...}</code>一把梭的深厚功力。毕竟它看起来真的很简单，我们用着也蛮顺心，但是你真的了解它吗，真的不会出错吗？</p><h1 id="Java异常体系"><a href="#Java异常体系" class="headerlink" title="Java异常体系"></a>Java异常体系</h1><p>下面是Java中的异常继承图：</p><p><img src="https://felixu-blog.oss-cn-hangzhou.aliyuncs.com/%E5%BC%82%E5%B8%B8%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt=""></p><p><code>Throwable</code>是整个异常体系中的顶级父类，它拥有两个子类，分别是<code>Error</code>和<code>Exception</code>。</p><p><code>Error</code>是由机器底层抛出的错误，我们无法处理的，比如<code>OutOfMemoryError</code>，当遇到这类错误时，<code>JVM</code>会直接终止进程，应用终止。此类异常我们不要去捕获，因为捕获了也处理不了。</p><p><code>Exception</code>是程序可以处理的错误，主要分为运行时异常，和非运行时异常。或者叫做受检异常和非受检异常。</p><p>运行时异常都是<code>RuntimeException</code>及其子类，比如，<code>NullPointException</code>、<code>ArrayIndexOutOfBoundsException</code>等等，这类的异常属于非受检异常(<code>UnChecked</code>)，我们可以对其捕获处理，也可以不处理，而我们一般也不会做处理的，因为这类错误通常是我们逻辑错误所导致的，我们应该尽量避免此类<code>Bug</code>。</p><p>而非运行时异常，比如<code>IOException</code>、<code>EOFException</code>等等所有非<code>RuntimeException</code>及其子类，都是非运行时异常，也就是受检异常(<code>Checked</code>)，当方法抛出了这类异常，则调用者必须在调用该方法时对其进行处理，否则将无法编译。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>那么我们该怎么去处理异常呢，这时候自然而然会想到<code>try-catch-finally</code>，我们来下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(test1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flag = test2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test1] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test1] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 分别调用test3()和test4()</span></span><br><span class="line">            flag = test4();</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"[test2] result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test2] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test2] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test3] result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test3] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test3] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">2</span> / <span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">"[test4] result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test4] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test4] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当其中<code>test2()</code>方法分别调用<code>test3()</code>和<code>teset4()</code>，打印顺序会是怎么样的呢，不如先思考一下。</p><p>调用<code>test3()</code>时，打印结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[test3] result=true</span><br><span class="line">[test3] finally result=true</span><br><span class="line">[test2] result=true</span><br><span class="line">[test2] finally result=true</span><br><span class="line">[test1] finally result=true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>调用<code>test4()</code>时，打印结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[test4] catch exception result=true</span><br><span class="line">[test4] finally result=false</span><br><span class="line">[test2] finally result=false</span><br><span class="line">[test1] finally result=false</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>不知道这段代码的实际执行结果和你所想的有没有出入，众所周知的是，当<code>try{···}</code>块中的代码执行未发生异常，贼执行<code>finally{...}</code>块中的代码，如果执行出现异常，则会先执行<code>catch(){...}</code>中的代码，再执行<code>finally{...}</code>中的代码。但是当这些代码块中出现<code>return</code>、<code>throw</code>则会发生变化。</p><p><strong>当try{···}块或者catch(){…}块中有return、throw时，在return或者throw执行前回优先执行finally{…}代码块中的内容</strong></p><blockquote><p>特别提醒，<code>finally</code>中禁止使用<code>return</code>，这里使用，只是为了演示用。</p></blockquote><p>所以当<code>finally</code>中有<code>throw</code>或者<code>return</code>时，它会覆盖<code>try</code>块中和<code>catch</code>块中的<code>throw</code>以及<code>return</code>，从而出现异常屏蔽现象，比如下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"catch"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它将打印出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread "main" java.lang.RuntimeException: finally</span><br><span class="line">at top.felixu.exception.ExceptionDemo1.main(ExceptionDemo1.java:14)</span><br></pre></td></tr></table></figure><p><code>catch</code>块中的异常就被覆盖了，这种现象还是有可能出现在<code>try-catch-finally</code>捕获处理流相关操作中，在<code>finally</code>中手动关闭流出现异常时，但是在<code>JDK7</code>版本以后，<code>try-with-resource</code>可以帮我们自动关闭流了。在<code>JDK7</code>中，所有的<code>IO</code>类都实现了<code>AutoCloseable</code>接口，并且需要实现其中的<code>close()</code>函数，资源释放过程需要在该函数中完成。那么，编译器在编译时，会自动添加<code>finally</code>代码块，并将<code>close()</code>函数中的资源释放代码加入<code>finally</code>代码块中，从而提高代码可读性。这里就不具体介绍了。</p><h1 id="异常处理约定"><a href="#异常处理约定" class="headerlink" title="异常处理约定"></a>异常处理约定</h1><ol><li>对于非受检异常，我们不要去捕获处理，而是通过测试和<code>review</code>代码来规避此类问题。</li><li>异常不要用来做流程控制，条件控制，因为异常处理的效率比分支处理要低。</li><li>对大块代码的<code>try-catch</code>是不负责的行为，我们要区分稳定代码已经不稳定代码。</li><li>捕获异常是为了处理异常，如果捕获了什么都不处理，不如不捕获，将其抛给其上层调用者。而最上层的调用者必须处理，防止用户看到无法理解的异常信息。</li><li><code>try</code>块中有事物代码，则<code>catch</code>到异常要手动回滚，或者抛出异常，让<code>AOP</code>框架来回滚，否则会吞掉异常，导致异常却未回滚。</li><li>不能在<code>finally</code>中使用<code>return</code>。</li><li>捕获异常必须与所抛出的异常匹配，或者所捕获的异常是抛出异常的父类。</li></ol>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java8新时间API</title>
      <link href="/2018/12/10/Java-2018-12-10-Java8%E6%96%B0%E6%97%B6%E9%97%B4API/"/>
      <url>/2018/12/10/Java-2018-12-10-Java8%E6%96%B0%E6%97%B6%E9%97%B4API/</url>
      <content type="html"><![CDATA[<p>Java 8日期/时间API是<code>JSR-310</code>的实现，它的实现目标是克服旧的日期时间实现中所有的缺陷。利用它可以更加方便我们去处理时间和日期的计算等问题。</p><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><p>新的日期/时间API它遵循以下的设计原则：</p><ul><li><strong>不变性</strong>：在新的日期/时间API中，所有的类都被设计成不可变的，这在多线程环境下也是没有问题的。</li><li><strong>关注点分离</strong>：在<code>Java8</code>中，相比于之前旧的时间和日历类，较大的改变是将人可读的日期时间和机器时间(unix timestamp)明确分离，为日期(Date)、时间(Time)、日期时间(DateTime)、时间戳(unix timestamp)以及时区定义了不同的类。</li><li><strong>清晰</strong>：在所有的类中，方法都被明确定义用以完成相同的行为。举个例子，要拿到当前实例我们可以使用now()方法，在所有的类中都定义了format()和parse()方法，而不是像以前那样专门有一个独立的类。为了更好的处理问题，所有的类都使用了工厂模式和策略模式，一旦你使用了其中某个类的方法，与其他类协同工作并不困难。</li><li><strong>实用操作</strong>：所有新的日期/时间API类都实现了一系列方法用以完成通用的任务，如：加、减、- - 格式化、解析、从日期/时间中提取单独部分，等等。</li><li><strong>可扩展性</strong>： 新的日期/时间API是工作在ISO-8601日历系统上的，但我们也可以将其应用在非IOS的日历上。</li></ul><h1 id="java-time"><a href="#java-time" class="headerlink" title="java.time"></a>java.time</h1><p><code>java.time</code>包中的是类是不可变且线程安全的。新的时间及日期API位于<code>java.time</code>中。下面是一些比较常用的类： </p><ul><li><code>Instant</code>：表示时间戳</li><li><code>LocalDate</code>：不包含具体时间点的日期</li><li><code>LocalTime</code>：不包含日期的时间点</li><li><code>LocalDateTime</code>：具体的日期时间点，不带时区</li><li><code>ZonedDateTime</code>：包含时区的完整的日期时间点，偏移量是以UTC/格林威治时间为基准的。 </li></ul><h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><p>对于这些类，它们都有以下一些方法：</p><ul><li>of：静态工厂方法。</li><li>parse：静态工厂方法，关注于解析。</li><li>get：获取某些东西的值。</li><li>is：检查某些东西的是否是true。</li><li>with：不可变的setter等价物。</li><li>plus：加一些量到某个对象。</li><li>minus：从某个对象减去一些量。</li><li>to：转换到另一个类型。</li><li>at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。</li></ul><h2 id="计算日期-时间"><a href="#计算日期-时间" class="headerlink" title="计算日期/时间"></a>计算日期/时间</h2><h3 id="获取当前时间-日期"><a href="#获取当前时间-日期" class="headerlink" title="获取当前时间/日期"></a>获取当前时间/日期</h3><p>以前有<code>Date</code>类可以获取当前时间，有<code>Calendar</code>类来做日历相关操作。而在Java8中，提供了多个类来获取当前的日期、时间、时间戳等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        System.out.println(LocalDate.now());</span><br><span class="line">        <span class="comment">// 获取当前时间点</span></span><br><span class="line">        System.out.println(LocalTime.now());</span><br><span class="line">        <span class="comment">// 获取当前时间点去掉纳秒</span></span><br><span class="line">        System.out.println(LocalTime.now().withNano(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 获取当前的日期时间</span></span><br><span class="line">        System.out.println(LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 获取当前年</span></span><br><span class="line">        System.out.println(LocalDate.now().getYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-09-04</span><br><span class="line">22:03:49.502</span><br><span class="line">22:03:49</span><br><span class="line">2018-09-04T22:03:49.502</span><br><span class="line">2018</span><br></pre></td></tr></table></figure><p>更多方法就需要大家自己去点点看啦。</p><h3 id="判断两个日期是否相等"><a href="#判断两个日期是否相等" class="headerlink" title="判断两个日期是否相等"></a>判断两个日期是否相等</h3><p>在Java8的众多类中，它们都重写了<code>toString()</code>方法。所以对于日期是否相同的判断，我们可以直接使用它的<code>equals()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        <span class="comment">// 构建2018-09-03</span></span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 判断是否相等</span></span><br><span class="line">        System.out.println(today.equals(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="判断一个日期是否在另一个日期之前"><a href="#判断一个日期是否在另一个日期之前" class="headerlink" title="判断一个日期是否在另一个日期之前"></a>判断一个日期是否在另一个日期之前</h3><p>有时候可能会有这样的需求，需要判断一个日期在另一个日期的前面还是后面，这时候就会用到<code>isBefore()</code>和<code>isAfter()</code>方法，这样就可以方便的作出判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建2018-09-04</span></span><br><span class="line">        LocalDate d1 = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 构建2018-09-03</span></span><br><span class="line">        LocalDate d2 = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 判断d1是否在d2后面</span></span><br><span class="line">        System.out.println(d1.isAfter(d2));</span><br><span class="line">        <span class="comment">// 判断d1是否在d2前面</span></span><br><span class="line">        System.out.println(d1.isBefore(d2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>可以看到我们直接可以使用<code>isBefore()</code>和<code>isAfter()</code>来判断两个日期谁前谁后了，而不需要向之前使用<code>Calendar</code>来进行麻烦的操作了。</p><h3 id="检查重复日期"><a href="#检查重复日期" class="headerlink" title="检查重复日期"></a>检查重复日期</h3><p>对于一些特定的日期，比如生日、纪念日等，我们可以轻易来判断某一日期是不是我们需要的特定日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate dateOfBirth = LocalDate.of(<span class="number">1992</span>, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">        MonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth());</span><br><span class="line">        MonthDay currentMonthDay = MonthDay.from(LocalDate.now());</span><br><span class="line">        <span class="keyword">if</span>(currentMonthDay.equals(birthday))&#123;</span><br><span class="line">            System.out.println(<span class="string">"Happy Birthday !"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Sorry, today is not your birthday！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy Birthday !</span><br></pre></td></tr></table></figure><h3 id="判断某个日期是不是周几"><a href="#判断某个日期是不是周几" class="headerlink" title="判断某个日期是不是周几"></a>判断某个日期是不是周几</h3><p>同样，我们可以很方便的来判断某天是周几。<code>DayOfWeek</code>构建的是周几，然后使用<code>from()</code>方法，来构建某一日期为周几，这样我们就可以轻松判断出某一日期是周几，而不必向以前一样麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DayOfWeek dayOfWeek = DayOfWeek.of(<span class="number">2</span>);</span><br><span class="line">        DayOfWeek from = DayOfWeek.from(LocalDate.now());</span><br><span class="line">        System.out.println(from.equals(dayOfWeek));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="延迟或者推前时间"><a href="#延迟或者推前时间" class="headerlink" title="延迟或者推前时间"></a>延迟或者推前时间</h3><p>有时候我们可能会需要用到一些日期计算，比如，昨天，前天，明天，一周前，一年前等。在Java8中可以轻松实现，因为这些类中已经提供了相关方法。<code>plus</code>开头的表示往后算，<code>minus</code>表示往前算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(today);</span><br><span class="line">        <span class="comment">// 推前一天</span></span><br><span class="line">        System.out.println(today.minusDays(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 延后一天</span></span><br><span class="line">        System.out.println(today.plusDays(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-09-04</span><br><span class="line">2018-09-03</span><br><span class="line">2018-09-05</span><br></pre></td></tr></table></figure><h3 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h3><p><code>Java8</code>提供了时钟类，利用时钟类可以实现和<code>System.currentTimeMillis()</code>一样的功能，还能够获取当前时区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        System.out.println(Clock.systemUTC().millis());</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 获取当前系统默认时区</span></span><br><span class="line">        System.out.println(Clock.systemDefaultZone().getZone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1536101287531</span><br><span class="line">1536101287531</span><br><span class="line">Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="检查闰年"><a href="#检查闰年" class="headerlink" title="检查闰年"></a>检查闰年</h3><p>可以使用<code>isLeapYear()</code>方法直接判断是否为闰年，而不用我们再自己去计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>).isLeapYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="带时区计算"><a href="#带时区计算" class="headerlink" title="带时区计算"></a>带时区计算</h3><p><code>Java 8</code>不仅将日期和时间进行了分离，同时还有时区。现在已经有好几组与时区相关的类了，比如<code>ZonId</code>代表的是某个特定的时区，而<code>ZonedDateTime</code>代表的是带时区的时间。它等同于<code>Java 8</code>以前的<code>GregorianCalendar</code>类。使用这个类，你可以将本地时间转换成另一个时区中的对应时间。用<code>ZoneOffset</code>类来代表某个时区，比如印度是<code>GMT</code>或者<code>UTC5：30</code>，你可以使用它的静态方法<code>ZoneOffset.of()</code>方法来获取对应的时区。只要获取到了这个偏移量，你就可以拿<code>LocalDateTime</code>和这个偏移量创建出一个<code>OffsetDateTime</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 设置时区</span></span><br><span class="line">        ZonedDateTime zonedDateTime = ZonedDateTime.of(now, ZoneId.of(<span class="string">"Australia/Darwin"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Current date and time in a particular timezone : "</span> + zonedDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建一个时间</span></span><br><span class="line">        LocalDateTime datetime = LocalDateTime.of(<span class="number">2018</span>, Month.SEPTEMBER, <span class="number">5</span>, <span class="number">7</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 设置偏移量</span></span><br><span class="line">        ZoneOffset offset = ZoneOffset.of(<span class="string">"+05:30"</span>);</span><br><span class="line">        <span class="comment">// 构建带偏移量的日期和时间</span></span><br><span class="line">        OffsetDateTime date = OffsetDateTime.of(datetime, offset);</span><br><span class="line">        System.out.println(<span class="string">"Date and Time with timezone offset in Java : "</span> + date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Current date and time in a particular timezone : 2018-09-05T07:50:43.187+09:30[Australia/Darwin]</span><br><span class="line">Date and Time with timezone offset in Java : 2018-09-05T07:50+05:30</span><br></pre></td></tr></table></figure><p><code>OffSetDateTime</code>主要是给机器来理解的，如果是给人看的，可以使用<code>ZoneDateTime</code>类。</p><h3 id="固定日期"><a href="#固定日期" class="headerlink" title="固定日期"></a>固定日期</h3><p>在前面我们用过一个<code>MonthDay</code>的类，用来构建特定的几月几日。这里用到了另一个<code>YearMonth</code>，它表示某年某月，我们可以它来知道某年某月有多少天，使用<code>YearMonth</code>的<code>lengthOfMonth()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前年月</span></span><br><span class="line">        YearMonth current = YearMonth.now();</span><br><span class="line">        System.out.println(current);</span><br><span class="line">        <span class="comment">// 获取这个月有多少天</span></span><br><span class="line">        System.out.println(current.lengthOfMonth());</span><br><span class="line">        <span class="comment">// 构建一个固定日期</span></span><br><span class="line">        YearMonth expire = YearMonth.of(<span class="number">2018</span>, Month.NOVEMBER);</span><br><span class="line">        System.out.println(expire);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-09</span><br><span class="line">30</span><br><span class="line">2018-11</span><br></pre></td></tr></table></figure><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dayAfterTomorrow = <span class="string">"20180905"</span>;</span><br><span class="line">        LocalDate formatted = LocalDate.parse(dayAfterTomorrow,</span><br><span class="line">                DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">        System.out.printf(<span class="string">"Date generated from String %s is %s %n"</span>, dayAfterTomorrow, formatted);</span><br><span class="line"></span><br><span class="line">        String goodFriday = <span class="string">"Sep 05 2018"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"MMM dd yyyy"</span>);</span><br><span class="line">            LocalDate holiday = LocalDate.parse(goodFriday, formatter);</span><br><span class="line">            System.out.printf(<span class="string">"Successfully parsed String %s, date is %s%n"</span>, goodFriday, holiday);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeParseException ex) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s is not parsable!%n"</span>, goodFriday);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LocalDateTime arrivalDate = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"MMM dd yyyy hh:mm a"</span>);</span><br><span class="line">            String landing = arrivalDate.format(format);</span><br><span class="line">            System.out.printf(<span class="string">"Arriving at : %s %n"</span>, landing);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeException ex) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s can't be formatted!%n"</span>, arrivalDate);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date generated from String 20180905 is 2018-09-05 </span><br><span class="line">Successfully parsed String Sep 05 2018, date is 2018-09-05</span><br><span class="line">Arriving at : Sep 06 2018 07:47 AM</span><br></pre></td></tr></table></figure><h2 id="计算时间间隔"><a href="#计算时间间隔" class="headerlink" title="计算时间间隔"></a>计算时间间隔</h2><p>Java 8为我们提供了三个类来方便计算时间间隔，分别是</p><ul><li>Duration：计算秒、纳秒</li><li>ChronoUnit：计算天、时、分、秒</li><li>Period：计算年、月、日</li></ul><h3 id="秒、纳秒"><a href="#秒、纳秒" class="headerlink" title="秒、纳秒"></a>秒、纳秒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        Instant i1 = Instant.now();</span><br><span class="line">        <span class="comment">// 当前时间推后10s</span></span><br><span class="line">        Instant i2 = i1.plusSeconds(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 获取时间差</span></span><br><span class="line">        Duration between = Duration.between(i1, i2);</span><br><span class="line">        <span class="comment">// 获取时间差的毫秒值</span></span><br><span class="line">        System.out.println(between.toMillis());</span><br><span class="line">        <span class="comment">// 获取时间差的纳秒值</span></span><br><span class="line">        System.out.println(between.toNanos());</span><br><span class="line">        <span class="comment">// 获取时间差的天数值</span></span><br><span class="line">        System.out.println(between.toDays());</span><br><span class="line">        <span class="comment">// 获取时间差的小时值</span></span><br><span class="line">        System.out.println(between.toHours());</span><br><span class="line">        <span class="comment">// 获取时间差的分钟值</span></span><br><span class="line">        System.out.println(between.toMinutes());</span><br><span class="line">        <span class="comment">// 获取时间差的秒数值</span></span><br><span class="line">        System.out.println(between.getSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10000</span><br><span class="line">10000000000</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="天、时、分、秒"><a href="#天、时、分、秒" class="headerlink" title="天、时、分、秒"></a>天、时、分、秒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        LocalDateTime d1 = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 当前时间延后90000s</span></span><br><span class="line">        LocalDateTime d2 = d1.plusSeconds(<span class="number">90000</span>);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了几个半天</span></span><br><span class="line">        <span class="keyword">long</span> b1 = ChronoUnit.HALF_DAYS.between(d1, d2);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了几个小时</span></span><br><span class="line">        <span class="keyword">long</span> b2 = ChronoUnit.HOURS.between(d1, d2);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了多少毫秒</span></span><br><span class="line">        <span class="keyword">long</span> b3 = ChronoUnit.MILLIS.between(d1, d2);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">25</span><br><span class="line">90000000</span><br></pre></td></tr></table></figure><h3 id="年、月、日"><a href="#年、月、日" class="headerlink" title="年、月、日"></a>年、月、日</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate d1 = LocalDate.now();</span><br><span class="line">        <span class="comment">// 构建2018-10-01</span></span><br><span class="line">        LocalDate d2 = LocalDate.of(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 获取两个日期的差值</span></span><br><span class="line">        Period between = Period.between(d1, d2);</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少年</span></span><br><span class="line">        System.out.println(between.getYears());</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少月</span></span><br><span class="line">        System.out.println(between.getMonths());</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少天</span></span><br><span class="line">        System.out.println(between.getDays());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">26</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决JS处理Long类型丢失精度</title>
      <link href="/2018/12/10/Spring-2018-12-10-%E8%A7%A3%E5%86%B3JS%E5%A4%84%E7%90%86Long%E7%B1%BB%E5%9E%8B%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6/"/>
      <url>/2018/12/10/Spring-2018-12-10-%E8%A7%A3%E5%86%B3JS%E5%A4%84%E7%90%86Long%E7%B1%BB%E5%9E%8B%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>我想每一个小白都曾经遇到过这样一个问题吧，后端看到的<code>Long</code>类型的数值和前端看到的不一样，甚是诡异，这是怎么回事呢，原因在于<code>JS</code>在处理<code>Long</code>数据时会出现处理精度不足的问题，从而造成我们的数据不一致，那么我们要怎么解决这个问题呢。</p><p>对此，我们一般会选择将<code>Long</code>类型的数值序列化成<code>String</code>类型，从而来避免问题。而对于不同的<code>JSON</code>框架的使用，处理方式也不一样，常用一般是<code>Jackson</code>、<code>fastjson</code>。</p><p>不管是使用哪种，<code>Spring MVC</code>返回到前端都会出现同样的问题，那么具体需要怎么来解决呢，下面直接上代码：</p><h1 id="Spring-Boot1-x或Spring5以下"><a href="#Spring-Boot1-x或Spring5以下" class="headerlink" title="Spring Boot1.x或Spring5以下"></a>Spring Boot1.x或Spring5以下</h1><h2 id="使用Jackson"><a href="#使用Jackson" class="headerlink" title="使用Jackson"></a>使用Jackson</h2><p>在使用<code>Jackson</code>时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jackson2HttpMessageConverter =</span><br><span class="line">                <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        simpleModule.addSerializer(BigInteger.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        jackson2HttpMessageConverter.setObjectMapper(objectMapper);</span><br><span class="line">        converters.add(jackson2HttpMessageConverter);</span><br><span class="line">        converters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建这样一个配置类，继承<code>WebMvcConfigurerAdapter</code>，重写<code>configureMessageConverters</code>方法，将各种<code>Long</code>类型替换为<code>Sting</code>类型，就可以解决这个问题啦。</p><h2 id="使用fastjson"><a href="#使用fastjson" class="headerlink" title="使用fastjson"></a>使用fastjson</h2><p>当然有时候也可能是使用的<code>fastjson</code>，我想大家都应该知道<code>Spring MVC</code>其实默认使用的是<code>Jackson</code>，但是有些人会要求将其替换为<code>fastjson</code>，嗯，我以前做过的一个项目就干过🤦‍♀️。那么我们要怎么替换这里的序列化框架呢，这里有两种方式来实现：</p><ol><li><p>第一种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpMessageConverters <span class="title">fastJsonHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpMessageConverters(<span class="keyword">new</span> FastJsonHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = </span><br><span class="line">        <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>替换完成之后呢，我们同样需要去处理精度丢失的问题，那么对于<code>fastjson</code>我们需要怎么去做呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = </span><br><span class="line">        <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        SerializeConfig serializeConfig = SerializeConfig.globalInstance;</span><br><span class="line">        serializeConfig.put(BigInteger.class, ToStringSerializer.instance);</span><br><span class="line">        serializeConfig.put(Long.class, ToStringSerializer.instance);</span><br><span class="line">        serializeConfig.put(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        fastJsonConfig.setSerializeConfig(serializeConfig);</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这里使用的<code>fastjson</code>的版本为<code>1.2.31</code>，版本不同，方式略有不同。</p><h1 id="Spring-Boot2-x或Spring5以上"><a href="#Spring-Boot2-x或Spring5以上" class="headerlink" title="Spring Boot2.x或Spring5以上"></a>Spring Boot2.x或Spring5以上</h1><p><code>Spring Boot2.x</code>相比于<code>Spring Boot1.x</code>做了很大的变化，<code>Spring5</code>相比于<code>Spring5</code>以前的版本也是如此，在<code>Spring5</code>中，将<code>WebMvcConfigurerAdapter</code>标记为过期了，那么这里我们又要怎么去处理呢，其实方法都是一样的，只是将<code>WebMvcConfigurerAdapter</code>换成了其父类<code>WebMvcConfigurer</code>，而其他地方完全一样。所以这里也不再赘述。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这里也给个小<code>demo</code>，使用<code>Swagger</code>来演示其丢失精度以及修复后的样子，有需要可以瞅一眼(但是应该没有人需要把)，<a href="https://github.com/felixu1992/demo/tree/master/JsParseLong" target="_blank" rel="noopener">戳这里</a>。</p><p>需要说明的是<code>Swagger</code>不同版本对于丢精度也做了处理，这里使用的是<code>2.7.0</code>版本来复现这个问题的。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开启我的博客</title>
      <link href="/2018/12/08/Essay-2018-12-08-%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/12/08/Essay-2018-12-08-%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>在经历了一番思考(对，其实就是瞎JB想想)后，决定重新开始写博客，做笔记。为了坚持下去，整了自建的静态博客<a href="https://blogs.felixu.top">Hexo</a>，整了<a href="https://blog.csdn.net/xufei_0320" target="_blank" rel="noopener">CSDN</a>，整了<a href="https://www.jianshu.com/u/84a0da787393" target="_blank" rel="noopener">简书</a>，整了个公众号。打算洗心革面，呸！打算从头开始在自己的这个小天地中坚持写笔记，坚持写博客。希望能坚持下去吧！常言道，万事开头难。然而，经验告诉我们，好像不是开头难，而是坚持难。就比如博客这件事，从第一次搭博客写文章，再到后面换主题，换框架，刚开始的时候热情满满，大概能坚持个两星期，然后就慢慢忘了这件事了，毕竟写一篇文章有时候会需要耗费蛮久的时间。emmm，所以这是不知道第多少次再打算写博客来记录一下我这坎坷的编程之路。</p><p>从接触Java到从一个土木专业的学生正式转入这一行也有快3年了。工作的常态是问题能解决，工作能完成，原理搞明白隔两天就忘。生活的常态是一直在学习，看上去蛮努力，但其实毛也没学到。已经快27了，却总是觉得自己好像还是个小白，接触的东西越多，越觉得自己无知。</p><p>然而再次决定要写东西来记录一下我这小白的编程之路，在于最近其实是有思考一些东西：</p><ol><li>中年危机吧，反正觉得年纪越来越大，嗯，无房无车无女票，这么些年走过来，总特么该留下点什么吧，那就留下点木有人看的文字好了。</li><li>入编程的坑已经是有些年头了，接触过的技术可以说也是蛮多了，用起来都没有什么大问题，然而知其然却不知所以然，很多时候有种茫然无力感。故，以此为开始，边深究，边记录，边内化，边输出。</li><li>对于以前做过的项目，遇到的问题，当时记得，也搞明白了怎么回事，隔了一段时间再遇到，我是谁，我在哪，我在干嘛的茫然油然而生，还是记录下来更靠谱一点。</li><li>这么几年过来，除了当初下定决心转行，并且好好坚持学习了一段时间，好像再也没有坚持去做过什么事情了，浮躁的社会，快节奏的生活，好像已经很难再去坚持做什么了，给自己找点事情做吧算是。</li></ol><p>深圳是个包容的城市，这里什么都有，只要你努力，当然这里还有挤不完的地铁、熬不完的夜。</p>]]></content>
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> About Me </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
