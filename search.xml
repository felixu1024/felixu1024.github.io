<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring Validation参数校验</title>
      <link href="/2018/09/19/Spring%E7%B3%BB%E5%88%97-2018-09-19-Spring-Validation%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
      <url>/2018/09/19/Spring%E7%B3%BB%E5%88%97-2018-09-19-Spring-Validation%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Spring Validation</code>是在<code>Spring Context</code>下的，在<code>Spring Boot</code>项目中，我们引入<code>spring-boot-starter-web</code>便会引入进来，<code>Spring Validation</code>是对<code>Hibernate Validator</code>的二次封装，使我们可以更方便的在<code>Spring MVC</code>中完成自动校验。</p><p><code>Hibernate Validator</code>是对<code>JSR-303(Bean Validation)</code>的参考实现。<code>Hibernate Validator</code> 提供了<code>JSR-303</code>规范中所有内置<code>constraint</code>的实现，除此之外还有一些附加的<code>constraint</code>。</p><p><code>JSR-303</code>定义的<code>constraint</code>：</p><table><thead><tr><th style="text-align:center">Constraint</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">@Null</td><td style="text-align:center">被注解的元素必须为<code>null</code></td></tr><tr><td style="text-align:center">@NotNull</td><td style="text-align:center">被注解的元素必须不为<code>null</code></td></tr><tr><td style="text-align:center">@AssertTure</td><td style="text-align:center">被注解的元素必须为<code>ture</code></td></tr><tr><td style="text-align:center">@AssertFalse</td><td style="text-align:center">被注解的元素必须为<code>false</code></td></tr><tr><td style="text-align:center">@Min(value)</td><td style="text-align:center">被注解的元素必须是数字且必须大于等于指定值</td></tr><tr><td style="text-align:center">@Max(value)</td><td style="text-align:center">被注解的元素必须是数字且必须小于等于指定值</td></tr><tr><td style="text-align:center">@DecimalMin(value)</td><td style="text-align:center">被注解的元素必须是数字且必须大于等于指定值</td></tr><tr><td style="text-align:center">@DecimalMax(value)</td><td style="text-align:center">被注解的元素必须是数字且必须小于等于指定值</td></tr><tr><td style="text-align:center">@Size(max, min)</td><td style="text-align:center">被注解的元素必须在指定的范围内</td></tr><tr><td style="text-align:center">@Digits(integer, fraction)</td><td style="text-align:center">被注解的元素必须是数字且其值必须在给定的范围内</td></tr><tr><td style="text-align:center">@Past</td><td style="text-align:center">被注解的元素必须是一个过去的日期</td></tr><tr><td style="text-align:center">@Future</td><td style="text-align:center">被注解的元素必须是一个将来的日期</td></tr><tr><td style="text-align:center">@Pattern(value)</td><td style="text-align:center">被注解的元素必须符合给定正则表达式</td></tr></tbody></table><p><code>Hibernate Validator</code>附加实现的<code>constraint</code></p><table><thead><tr><th style="text-align:center">Constraint</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">@Email</td><td style="text-align:center">被注解的元素必须是<code>Email</code>地址</td></tr><tr><td style="text-align:center">@Length(min, max)</td><td style="text-align:center">被注解的元素长度必须在指定的范围内</td></tr><tr><td style="text-align:center">@NotEmpty</td><td style="text-align:center">被注解的元素必须</td></tr><tr><td style="text-align:center">@Range</td><td style="text-align:center">被注解的元素(可以是数字或者表示数字的字符串)必须在给定的范围内</td></tr><tr><td style="text-align:center">@URL</td><td style="text-align:center">被注解的元素必须是<code>URL</code></td></tr></tbody></table><p>当然，我们也可以自定义实现，自定义实现在下面使用中在讲吧。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在开始使用之前，先做好准备工作，创建一个<code>Spring Boot</code>项目，然后引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只需要引入这个依赖就可以了。</p><h2 id="使用-Validated注解拦截校验"><a href="#使用-Validated注解拦截校验" class="headerlink" title="使用@Validated注解拦截校验"></a>使用@Validated注解拦截校验</h2><p>在<code>Controller</code>中，我们需要校验前端传递过来的参数，我们可以这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(@RequestBody @Validated User user, BindingResult result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.getAllErrors().stream().map(ObjectError::getDefaultMessage).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在需要校验的实体前面打上<code>@Validated</code>注解就可以了，这时候，如果我们传递的参数符合要求，则会正常返回。否则返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    "age字段不合法",</span><br><span class="line">    "name字段不合法"</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>它会将我们所有不合法信息一次性全部返回，在日常开发中，我们可以吧校验<code>BindingResult</code>是否有错误信息的校验统一抽出到一个工具类中去做处理，使用项目中统一格式返回错误信息就好。这就是一个最简单的校验示例了，其他注解也都是类似的，就不多举例了，可以自己尝试着玩玩。</p><p>在日常开发中想必都曾遇到过这样的需求，比如这个age这个字段，我想要这个字段只在<code>PC</code>端校验，在<code>App</code>端不做限制，这就需要用到分组校验了，每个注解都提供了一个<code>group</code>属性，利用这个属性就可以轻易做到以上需求。比如在User上的注解中加入<code>group</code>属性，指定其被校验的<code>group</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">1</span>, max = <span class="number">22</span>, message = <span class="string">"name字段不合法"</span>, groups = &#123;App.class, PC.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"age字段不合法"</span>, groups = PC.class)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Controller中的@Validated中指定当前<code>group</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(@RequestBody @Validated(App.class)</span> User user, BindingResult result) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.getAllErrors().stream().map(ObjectError::getDefaultMessage).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我再使用两个不合法字段访问返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    "name字段不合法"</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到，它并没有对<code>age</code>字段进行校验。这就是它的分组校验。</p><h2 id="在方法实现中拦截校验"><a href="#在方法实现中拦截校验" class="headerlink" title="在方法实现中拦截校验"></a>在方法实现中拦截校验</h2><p>它不只是在Controller校验前端传递过来的参数的时候可以用，它在方法中同样可以用，我们可以这样来使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SmartValidator smartValidator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="string">"&#123;\"name\": \"felixu\",\"age\": 0&#125;"</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = objectMapper.readValue(context, User.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        BeanPropertyBindingResult result = <span class="keyword">new</span> BeanPropertyBindingResult(user, <span class="string">"user"</span>);</span><br><span class="line">        smartValidator.validate(user, result);</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.getAllErrors().stream().map(ObjectError::getDefaultMessage).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用需要被校验的实体构造<code>BeanPropertyBindingResult</code>对象，然后将传递给<code>SmartValidator</code>的<code>validate</code>方法来完成跟上面相同的校验。<code>validate</code>有个重载方法，也接收分组，所以这种方式同样可以实现分组校验。</p><h2 id="自定义实现"><a href="#自定义实现" class="headerlink" title="自定义实现"></a>自定义实现</h2><p>需求总是多变的，有时候，可能上面的校验方式并不能满足我们的要求，这时候就需要我们自定义一下校验了，要做到自定义注解来校验，我们需要做以下两步，首先实现<code>ConstraintValidator&lt;A extends Annotation, T&gt;</code>(ps：原谅我的自恋。。。)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsFelixuValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">IsFelixu</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(IsFelixu constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"felixu"</span>.equals(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>isValid</code>便是我们的校验逻辑，<code>true</code>为通过校验。</p><p>然后我们实现注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(</span><br><span class="line">    <span class="comment">// 指定对应的校验类</span></span><br><span class="line">    validatedBy = &#123;IsFelixuValidator.class&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsFelixu &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">this</span> value is not felixu"</span>;</span><br><span class="line">    <span class="comment">// 这两个属性必须要存在</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就<code>ok</code>了，我们继续使用之前的来做测试，在<code>User</code>的<code>name</code>属性上加上<code>@IsFelixu</code>注解，此时测试，如果不传递<code>name</code>为<code>felixu</code>的值，则会提示如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    "this value is not felixu",</span><br><span class="line">    "age字段不合法"</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>JSR-303</code> 的发布使得在数据自动绑定和验证变得简单，使开发人员在定义数据模型时不必考虑实现框架的限制。当然<code>Bean Validation</code>还只是提供了一些最基本的<code>constraint</code>。</p><p>上面只是相对简单的用法，也是我们现在项目中所用到的方式，在实际的开发过程中，用户可以根据自己的需要组合或开发出更加复杂的<code>constraint</code>。这就需要想象力了，从上面的用法中应该可以想到很多地方可以去使用，但是设计和实现时，往往需要考虑诸多因素，比如易用性和封装的复杂度，等等方面，还需要自己去考量了。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>keytool生成证书</title>
      <link href="/2018/09/16/Java%E7%B3%BB%E5%88%97-2018-09-16-keytool%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/09/16/Java%E7%B3%BB%E5%88%97-2018-09-16-keytool%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</url>
      <content type="html"><![CDATA[<p>之前项目中用到<code>Spring Cloud OAuth2</code>来做权限认证，当然它可以使用对称加密，也可以使用非对称加密，在使用非对称加密的时候就用到了这里的证书。本来用keytool生成的证书用的好好的，也就没有注意过，直到有一天，在登陆系统的时候，提示证书无效，才知道原来keytool不设置有效期的话，是有默认过期时间的。所以这里就记录一下这个坑。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>keytool</code>是个密钥和证书管理工具，它使用户能够管理自己的公钥/私钥对及相关证书，用于(通过数字签名)自我认证(用户向别的用户/服务认证自己)或数据完整性以及认证服务。它还允许用户存储他们的通信对等者的公钥(以证书形式)。</p><p><code>keytool</code>是个<code>JDK</code>数据证书的管理工具，这个工具一般在<code>JDK/jre/bin/security</code>目录下。</p><p><code>keytool</code>将密钥(key)和证书(certificates)存在一个成为<code>keystore</code>的文件中。</p><p>在keystore中一般会包含两种数据：</p><ul><li>密钥实体(key entity) — 密钥(secret key)又或者是私钥和配对公钥(采用非对称加密)。</li><li>可信任的证书实体(trusted certificate entries) — 只包含公钥。</li></ul><h1 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h1><p>一个证书是一个实体的数字签名，还包含这个实体的公钥值。</p><ul><li>公钥：是一个详细的实体的数字关联，并有意让所有想同这个实体发生信任关系的其他实体知道，公钥用来检验签名。</li><li>数字签名：是实体信息用实体的私钥签名(加密)后的数据。这条数据可以用这个实体的公钥来检验签名(解密)出实体信息以鉴别实体的身份。</li><li>签名：用实体私钥加密某些消息，从而得到加密后的数据。</li><li>私钥：是一些数字，私钥和公钥存在所有用公钥加密的系统的钥匙对中。公钥用来加密数据，私钥用来计算签名。公钥加密的消息只能用私钥解密，私钥签名的消息只能用公钥检验签名。</li><li>实体：一个实体可以是一个人，一个组织，一个程序，一台计算机，一个商业，一个银行或者其他你想信任的东西。</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>首先生成<code>JKS(Java KeyStore)</code>文件，在我们需要的位置打开终端执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias test -keyalg RSA -keypass password -keystore test.jks -storepass password</span><br></pre></td></tr></table></figure><p>回车之后，会出来让你一堆什么名字啊地址啊啥的信息，按照操作走完后输入y确认，就可以看到已经生成好的<code>JKS</code>了。</p><p>这只是一个简单的示例，它有以下参数：</p><ul><li><code>-alias</code>：证书别名。</li><li><code>-keystore</code>：指定密钥库的名称(cacerts是jre中默认的证书库名称，也可以使用其他名字)。</li><li><code>-storepass</code>：指定密钥库的密码。</li><li><code>-keypass</code>：指定别名条目的密码。</li><li><code>-list</code>：显示密钥库中的证书信息。</li><li><code>-v</code>：显示密钥库中证书详细信息。</li><li><code>-export</code>：将别名指定的证书导出到文件。</li><li><code>-file</code>：指定导出到文件的文件名。</li><li><code>-delete</code>：删除密钥库中某条目。</li><li><code>-import</code>：将已签名数字证书导入密钥库。</li><li><code>-keypasswd</code>：修改密钥库中指定条目口令。</li><li><code>-dname</code>：指定证书拥有者信息。</li><li><code>-keyalg</code>：指定密钥的算法。</li><li><code>-validity</code>：指定创建的证书有效期为多少天，默认不设置的话为90天。</li><li><code>-keysize</code>：指定密钥的长度。</li></ul><p>生成好了之后，需要导出来公钥备用。执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -rfc --keystore test.jks | openssl x509 -inform pem -pubkey</span><br></pre></td></tr></table></figure><p>不过这个需要事先安装好<code>openssl</code>的，具体怎么安装就<code>Google</code>吧。</p><p>回车之后需要输入刚刚密钥库的密码，会得到以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6LBBkoteUhjeA/nWP7i9</span><br><span class="line">FUVB99Ff9UCBuOhnVZCaFBmlQ7fKTtwebsgn+8FKlo8OV7YDSHXB0MBEvt42fZYz</span><br><span class="line">k9lq7Jkq0SZD/Rc1icoSaYIkcKDSOFSXU4/U1YeJ3EK/Obh0bbD3ZL+YG8mMqACl</span><br><span class="line">7CxyiM8h8G+YfjADmmbanp6rKdgiEp7GD1Bu+JNvOMiAnN9CSzgipLk6xBR26yIJ</span><br><span class="line">oXOhhCixvyfI/yy3ofbfqCicQJcVLReA0+MQETVndKdLug1yS/imBAh2vGf6GSCo</span><br><span class="line">JM0LWr9GrbJTnlL7FPjacB+BbC3TI4rIbI36NVs3OXpKupH46yBzpDXhwk/TYYQj</span><br><span class="line">6QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDCzCCAfOgAwIBAgIEGtZIUzANBgkqhkiG9w0BAQsFADA2MQswCQYDVQQGEwJ1</span><br><span class="line">czELMAkGA1UECBMCY2ExCzAJBgNVBAcTAmxhMQ0wCwYDVQQDEwR0ZXN0MB4XDTE2</span><br><span class="line">MDMxNTA4MTAzMFoXDTE2MDYxMzA4MTAzMFowNjELMAkGA1UEBhMCdXMxCzAJBgNV</span><br><span class="line">BAgTAmNhMQswCQYDVQQHEwJsYTENMAsGA1UEAxMEdGVzdDCCASIwDQYJKoZIhvcN</span><br><span class="line">AQEBBQADggEPADCCAQoCggEBAICCtlreMdhLQ5eNQu736TrDKrmTMjsrXjtkbFXj</span><br><span class="line">Cxf4VyHmL4nCq9EkM1ZKHRxAQjIhl0A8+aa4o06t0Rz8tv+ViQQmKu8h4Ey77KTM</span><br><span class="line">urIr1zezXWBOyOaV6Pyh5OJ8/hWuj9y/Pi/dBP96sH+o9wylpwICRUWPAG0mF7dX</span><br><span class="line">eRC4iBtf4BKswtH2ZjYYX6wbccFl65aVA09Cn739EFZj0ccQi10/rRHtbHlhhKnj</span><br><span class="line">iy+b10S6ps2XAXtUWfZEEJuN/mvUJ+YnEkZw30wHrENwq5QFiSpdpHFlNR8CasPn</span><br><span class="line">WUUmdV+JBFzTMsz3TwWxplOjB3YacsCO0imU+5l+AQ51CnkCAwEAAaMhMB8wHQYD</span><br><span class="line">VR0OBBYEFOGefUBGquEX9Ujak34PyRskHk+WMA0GCSqGSIb3DQEBCwUAA4IBAQB3</span><br><span class="line">1eLfNeq45yO1cXNl0C1IQLknP2WXg89AHEbKkUOA1ZKTOizNYJIHW5MYJU/zScu0</span><br><span class="line">yBobhTDe5hDTsATMa9sN5CPOaLJwzpWV/ZC6WyhAWTfljzZC6d2rL3QYrSIRxmsp</span><br><span class="line">/J1Vq9WkesQdShnEGy7GgRgJn4A8CKecHSzqyzXulQ7Zah6GoEUD+vjb+BheP4aN</span><br><span class="line">hiYY1OuXD+HsdKeQqS+7eM5U7WW6dz2Q8mtFJ5qAxjY75T0pPrHwZMlJUhUZ+Q2V</span><br><span class="line">FfweJEaoNB9w9McPe1cAiE+oeejZ0jq0el3/dJsx3rlVqZN+lMhRJJeVHFyeb3XF</span><br><span class="line">lLFCUGhA7hxn2xf3x1JW</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><p>需要用到的就是公钥部分了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6LBBkoteUhjeA/nWP7i9</span><br><span class="line">FUVB99Ff9UCBuOhnVZCaFBmlQ7fKTtwebsgn+8FKlo8OV7YDSHXB0MBEvt42fZYz</span><br><span class="line">k9lq7Jkq0SZD/Rc1icoSaYIkcKDSOFSXU4/U1YeJ3EK/Obh0bbD3ZL+YG8mMqACl</span><br><span class="line">7CxyiM8h8G+YfjADmmbanp6rKdgiEp7GD1Bu+JNvOMiAnN9CSzgipLk6xBR26yIJ</span><br><span class="line">oXOhhCixvyfI/yy3ofbfqCicQJcVLReA0+MQETVndKdLug1yS/imBAh2vGf6GSCo</span><br><span class="line">JM0LWr9GrbJTnlL7FPjacB+BbC3TI4rIbI36NVs3OXpKupH46yBzpDXhwk/TYYQj</span><br><span class="line">6QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java8新时间API</title>
      <link href="/2018/09/04/Java%E7%B3%BB%E5%88%97-2018-09-04-Java8%E6%96%B0%E6%97%B6%E9%97%B4API/"/>
      <url>/2018/09/04/Java%E7%B3%BB%E5%88%97-2018-09-04-Java8%E6%96%B0%E6%97%B6%E9%97%B4API/</url>
      <content type="html"><![CDATA[<p>Java 8日期/时间API是<code>JSR-310</code>的实现，它的实现目标是克服旧的日期时间实现中所有的缺陷。利用它可以更加方便我们去处理时间和日期的计算等问题。</p><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><p>新的日期/时间API它遵循以下的设计原则：</p><ul><li><strong>不变性</strong>：在新的日期/时间API中，所有的类都被设计成不可变的，这在多线程环境下也是没有问题的。</li><li><strong>关注点分离</strong>：在<code>Java8</code>中，相比于之前旧的时间和日历类，较大的改变是将人可读的日期时间和机器时间(unix timestamp)明确分离，为日期(Date)、时间(Time)、日期时间(DateTime)、时间戳(unix timestamp)以及时区定义了不同的类。</li><li><strong>清晰</strong>：在所有的类中，方法都被明确定义用以完成相同的行为。举个例子，要拿到当前实例我们可以使用now()方法，在所有的类中都定义了format()和parse()方法，而不是像以前那样专门有一个独立的类。为了更好的处理问题，所有的类都使用了工厂模式和策略模式，一旦你使用了其中某个类的方法，与其他类协同工作并不困难。</li><li><strong>实用操作</strong>：所有新的日期/时间API类都实现了一系列方法用以完成通用的任务，如：加、减、- - 格式化、解析、从日期/时间中提取单独部分，等等。</li><li><strong>可扩展性</strong>： 新的日期/时间API是工作在ISO-8601日历系统上的，但我们也可以将其应用在非IOS的日历上。</li></ul><h1 id="java-time"><a href="#java-time" class="headerlink" title="java.time"></a>java.time</h1><p><code>java.time</code>包中的是类是不可变且线程安全的。新的时间及日期API位于<code>java.time</code>中。下面是一些比较常用的类： </p><ul><li><p><code>Instant</code>：表示时间戳</p></li><li><p><code>LocalDate</code>：不包含具体时间点的日期</p></li><li><p><code>LocalTime</code>：不包含日期的时间点</p></li><li><p><code>LocalDateTime</code>：具体的日期时间点，不带时区</p></li><li><p><code>ZonedDateTime</code>：包含时区的完整的日期时间点，偏移量是以UTC/格林威治时间为基准的。 </p></li></ul><h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><p>对于这些类，它们都有以下一些方法：</p><ul><li>of：静态工厂方法。</li><li>parse：静态工厂方法，关注于解析。</li><li>get：获取某些东西的值。</li><li>is：检查某些东西的是否是true。</li><li>with：不可变的setter等价物。</li><li>plus：加一些量到某个对象。</li><li>minus：从某个对象减去一些量。</li><li>to：转换到另一个类型。</li><li>at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。</li></ul><h2 id="计算日期-时间"><a href="#计算日期-时间" class="headerlink" title="计算日期/时间"></a>计算日期/时间</h2><h3 id="获取当前时间-日期"><a href="#获取当前时间-日期" class="headerlink" title="获取当前时间/日期"></a>获取当前时间/日期</h3><p>以前有<code>Date</code>类可以获取当前时间，有<code>Calendar</code>类来做日历相关操作。而在Java8中，提供了多个类来获取当前的日期、时间、时间戳等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        System.out.println(LocalDate.now());</span><br><span class="line">        <span class="comment">// 获取当前时间点</span></span><br><span class="line">        System.out.println(LocalTime.now());</span><br><span class="line">        <span class="comment">// 获取当前时间点去掉纳秒</span></span><br><span class="line">        System.out.println(LocalTime.now().withNano(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 获取当前的日期时间</span></span><br><span class="line">        System.out.println(LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 获取当前年</span></span><br><span class="line">        System.out.println(LocalDate.now().getYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-09-04</span><br><span class="line">22:03:49.502</span><br><span class="line">22:03:49</span><br><span class="line">2018-09-04T22:03:49.502</span><br><span class="line">2018</span><br></pre></td></tr></table></figure><p>更多方法就需要大家自己去点点看啦。</p><h3 id="判断两个日期是否相等"><a href="#判断两个日期是否相等" class="headerlink" title="判断两个日期是否相等"></a>判断两个日期是否相等</h3><p>在Java8的众多类中，它们都重写了<code>toString()</code>方法。所以对于日期是否相同的判断，我们可以直接使用它的<code>equals()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        <span class="comment">// 构建2018-09-03</span></span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 判断是否相等</span></span><br><span class="line">        System.out.println(today.equals(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="判断一个日期是否在另一个日期之前"><a href="#判断一个日期是否在另一个日期之前" class="headerlink" title="判断一个日期是否在另一个日期之前"></a>判断一个日期是否在另一个日期之前</h3><p>有时候可能会有这样的需求，需要判断一个日期在另一个日期的前面还是后面，这时候就会用到<code>isBefore()</code>和<code>isAfter()</code>方法，这样就可以方便的作出判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建2018-09-04</span></span><br><span class="line">        LocalDate d1 = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 构建2018-09-03</span></span><br><span class="line">        LocalDate d2 = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 判断d1是否在d2后面</span></span><br><span class="line">        System.out.println(d1.isAfter(d2));</span><br><span class="line">        <span class="comment">// 判断d1是否在d2前面</span></span><br><span class="line">        System.out.println(d1.isBefore(d2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>可以看到我们直接可以使用<code>isBefore()</code>和<code>isAfter()</code>来判断两个日期谁前谁后了，而不需要向之前使用<code>Calendar</code>来进行麻烦的操作了。</p><h3 id="检查重复日期"><a href="#检查重复日期" class="headerlink" title="检查重复日期"></a>检查重复日期</h3><p>对于一些特定的日期，比如生日、纪念日等，我们可以轻易来判断某一日期是不是我们需要的特定日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate dateOfBirth = LocalDate.of(<span class="number">1992</span>, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">        MonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth());</span><br><span class="line">        MonthDay currentMonthDay = MonthDay.from(LocalDate.now());</span><br><span class="line">        <span class="keyword">if</span>(currentMonthDay.equals(birthday))&#123;</span><br><span class="line">            System.out.println(<span class="string">"Happy Birthday !"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Sorry, today is not your birthday！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy Birthday !</span><br></pre></td></tr></table></figure><h3 id="判断某个日期是不是周几"><a href="#判断某个日期是不是周几" class="headerlink" title="判断某个日期是不是周几"></a>判断某个日期是不是周几</h3><p>同样，我们可以很方便的来判断某天是周几。<code>DayOfWeek</code>构建的是周几，然后使用<code>from()</code>方法，来构建某一日期为周几，这样我们就可以轻松判断出某一日期是周几，而不必向以前一样麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DayOfWeek dayOfWeek = DayOfWeek.of(<span class="number">2</span>);</span><br><span class="line">        DayOfWeek from = DayOfWeek.from(LocalDate.now());</span><br><span class="line">        System.out.println(from.equals(dayOfWeek));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="延迟或者推前时间"><a href="#延迟或者推前时间" class="headerlink" title="延迟或者推前时间"></a>延迟或者推前时间</h3><p>有时候我们可能会需要用到一些日期计算，比如，昨天，前天，明天，一周前，一年前等。在Java8中可以轻松实现，因为这些类中已经提供了相关方法。<code>plus</code>开头的表示往后算，<code>minus</code>表示往前算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(today);</span><br><span class="line">        <span class="comment">// 推前一天</span></span><br><span class="line">        System.out.println(today.minusDays(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 延后一天</span></span><br><span class="line">        System.out.println(today.plusDays(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-09-04</span><br><span class="line">2018-09-03</span><br><span class="line">2018-09-05</span><br></pre></td></tr></table></figure><h3 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h3><p><code>Java8</code>提供了时钟类，利用时钟类可以实现和<code>System.currentTimeMillis()</code>一样的功能，还能够获取当前时区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        System.out.println(Clock.systemUTC().millis());</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 获取当前系统默认时区</span></span><br><span class="line">        System.out.println(Clock.systemDefaultZone().getZone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1536101287531</span><br><span class="line">1536101287531</span><br><span class="line">Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="检查闰年"><a href="#检查闰年" class="headerlink" title="检查闰年"></a>检查闰年</h3><p>可以使用<code>isLeapYear()</code>方法直接判断是否为闰年，而不用我们再自己去计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>).isLeapYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="带时区计算"><a href="#带时区计算" class="headerlink" title="带时区计算"></a>带时区计算</h3><p><code>Java 8</code>不仅将日期和时间进行了分离，同时还有时区。现在已经有好几组与时区相关的类了，比如<code>ZonId</code>代表的是某个特定的时区，而<code>ZonedDateTime</code>代表的是带时区的时间。它等同于<code>Java 8</code>以前的<code>GregorianCalendar</code>类。使用这个类，你可以将本地时间转换成另一个时区中的对应时间。用<code>ZoneOffset</code>类来代表某个时区，比如印度是<code>GMT</code>或者<code>UTC5：30</code>，你可以使用它的静态方法<code>ZoneOffset.of()</code>方法来获取对应的时区。只要获取到了这个偏移量，你就可以拿<code>LocalDateTime</code>和这个偏移量创建出一个<code>OffsetDateTime</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 设置时区</span></span><br><span class="line">        ZonedDateTime zonedDateTime = ZonedDateTime.of(now, ZoneId.of(<span class="string">"Australia/Darwin"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Current date and time in a particular timezone : "</span> + zonedDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建一个时间</span></span><br><span class="line">        LocalDateTime datetime = LocalDateTime.of(<span class="number">2018</span>, Month.SEPTEMBER, <span class="number">5</span>, <span class="number">7</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 设置偏移量</span></span><br><span class="line">        ZoneOffset offset = ZoneOffset.of(<span class="string">"+05:30"</span>);</span><br><span class="line">        <span class="comment">// 构建带偏移量的日期和时间</span></span><br><span class="line">        OffsetDateTime date = OffsetDateTime.of(datetime, offset);</span><br><span class="line">        System.out.println(<span class="string">"Date and Time with timezone offset in Java : "</span> + date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Current date and time in a particular timezone : 2018-09-05T07:50:43.187+09:30[Australia/Darwin]</span><br><span class="line">Date and Time with timezone offset in Java : 2018-09-05T07:50+05:30</span><br></pre></td></tr></table></figure><p><code>OffSetDateTime</code>主要是给机器来理解的，如果是给人看的，可以使用<code>ZoneDateTime</code>类。</p><h3 id="固定日期"><a href="#固定日期" class="headerlink" title="固定日期"></a>固定日期</h3><p>在前面我们用过一个<code>MonthDay</code>的类，用来构建特定的几月几日。这里用到了另一个<code>YearMonth</code>，它表示某年某月，我们可以它来知道某年某月有多少天，使用<code>YearMonth</code>的<code>lengthOfMonth()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前年月</span></span><br><span class="line">        YearMonth current = YearMonth.now();</span><br><span class="line">        System.out.println(current);</span><br><span class="line">        <span class="comment">// 获取这个月有多少天</span></span><br><span class="line">        System.out.println(current.lengthOfMonth());</span><br><span class="line">        <span class="comment">// 构建一个固定日期</span></span><br><span class="line">        YearMonth expire = YearMonth.of(<span class="number">2018</span>, Month.NOVEMBER);</span><br><span class="line">        System.out.println(expire);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-09</span><br><span class="line">30</span><br><span class="line">2018-11</span><br></pre></td></tr></table></figure><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dayAfterTomorrow = <span class="string">"20180905"</span>;</span><br><span class="line">        LocalDate formatted = LocalDate.parse(dayAfterTomorrow,</span><br><span class="line">                DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">        System.out.printf(<span class="string">"Date generated from String %s is %s %n"</span>, dayAfterTomorrow, formatted);</span><br><span class="line"></span><br><span class="line">        String goodFriday = <span class="string">"Sep 05 2018"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"MMM dd yyyy"</span>);</span><br><span class="line">            LocalDate holiday = LocalDate.parse(goodFriday, formatter);</span><br><span class="line">            System.out.printf(<span class="string">"Successfully parsed String %s, date is %s%n"</span>, goodFriday, holiday);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeParseException ex) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s is not parsable!%n"</span>, goodFriday);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LocalDateTime arrivalDate = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"MMM dd yyyy hh:mm a"</span>);</span><br><span class="line">            String landing = arrivalDate.format(format);</span><br><span class="line">            System.out.printf(<span class="string">"Arriving at : %s %n"</span>, landing);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeException ex) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s can't be formatted!%n"</span>, arrivalDate);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date generated from String 20180905 is 2018-09-05 </span><br><span class="line">Successfully parsed String Sep 05 2018, date is 2018-09-05</span><br><span class="line">Arriving at : Sep 06 2018 07:47 AM</span><br></pre></td></tr></table></figure><h2 id="计算时间间隔"><a href="#计算时间间隔" class="headerlink" title="计算时间间隔"></a>计算时间间隔</h2><p>Java 8为我们提供了三个类来方便计算时间间隔，分别是</p><ul><li>Duration：计算秒、纳秒</li><li>ChronoUnit：计算天、时、分、秒</li><li>Period：计算年、月、日</li></ul><h3 id="秒、纳秒"><a href="#秒、纳秒" class="headerlink" title="秒、纳秒"></a>秒、纳秒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        Instant i1 = Instant.now();</span><br><span class="line">        <span class="comment">// 当前时间推后10s</span></span><br><span class="line">        Instant i2 = i1.plusSeconds(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 获取时间差</span></span><br><span class="line">        Duration between = Duration.between(i1, i2);</span><br><span class="line">        <span class="comment">// 获取时间差的毫秒值</span></span><br><span class="line">        System.out.println(between.toMillis());</span><br><span class="line">        <span class="comment">// 获取时间差的纳秒值</span></span><br><span class="line">        System.out.println(between.toNanos());</span><br><span class="line">        <span class="comment">// 获取时间差的天数值</span></span><br><span class="line">        System.out.println(between.toDays());</span><br><span class="line">        <span class="comment">// 获取时间差的小时值</span></span><br><span class="line">        System.out.println(between.toHours());</span><br><span class="line">        <span class="comment">// 获取时间差的分钟值</span></span><br><span class="line">        System.out.println(between.toMinutes());</span><br><span class="line">        <span class="comment">// 获取时间差的秒数值</span></span><br><span class="line">        System.out.println(between.getSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10000</span><br><span class="line">10000000000</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="天、时、分、秒"><a href="#天、时、分、秒" class="headerlink" title="天、时、分、秒"></a>天、时、分、秒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        LocalDateTime d1 = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 当前时间延后90000s</span></span><br><span class="line">        LocalDateTime d2 = d1.plusSeconds(<span class="number">90000</span>);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了几个半天</span></span><br><span class="line">        <span class="keyword">long</span> b1 = ChronoUnit.HALF_DAYS.between(d1, d2);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了几个小时</span></span><br><span class="line">        <span class="keyword">long</span> b2 = ChronoUnit.HOURS.between(d1, d2);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了多少毫秒</span></span><br><span class="line">        <span class="keyword">long</span> b3 = ChronoUnit.MILLIS.between(d1, d2);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">25</span><br><span class="line">90000000</span><br></pre></td></tr></table></figure><h3 id="年、月、日"><a href="#年、月、日" class="headerlink" title="年、月、日"></a>年、月、日</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate d1 = LocalDate.now();</span><br><span class="line">        <span class="comment">// 构建2018-10-01</span></span><br><span class="line">        LocalDate d2 = LocalDate.of(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 获取两个日期的差值</span></span><br><span class="line">        Period between = Period.between(d1, d2);</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少年</span></span><br><span class="line">        System.out.println(between.getYears());</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少月</span></span><br><span class="line">        System.out.println(between.getMonths());</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少天</span></span><br><span class="line">        System.out.println(between.getDays());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">26</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis源码分析之自定义实现主流程</title>
      <link href="/2018/08/27/MyBatis%E7%B3%BB%E5%88%97-2018-08-27-MyBatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/08/27/MyBatis%E7%B3%BB%E5%88%97-2018-08-27-MyBatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="v1实现"><a href="#v1实现" class="headerlink" title="v1实现"></a>v1实现</h1><p>从前一篇文章的分析可以知道，<code>Configuration</code>是用户最直接于框架交互的地方，<code>Executor</code>是最底层接触数据库的地方，而<code>SqlSession</code>则连接二者。所以手写实现，也以此为主线来写。以此为依据：</p><ol><li><p>首先我们实现<code>SqlSession</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 持有Configuration和Executor</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造传入Configuration和Executor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlSession</span><span class="params">(Configuration configuration, Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前一章分析可知SqlSession中的getMapper来自于Configuration</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration.getMapper(type, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体执行来自于Executor</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, String parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor.query(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其次实现<code>Configuration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getMapper得到的是原Mapper被代理后的MapperProxy对象。</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;type&#125;, <span class="keyword">new</span> MapperProxy(sqlSession));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 硬编码模拟解析XML。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonMapperXml</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_SPACE = <span class="string">"top.felixu.mapper.PersonMapper"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; SQL_MAPPING = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            SQL_MAPPING.put(<span class="string">"selectByPrimaryKey"</span>, <span class="string">"SELECT * FROM person WHERE id = ?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>MapperProxy</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 持有SqlSession</span></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperProxy</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// InvocationHandler的invoke方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 根据方法拿到对应的Sql与参数，交给SqlSession执行</span></span><br><span class="line">        <span class="keyword">if</span> (Configuration.PersonMapperXml.NAME_SPACE.equals(method.getDeclaringClass().getName())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Configuration.PersonMapperXml.SQL_MAPPING.containsKey(method.getName())) &#123;</span><br><span class="line">                String sql = Configuration.PersonMapperXml.SQL_MAPPING.get(method.getName());</span><br><span class="line">                <span class="keyword">return</span> sqlSession.selectOne(sql, String.valueOf(args[<span class="number">0</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>SqlSession</code>中的方法实际执行是<code>Executor</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Executor接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(String statement, String parameter)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleExecutor实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DRIVER = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8"</span> +</span><br><span class="line">            <span class="string">"&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String USER = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都是一些JDBC操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(String statement, String parameter)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = getStatement(getConnection(), statement);</span><br><span class="line">        Person person = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.setInt(<span class="number">1</span>, Integer.parseInt(parameter));</span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                person = <span class="keyword">new</span> Person();</span><br><span class="line">                person.setId(rs.getInt(<span class="number">1</span>));</span><br><span class="line">                person.setAddress(rs.getString(<span class="number">2</span>));</span><br><span class="line">                person.setAge(rs.getInt(<span class="number">3</span>));</span><br><span class="line">                person.setName(rs.getString(<span class="number">4</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            close(getConnection(), ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, PreparedStatement ps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != conn) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != ps) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">            conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PreparedStatement <span class="title">getStatement</span><span class="params">(Connection conn, String statement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == conn) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preparedStatement = conn.prepareStatement(statement);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preparedStatement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address == <span class="keyword">null</span> ? <span class="keyword">null</span> : address.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name == <span class="keyword">null</span> ? <span class="keyword">null</span> : name.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V1Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SqlSession session = <span class="keyword">new</span> SqlSession(<span class="keyword">new</span> Configuration(), <span class="keyword">new</span> SimpleExecutor());</span><br><span class="line">        PersonMapper mapper = session.getMapper(PersonMapper.class);</span><br><span class="line">        Person person = mapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;id=1, address='丑逼', age=1, name='丑逼'&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="v2实现"><a href="#v2实现" class="headerlink" title="v2实现"></a>v2实现</h1><p>在v1的基础上完善，分离出各类<code>Handler</code>、<code>Plugin</code>等</p><ol><li><p>依旧从<code>SqlSesion</code>开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依旧是持有Configuration和Executor</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造来传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlSession</span><span class="params">(Configuration configuration, Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">        <span class="comment">// 这里不一样的是对Executor做了包装</span></span><br><span class="line">        <span class="keyword">this</span>.executor = configuration.newExecutor(executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration.getMapper(type, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String sql, Class&lt;T&gt; returnType, Object parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor.query(sql, returnType, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入到<code>Configuration</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置扫描路径</span></span><br><span class="line">    <span class="keyword">private</span> String mapperScan;</span><br><span class="line">    <span class="comment">// Mapper的注册器</span></span><br><span class="line">    <span class="keyword">private</span> MapperRegistry mapperRegistry = <span class="keyword">new</span> MapperRegistry();</span><br><span class="line">    <span class="comment">// plugin的链</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InterceptorChain interceptorChain = <span class="keyword">new</span> InterceptorChain();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链式编程配置扫描路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">mapperScan</span><span class="params">(String basePackage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mapperScan = basePackage;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链式编程配置Plugin</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">addPlugins</span><span class="params">(Interceptor[] plugins)</span> </span>&#123;</span><br><span class="line">        Arrays.stream(plugins)</span><br><span class="line">                .forEach(interceptorChain::addInterceptor);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将配置的扫描包下所有类名获取过来注册Mapper</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; classNames = PackageUtils.getClassName(mapperScan, <span class="keyword">true</span>);</span><br><span class="line">            Optional.ofNullable(classNames)</span><br><span class="line">                    .ifPresent(names -&gt; names.forEach(<span class="keyword">this</span>::registryMapper));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册Mapper</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registryMapper</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">            Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">            Map&lt;String, String&gt; methodSql = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">            <span class="comment">// 只注册类中有@Select注解的方法</span></span><br><span class="line">            Arrays.stream(methods)</span><br><span class="line">                    .filter(method -&gt; method.isAnnotationPresent(Select.class))</span><br><span class="line">                    .forEach(method -&gt; &#123;</span><br><span class="line">                        Select annotation = method.getAnnotation(Select.class);</span><br><span class="line">                        methodSql.put(method.getName(),annotation.value());</span><br><span class="line">                    &#125;);</span><br><span class="line">            mapperRegistry.putObject(className, methodSql);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getMapper得到的是原Mapper被代理后的MapperProxy对象。</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;type&#125;, <span class="keyword">new</span> MapperProxy(sqlSession));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到Mapper的注册容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperRegistry <span class="title">getMapperRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapperRegistry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包装Executor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Configuration</code>使用到了<code>InterceptorChain</code>和<code>MapperRegistry</code>，这里写实现<code>MapperRegistry</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其实就是个Map，Key-类名，value-是另一个Map，这个Map中，key-方法名，value-对应的sql</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, String&gt;&gt; sqlMapping = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往容器中添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(String className, Map&lt;String, String&gt; methodSqlMapping)</span> </span>&#123;</span><br><span class="line">        sqlMapping.put(className, methodSqlMapping);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从容器中获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getObject</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlMapping.get(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的Plugin实现完全仿照<code>MyBatis</code>来的，下面依次实现<code>Interceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">plugin</span><span class="params">(Object target)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>Invocation</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> Object[] args;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invocation</span><span class="params">(Object target, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getArgs() &#123;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>InterceptorChain</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;Interceptor&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pluginAll</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Interceptor interceptor : interceptors) &#123;</span><br><span class="line">            target = interceptor.plugin(target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptor</span><span class="params">(Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">        interceptors.add(interceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interceptor&gt; <span class="title">getInterceptors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(interceptors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后实现<code>Plugin</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plugin</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> Interceptor interceptor;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Plugin</span><span class="params">(Object target, Interceptor interceptor, Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.interceptor = interceptor;</span><br><span class="line">        <span class="keyword">this</span>.signatureMap = signatureMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">wrap</span><span class="params">(Object target, Interceptor interceptor)</span> </span>&#123;</span><br><span class="line">        Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = getSignatureMap(interceptor);</span><br><span class="line">        Class&lt;?&gt; type = target.getClass();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = getAllInterfaces(type, signatureMap);</span><br><span class="line">        <span class="keyword">if</span> (interfaces.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                    type.getClassLoader(),</span><br><span class="line">                    interfaces,</span><br><span class="line">                    <span class="keyword">new</span> Plugin(target, interceptor, signatureMap));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Set&lt;Method&gt; methods = signatureMap.get(method.getDeclaringClass());</span><br><span class="line">            <span class="keyword">if</span> (methods != <span class="keyword">null</span> &amp;&amp; methods.contains(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span> interceptor.intercept(<span class="keyword">new</span> Invocation(target, method, args));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; getSignatureMap(Interceptor interceptor) &#123;</span><br><span class="line">        Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);</span><br><span class="line">        <span class="comment">// issue #251</span></span><br><span class="line">        <span class="keyword">if</span> (interceptsAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//      throw new PluginException("No @Intercepts annotation was found in interceptor " + interceptor.getClass().getName());</span></span><br><span class="line">        &#125;</span><br><span class="line">        Signature[] sigs = interceptsAnnotation.value();</span><br><span class="line">        Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Signature sig : sigs) &#123;</span><br><span class="line">            Set&lt;Method&gt; methods = signatureMap.get(sig.type());</span><br><span class="line">            <span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">                methods = <span class="keyword">new</span> HashSet&lt;Method&gt;();</span><br><span class="line">                signatureMap.put(sig.type(), methods);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = sig.type().getMethod(sig.method(), sig.args());</span><br><span class="line">                methods.add(method);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line"><span class="comment">//        throw new PluginException("Could not find method on " + sig.type() + " named " + sig.method() + ". Cause: " + e, e);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> signatureMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt;[] getAllInterfaces(Class&lt;?&gt; type, Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap) &#123;</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; interfaces = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (type != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; c : type.getInterfaces()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (signatureMap.containsKey(c)) &#123;</span><br><span class="line">                    interfaces.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            type = type.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> interfaces.toArray(<span class="keyword">new</span> Class&lt;?&gt;[interfaces.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里还需要两个注解，指定Plugin拦截的方法，和方法的签名。他们分别是<code>@Intercepts</code>和<code>@Signature</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Intercepts &#123;</span><br><span class="line">    Signature[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Signature &#123;</span><br><span class="line">    Class&lt;?&gt; type();</span><br><span class="line">    <span class="function">String <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    Class&lt;?&gt;[] args();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现我们自己的<code>Plugin</code>，使用方法与MyBatis一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = Executor.class,</span><br><span class="line">        method = <span class="string">"query"</span>,</span><br><span class="line">        args = &#123;String.class, Class.class, Object.class&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginOne</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Plugin One"</span>);</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = Executor.class,</span><br><span class="line">        method = <span class="string">"query"</span>,</span><br><span class="line">        args = &#123;String.class, Class.class, Object.class&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginTwo</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Plugin Two"</span>);</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上4-9就是全部<code>Plugin</code>的实现过程，虽然相对于MyBatis本身来说简单了很多。但是也反应了<code>MyBatis</code>中<code>Plugin</code>的实现原理。在<code>Configuration</code>中对<code>Executor</code>的包装虽然实现的很简单，但是也解答了我们之前的疑问。<code>Plugin</code>的原理是什么？多个<code>Plugin</code>执行顺序是怎样的。从这里就可以很好的得到解答。<code>Plugin</code>的实现原理是动态代理，其执行顺序取决于注册的顺序，先注册后执行，因为<code>InterceptorChain::pluginAll</code>方法便利所有的<code>Interceptor</code>(也就是<code>Plugin</code>)，然后层层调用<code>Plugin::wrap</code>来层层代理生成新的代理对象。所以后注册反而最后代理在最外层，也就先执行了。</p></li><li><p>上面说了一堆<code>Plugin</code>的实现原理，下面继续主流程，<code>Configuration</code>之后继续<code>MapperProxy</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 持有SqlSession</span></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造传入SqlSession</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperProxy</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 根据类名获取其存放方法-sql的容器</span></span><br><span class="line">        Map&lt;String, String&gt; methodSqlMapping = sqlSession.getConfiguration().getMapperRegistry().getObject(method.getDeclaringClass().getName());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != methodSqlMapping) &#123;</span><br><span class="line">            <span class="comment">// 调用到SqlSession中对应方法，最终由Executor执行</span></span><br><span class="line">            <span class="keyword">return</span> sqlSession.selectOne(methodSqlMapping.get(method.getName()), method.getReturnType(), args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>Executor</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Executor顶层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(String sql, Class&lt;T&gt; returnType, Object parameter)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleExecutor实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(String sql, Class&lt;T&gt; returnType, Object parameter)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为了更完整的模拟MyBatis，引入StatementHandler</span></span><br><span class="line">        StatementHandler handler = <span class="keyword">new</span> StatementHandler();</span><br><span class="line">        <span class="keyword">return</span> handler.query(sql, returnType, (Integer) parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>StatementHandler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatementHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 持有ResultSetHandler与ParameterHandler</span></span><br><span class="line">    <span class="keyword">private</span> ResultSetHandler resultSetHandler;</span><br><span class="line">    <span class="keyword">private</span> ParameterHandler parameterHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StatementHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        resultSetHandler = <span class="keyword">new</span> ResultSetHandler();</span><br><span class="line">        parameterHandler = <span class="keyword">new</span> ParameterHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(String sql, Class&lt;T&gt; returnType, Integer parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// JDBC操作</span></span><br><span class="line">            Connection conn = getConnection();</span><br><span class="line">            PreparedStatement statement = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 使用ParameterHandler填充参数</span></span><br><span class="line">            parameterHandler.setParameters(statement, parameter);</span><br><span class="line">            statement.execute();</span><br><span class="line">            <span class="comment">// 使用ResultSetHandler处理返回值</span></span><br><span class="line">            <span class="keyword">return</span> resultSetHandler.handler(statement.getResultSet(), returnType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String driver = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8"</span> +</span><br><span class="line">                <span class="string">"&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC"</span>;</span><br><span class="line">        String user = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"root"</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>ParameterHandler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameters</span><span class="params">(PreparedStatement statement, Integer parameter)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        statement.setInt(<span class="number">1</span>, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>ResultSetHandler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSetHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">handler</span><span class="params">(ResultSet rs, Class&lt;T&gt; returnType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到返回的对象</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = returnType.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            T instance = (T) constructor.newInstance();</span><br><span class="line">            <span class="comment">// 填充返回的对象</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                Arrays.stream(instance.getClass().getDeclaredFields())</span><br><span class="line">                        .forEach(field -&gt; fillField(instance, field, rs));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fillField</span><span class="params">(T instance, Field field, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用Java内省的方式调用对应set方法，设置对应的值</span></span><br><span class="line">            BeanInfoUtils.setProperty(instance, field.getName(), getValue(rs, field));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getValue</span><span class="params">(ResultSet rs, Field field)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; type = field.getType();</span><br><span class="line">        String name = field.getName();</span><br><span class="line">        <span class="keyword">if</span> (Integer.class == type) &#123;</span><br><span class="line">            <span class="keyword">return</span> rs.getInt(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (String.class == type) &#123;</span><br><span class="line">            <span class="keyword">return</span> rs.getString(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address == <span class="keyword">null</span> ? <span class="keyword">null</span> : address.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name == <span class="keyword">null</span> ? <span class="keyword">null</span> : name.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from person where id = ?"</span>)</span><br><span class="line">    <span class="function">Person <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V2Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration()</span><br><span class="line">                .mapperScan(<span class="string">"top.felixu.mapper"</span>)</span><br><span class="line">                .addPlugins(<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> PluginOne(), <span class="keyword">new</span> PluginTwo()&#125;)</span><br><span class="line">                .build();</span><br><span class="line">        SqlSession session = <span class="keyword">new</span> SqlSession(configuration, <span class="keyword">new</span> SimpleExecutor());</span><br><span class="line">        PersonMapper mapper = session.getMapper(PersonMapper.class);</span><br><span class="line">        Person person = mapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plugin Two</span><br><span class="line">Plugin One</span><br><span class="line">Person&#123;id=1, address='丑逼', age=1, name='丑逼'&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>上面的辣鸡代码可以<a href="">戳这里</a></p>]]></content>
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis源码分析之总体流程</title>
      <link href="/2018/08/22/MyBatis%E7%B3%BB%E5%88%97-2018-08-22-MyBatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/08/22/MyBatis%E7%B3%BB%E5%88%97-2018-08-22-MyBatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="写在开始"><a href="#写在开始" class="headerlink" title="写在开始"></a>写在开始</h1><p>前面简单的说了下MyBatis要怎么去用，说的比较乱，也比较简单，但是大致也是可以用起来了。关于怎么使用怎么整合，网上也是一堆教程，就不去过多的介绍了。这里开始，我们从源码层面去更深层次的了解一下Mybatis。</p><p>从前面的使用中我们可以看出，要使用MyBatis，首先我们需要获取SqlSession，之后用SqlSession去获取需要使用的Mapper，最后，使用Mapper去调用方法，得到我们想要的结果。这也正是源码执行的流程。</p><p>这里使用的源码版本是3.4.2，它的源码从结构上来说，大致可以分为以下部分，它们的层次是越往下越底层，而巧的是，这样的结构恰巧跟源码的分包十分相似</p><p><img src="http://oss-blog.felixu.top/MyBatis%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="源码分层图"></p><p>接下来便开始来Debug走完一个执行流程吧。</p><h1 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h1><p>在前面我的demo中有这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String resource = <span class="string">"/Users/top/github/felixu1024/GP/MyBatisLearning/MyBatis/src/main/java/top/top/config/mybatis-config.xml"</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        SqlSessionFactory build = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> build.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这里使用了<code>SqlSessionFactoryBuilder</code>来build了一个<code>SqlSessionFactory</code>，那么我们就从bulid来入手。</p><h2 id="获取SqlSessionFactory"><a href="#获取SqlSessionFactory" class="headerlink" title="获取SqlSessionFactory"></a>获取SqlSessionFactory</h2><p>打开<code>SqlSessionFactoryBuilder</code>可以看到很明显的两块，都是用来build我们的<code>SqlSessionFactory</code>的，不同的是一块是使用的<code>Reader</code>，另一块则是使用<code>InputStream</code>的。这里我们只挑一块来讲了，其实是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    . . . . . .省略部分代码</span><br><span class="line">  <span class="comment">// 传入配置文件  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(inputStream, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传入配置文件，和所需要使用的environment，也就是数据源(前面配置有讲过)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(inputStream, environment, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传入配置文件以及Properties</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(inputStream, <span class="keyword">null</span>, properties);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传入配置文件，environment，Properties，这里才是真正处理的方法。</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 得到一个XML的配置解析器</span></span><br><span class="line">      XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line">      <span class="comment">// 调用bulid(Configuration config)返回SqlSessionFactory</span></span><br><span class="line">      <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error building SqlSession."</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// Intentionally ignore. Prefer previous error.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传入解析后得到的Configuration，得到一个DefaultSqlSessionFactory</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(config);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的源码中，我添加了很详细的注释了，当build需要的<code>SqlSessionFactory</code>时，最终会将传入的参数传给<code>XMLConfigBuilder</code>得到一个解析器，解析器调用<code>prase()</code>方法，将配置文件，数据源等解析成<code>Configuration</code>，然后使用<code>Configuration</code>创建了<code>DefaultSqlSessionFactory</code>。点进<code>DefaultSqlSessionFactory</code>我们可以看到，仅仅是<code>SqlSessionFactory</code>持有了<code>Configuration</code>，随后将<code>DefaultSqlSessionFactory</code>返回给调用者。这里我们就不去具体看<code>XMLConfigBuilder</code>是如何解析得到<code>Configuration</code>了，无非就是解析<code>XML</code>，等后面有时间讲配置的源码的再细讲。</p><h2 id="获取SqlSession"><a href="#获取SqlSession" class="headerlink" title="获取SqlSession"></a>获取SqlSession</h2><p>看demo中，最后使用<code>SqlSessionFactory</code>调用<code>openSession()</code>得到了<code>SqlSession</code>。那么我们再打开<code>DefaultSqlSessionFactory</code>去看一看，是怎么得到的<code>SqlSession</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    . . . . . .省略部分代码</span><br><span class="line">  <span class="comment">// 经过一系列调用，最后调用到这里，那一系列重载就不贴出来了🤦‍♂️</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">      <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">      <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">      <span class="comment">// 在这里返回我们需要的SqlSession，同时持有Configuration和Executor</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error opening session.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这段源码在这里就不过多的去关注细节了，我们只需要知道，最终返回了需要用的<code>DefaultSqlSession</code>，同时它持有了<code>Configuration</code>和<code>Executor</code>。</p><p>这整个获取<code>SqlSession</code>的过程，可以用如下流程图表示：</p><p><img src="http://oss-blog.felixu.top/MyBatis%E8%8E%B7%E5%8F%96SqlSession%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="获取SqlSession的过程"></p><h1 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h1><p>在拿到<code>SqlSession</code>之后，我们做了如下动作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Person <span class="title">queryPersonById</span><span class="params">(SqlSession sqlSession, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    PersonMapper mapper = sqlSession.getMapper(PersonMapper.class);</span><br><span class="line">    <span class="keyword">return</span> mapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>SqlSession</code>去得到一个需要使用的一个<code>Mapper</code>，然后使用<code>Mapper</code>去调用方法，得到我们想要的结果。这里难道你不会好奇，<code>Mapper</code>明明都是<code>interface</code>的，为什么它们可以调用方法呢？接下来我们去看一下具体第得到<code>Mapper</code>的源码，或许能找到答案。首先我们从<code>DefaultSqlSession</code>的<code>getMapper(Class&lt;T&gt; type)</code>方法开始往下看：</p><ol><li><p>首先在<code>DefaultSqlSession</code>中找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Configuration configuration;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 什么都不做，直接使用自身所持用的Configuration去找</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> configuration.&lt;T&gt;getMapper(type, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>DefaultSqlSession</code>甩锅给了<code>Configuration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line">  <span class="comment">// Configuration说你个SqlSession都不做，我也不做，然后就交给了mapperRegistry</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先不必去关心<code>MapperRegistry</code>是干什么的，从名称上来看，应该是个<code>Mapper</code>的注册器。</p></li><li><p><code>Configuration</code>又成功的将锅甩给了<code>MapperRegistry</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt;();</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 到了这里，可算是做了一点事情了。</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从Map中根据type，取出对应的MapperProxyFactory</span></span><br><span class="line">    <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (mapperProxyFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Type "</span> + type + <span class="string">" is not known to the MapperRegistry."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 好了，然后又开始甩锅了，继续交给MapperProxyFactory</span></span><br><span class="line">      <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Error getting mapper instance. Cause: "</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>knownMappers</code>有<code>get()</code>方法，那么必然也会有地方使用<code>put()</code>方法，这里就不去具体看<code>put()</code>方法了，它是在解析配置文件被调用的，可以自己跟一下源码，很容易就找到。</p></li><li><p><code>MapperRegistry</code>又将后面的活交给了<code>MapperProxyFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 这里在上面提到的knownMappers调用put()时，被添加进来的，就是Mapper所对应的Class类型。</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache = <span class="keyword">new</span> ConcurrentHashMap&lt;Method, MapperMethod&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperProxyFactory</span><span class="params">(Class&lt;T&gt; mapperInterface)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getMapperInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;Method, MapperMethod&gt; <span class="title">getMethodCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个代理对象</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// new一个MapperProxy</span></span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="comment">// 调用重载方法</span></span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里调用链开始返回，所以最终返回并不是之前的<code>Mapper</code>接口了，而是一个被动态代理之后的类。这也就是解释了之前我们的疑问。原来因为是代理类，所以它才可以去调用方法，并不是用接口调用了方法。</p></li></ol><p>同样，我们也用一个流程图来表示一下这整个流程：</p><p><img src="http://oss-blog.felixu.top/MyBatis%E8%8E%B7%E5%8F%96Mapper%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="获取Mapper的流程"></p><h1 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行SQL</h1><p>通过上面的一系列步骤，我们终于拿到了<code>Mapper</code>，也知道了这个<code>Mapper</code>它已经不是原来的接口了，而是一个代理后的<code>MapperProxy</code>对象，所以，当我们用<code>Mapper</code>来调用方法时，必然是进入了<code>MapperProxy</code>的<code>invoke()</code>方法。所以我们从<code>MapperProxy</code>开始：</p><ol><li><p>首先是<code>Mapper</code>调用方法，进入<code>invoke()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 持有SqlSession</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSession;</span><br><span class="line">  <span class="comment">// 被代理的Class</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">  <span class="comment">// 在构造中被赋值，可知它是一个ConcurrentHashMap，猜测它应该就是一级缓存</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造在上面说到获取Mapper的时候被调用的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperProxy</span><span class="params">(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    <span class="keyword">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">    <span class="keyword">this</span>.methodCache = methodCache;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 调用父类诸如toString()等方法时调用</span></span><br><span class="line">      <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">      <span class="comment">// 调用默认方法时调用</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDefaultMethod(method)) &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeDefaultMethod(proxy, method, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到一个MapperMethod</span></span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 感觉这里没什么好解释的</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MapperMethod <span class="title">cachedMapperMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    MapperMethod mapperMethod = methodCache.get(method);</span><br><span class="line">    <span class="keyword">if</span> (mapperMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">      mapperMethod = <span class="keyword">new</span> MapperMethod(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class="line">      methodCache.put(method, mapperMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mapperMethod;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>invoke()</code>中，调用<code>MapperMethod</code>的<code>execute()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperMethod</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    . . . . . .省略部分代码</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">switch</span> (command.getType()) &#123;</span><br><span class="line">          <span class="keyword">case</span> INSERT: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">            result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> UPDATE: &#123;</span><br><span class="line">            Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">            result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> DELETE: &#123;</span><br><span class="line">            Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">            result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> SELECT:</span><br><span class="line">            <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">              executeWithResultHandler(sqlSession, args);</span><br><span class="line">              result = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">              result = executeForMany(sqlSession, args);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">              result = executeForMap(sqlSession, args);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">              result = executeForCursor(sqlSession, args);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">              result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> FLUSH:</span><br><span class="line">            result = sqlSession.flushStatements();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Unknown execution method for: "</span> + command.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Mapper method '"</span> + command.getName() </span><br><span class="line">          + <span class="string">" attempted to return null from a method with a primitive return type ("</span> + method.getReturnType() + <span class="string">")."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法看上去就是一堆的<code>CURD</code>，然后去执行对应的方法，按照demo，我们肯定会进入<code>SqlSession</code>的<code>selectOne()</code>方法中。</p></li><li><p>打开<code>DefaultSqlSession</code>的<code>selectOne()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Configuration configuration;</span><br><span class="line">  <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.&lt;T&gt;selectOne(statement, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用的selectList()方法</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">this</span>.&lt;T&gt;selectList(statement, parameter);</span><br><span class="line">    <span class="keyword">if</span> (list.size() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> TooManyResultsException(<span class="string">"Expected one result (or null) to be returned by selectOne(), but found: "</span> + list.size());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.selectList(statement, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// MappedStatement是一个Mapper的语句集合，在解析Configuration时被填充，后面有时间细说</span></span><br><span class="line">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">      <span class="comment">// 将真正的处理交给Executor了</span></span><br><span class="line">      <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中我们可以看到，虽然一开始调用的是<code>selectOne()</code>方法，最终会调用到<code>selectList()</code>方法中。这里我们先忽略对配置文件解析，只需要知道<code>Configuration</code>中的<code>MappedStatement</code>是来自于对配置的解析，它包含了<code>Mapper</code>中的<code>SQL</code>语句。然后将这些参数交给了<code>Executor</code>去执行。</p></li><li><p><code>SqlSession</code>使用<code>Executor</code>来真正执行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Executor delegate;</span><br><span class="line">  <span class="keyword">private</span> TransactionalCacheManager tcm = <span class="keyword">new</span> TransactionalCacheManager();</span><br><span class="line"></span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line">  <span class="comment">// SqlSession调用到这里</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 从MappedStatement中拿到BoundSql，BoundSql中包含了SQL语句以及参数。</span></span><br><span class="line">    BoundSql boundSql = ms.getBoundSql(parameterObject);</span><br><span class="line">    <span class="comment">// 多维度构建缓存的Key，有兴趣可以看下。</span></span><br><span class="line">    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">    <span class="comment">// 调用重载方法</span></span><br><span class="line">    <span class="keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 查找缓存，固有套路都懂的。</span></span><br><span class="line">    Cache cache = ms.getCache();</span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      flushCacheIfRequired(ms);</span><br><span class="line">      <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ensureNoOutParams(ms, parameterObject, boundSql);</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 和最后一句return一样，在底下解释。</span></span><br><span class="line">          list = delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">          tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 装饰器模式，调用另一个Executor中的query()方法。</span></span><br><span class="line">    <span class="keyword">return</span> delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们<code>Debug</code>源码会进入到<code>CachingExecutor</code>中，这里可以看到一个同源的委派，也就是装饰器模式，最终会委派到<code>BaseExecutor</code>的<code>query()</code>中。</p></li><li><p>我们再来看看<code>BaseExecutor</code>的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">protected</span> PerpetualCache localCache;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// CachingExecute调用到这里</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing a query"</span>).object(ms.getId());</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">      clearLocalCache();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      queryStack++;</span><br><span class="line">      list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 调用查询</span></span><br><span class="line">        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      queryStack--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">        deferredLoad.load();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// issue #601</span></span><br><span class="line">      deferredLoads.clear();</span><br><span class="line">      <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">        <span class="comment">// issue #482</span></span><br><span class="line">        clearLocalCache();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    <span class="comment">// 这里put了一个Key，有兴趣可以看下，蛮有意思的做法，这里我们先不理。</span></span><br><span class="line">    localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 这里看到了doXXX()方法，在不少优秀的框架中都会有个doXXX()方法，是真正做事情的地方。</span></span><br><span class="line">      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      localCache.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line">    localCache.putObject(key, list);</span><br><span class="line">    <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">      localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>doQuery()</code>方法，实际调用的是<code>SimpleExecutor</code>中的，因为这里只是个抽象方法，它有多个实现，在构建<code>SqlSession</code>的时候，如果没有指定，那么默认会使用<code>SimpleExecutor</code>。</p></li><li><p>进入到<code>SimpleExecutor</code>里面来具体看一下<code>doQuery()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleExecutor</span> <span class="keyword">extends</span> <span class="title">BaseExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line">   </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Configuration configuration = ms.getConfiguration();</span><br><span class="line">      <span class="comment">// 得到StatementHandler，它有多个实现，点进方法可以知道这里得到RoutingStatementHandler</span></span><br><span class="line">      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="comment">// 这句没得解释了吧</span></span><br><span class="line">      stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">      <span class="comment">// 使用RoutingStatementHandler调用query()</span></span><br><span class="line">      <span class="keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      closeStatement(stmt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做的事情就很简单啦，短短几句，最后到了<code>RoutingStatementHandler</code>中</p></li><li><p>进入<code>RoutingStatementHandler</code>的<code>query()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingStatementHandler</span> <span class="keyword">implements</span> <span class="title">StatementHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> StatementHandler delegate;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RoutingStatementHandler</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们可以看到，在构造中决定了这里的delegate是谁。</span></span><br><span class="line">    <span class="keyword">switch</span> (ms.getStatementType()) &#123;</span><br><span class="line">      <span class="keyword">case</span> STATEMENT:</span><br><span class="line">        delegate = <span class="keyword">new</span> SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PREPARED:</span><br><span class="line">        delegate = <span class="keyword">new</span> PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> CALLABLE:</span><br><span class="line">        delegate = <span class="keyword">new</span> CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Unknown statement type: "</span> + ms.getStatementType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 我们调用的是这个方法，那么这个delegate又是谁呢？</span></span><br><span class="line">    <span class="keyword">return</span> delegate.&lt;E&gt;query(statement, resultHandler);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> . . . . . .省略部分代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也跟前面类似，是一个装饰器模式。那么这个<code>delegate</code>究竟是是呢？从这个类的构造中可以看到，究竟是谁，取决于<code>MappedStatement</code>，前面在<code>DefaultSession</code>中说过，它是干嘛的，怎么来的，那么很简单嘛，从那里溯源，往上找，一定能找到它是怎么产生的，也就知道了它里面的<code>statementType</code>是什么了。具体代码就不贴了，感兴趣的可以看下，倒追的过程是这样的：</p><p><code>DefaultSqlSession::selectList</code> - - -&gt; <code>Configuration::getMappedStatement</code> - - -&gt; <code>Configuration::addMappedStatement</code> - - -&gt; <code>MapperBuilderAssistant::addMappedStatement</code></p><p>最后我们会发现这里的<code>delegate</code>是<code>PreparedStatementHandler</code></p></li><li><p>所以接下来会进入到<code>PreparedStatementHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatementHandler</span> <span class="keyword">extends</span> <span class="title">BaseStatementHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  . . . . . .省略部分代码</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement ps = (PreparedStatement) statement;</span><br><span class="line">    <span class="comment">// 没得说吧</span></span><br><span class="line">    ps.execute();</span><br><span class="line">    <span class="comment">// 处理返回结果，返回我们需要的数据</span></span><br><span class="line">    <span class="keyword">return</span> resultSetHandler.&lt;E&gt; handleResultSets(ps);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们的<code>SQL</code>是终于执行了，然后将返回结果处理之后，返回给我们调用方。</p></li></ol><p>经过漫长的调用，我们终于是执行完了<code>SQL</code>，拿到了想要的结果。但是整个过程中，有一些细节部分我们还是省去了没有说。有兴趣可以自己去看看。那么执行SQL的流程图又是怎样的呢：</p><p><img src="http://oss-blog.felixu.top/MyBatis%E7%9A%84Sql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="SQL执行流程图"></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>使用<code>MyBatis</code>做一次查询，它完整的源码流程就是这样子啦。它的源码从结构和层次上来说，还是比<code>Spring</code>要好看懂很多的。这里有必要提一下的是<code>Mapper</code>的代理，这并不是一个完整的，或者说标准的动态代理，为什么这么说呢，看下面的图就明白了：</p><p><img src="" alt="代理图"></p><p>好啦，就说这么多吧。</p>]]></content>
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis的配置文件解读</title>
      <link href="/2018/08/21/MyBatis%E7%B3%BB%E5%88%97-2018-08-21-MyBatis%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/"/>
      <url>/2018/08/21/MyBatis%E7%B3%BB%E5%88%97-2018-08-21-MyBatis%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h1 id="Mapper文件解读"><a href="#Mapper文件解读" class="headerlink" title="Mapper文件解读"></a>Mapper文件解读</h1><p>以下是一个完整的<code>Mapper.xml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><br><span class="line">&lt;mapper namespace="top.felixu.dao.PersonMapper"&gt;</span><br><span class="line">  &lt;resultMap id="BaseResultMap" type="top.felixu.entity.Person"&gt;</span><br><span class="line">    &lt;id column="id" jdbcType="INTEGER" property="id" /&gt;</span><br><span class="line">    &lt;result column="address" jdbcType="VARCHAR" property="address" /&gt;</span><br><span class="line">    &lt;result column="age" jdbcType="INTEGER" property="age" /&gt;</span><br><span class="line">    &lt;result column="name" jdbcType="VARCHAR" property="name" /&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br><span class="line">  &lt;sql id="Example_Where_Clause"&gt;</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">      &lt;foreach collection="oredCriteria" item="criteria" separator="or"&gt;</span><br><span class="line">        &lt;if test="criteria.valid"&gt;</span><br><span class="line">          &lt;trim prefix="(" prefixOverrides="and" suffix=")"&gt;</span><br><span class="line">            &lt;foreach collection="criteria.criteria" item="criterion"&gt;</span><br><span class="line">              &lt;choose&gt;</span><br><span class="line">                &lt;when test="criterion.noValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test="criterion.singleValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test="criterion.betweenValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125; #&#123;criterion.value&#125; and #&#123;criterion.secondValue&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test="criterion.listValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125;</span><br><span class="line">                  &lt;foreach close=")" collection="criterion.value" item="listItem" open="(" separator=","&gt;</span><br><span class="line">                    #&#123;listItem&#125;</span><br><span class="line">                  &lt;/foreach&gt;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">              &lt;/choose&gt;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">          &lt;/trim&gt;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">      &lt;/foreach&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">  &lt;/sql&gt;</span><br><span class="line">  &lt;sql id="Update_By_Example_Where_Clause"&gt;</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">      &lt;foreach collection="example.oredCriteria" item="criteria" separator="or"&gt;</span><br><span class="line">        &lt;if test="criteria.valid"&gt;</span><br><span class="line">          &lt;trim prefix="(" prefixOverrides="and" suffix=")"&gt;</span><br><span class="line">            &lt;foreach collection="criteria.criteria" item="criterion"&gt;</span><br><span class="line">              &lt;choose&gt;</span><br><span class="line">                &lt;when test="criterion.noValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test="criterion.singleValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test="criterion.betweenValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125; #&#123;criterion.value&#125; and #&#123;criterion.secondValue&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test="criterion.listValue"&gt;</span><br><span class="line">                  and $&#123;criterion.condition&#125;</span><br><span class="line">                  &lt;foreach close=")" collection="criterion.value" item="listItem" open="(" separator=","&gt;</span><br><span class="line">                    #&#123;listItem&#125;</span><br><span class="line">                  &lt;/foreach&gt;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">              &lt;/choose&gt;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">          &lt;/trim&gt;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">      &lt;/foreach&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">  &lt;/sql&gt;</span><br><span class="line">  &lt;sql id="Base_Column_List"&gt;</span><br><span class="line">    id, address, age, name</span><br><span class="line">  &lt;/sql&gt;</span><br><span class="line">  &lt;select id="selectByExample" parameterType="top.felixu.entity.PersonExample" resultMap="BaseResultMap"&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;if test="distinct"&gt;</span><br><span class="line">      distinct</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;include refid="Base_Column_List" /&gt;</span><br><span class="line">    from person</span><br><span class="line">    &lt;if test="_parameter != null"&gt;</span><br><span class="line">      &lt;include refid="Example_Where_Clause" /&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test="orderByClause != null"&gt;</span><br><span class="line">      order by $&#123;orderByClause&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap"&gt;</span><br><span class="line">    select </span><br><span class="line">    &lt;include refid="Base_Column_List" /&gt;</span><br><span class="line">    from person</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;delete id="deleteByPrimaryKey" parameterType="java.lang.Integer"&gt;</span><br><span class="line">    delete from person</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/delete&gt;</span><br><span class="line">  &lt;delete id="deleteByExample" parameterType="top.felixu.entity.PersonExample"&gt;</span><br><span class="line">    delete from person</span><br><span class="line">    &lt;if test="_parameter != null"&gt;</span><br><span class="line">      &lt;include refid="Example_Where_Clause" /&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/delete&gt;</span><br><span class="line">  &lt;insert id="insert" parameterType="top.felixu.entity.Person"&gt;</span><br><span class="line">    insert into person (id, address, age, </span><br><span class="line">      name)</span><br><span class="line">    values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;address,jdbcType=VARCHAR&#125;, #&#123;age,jdbcType=INTEGER&#125;, </span><br><span class="line">      #&#123;name,jdbcType=VARCHAR&#125;)</span><br><span class="line">  &lt;/insert&gt;</span><br><span class="line">  &lt;insert id="insertSelective" parameterType="top.felixu.entity.Person"&gt;</span><br><span class="line">    insert into person</span><br><span class="line">    &lt;trim prefix="(" suffix=")" suffixOverrides=","&gt;</span><br><span class="line">      &lt;if test="id != null"&gt;</span><br><span class="line">        id,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="address != null"&gt;</span><br><span class="line">        address,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="age != null"&gt;</span><br><span class="line">        age,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="name != null"&gt;</span><br><span class="line">        name,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    &lt;trim prefix="values (" suffix=")" suffixOverrides=","&gt;</span><br><span class="line">      &lt;if test="id != null"&gt;</span><br><span class="line">        #&#123;id,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="address != null"&gt;</span><br><span class="line">        #&#123;address,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="age != null"&gt;</span><br><span class="line">        #&#123;age,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="name != null"&gt;</span><br><span class="line">        #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">  &lt;/insert&gt;</span><br><span class="line">  &lt;select id="countByExample" parameterType="top.felixu.entity.PersonExample" resultType="java.lang.Integer"&gt;</span><br><span class="line">    select count(*) from person</span><br><span class="line">    &lt;if test="_parameter != null"&gt;</span><br><span class="line">      &lt;include refid="Example_Where_Clause" /&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;update id="updateByExampleSelective" parameterType="map"&gt;</span><br><span class="line">    update person</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test="record.id != null"&gt;</span><br><span class="line">        id = #&#123;record.id,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="record.address != null"&gt;</span><br><span class="line">        address = #&#123;record.address,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="record.age != null"&gt;</span><br><span class="line">        age = #&#123;record.age,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="record.name != null"&gt;</span><br><span class="line">        name = #&#123;record.name,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    &lt;if test="_parameter != null"&gt;</span><br><span class="line">      &lt;include refid="Update_By_Example_Where_Clause" /&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/update&gt;</span><br><span class="line">  &lt;update id="updateByExample" parameterType="map"&gt;</span><br><span class="line">    update person</span><br><span class="line">    set id = #&#123;record.id,jdbcType=INTEGER&#125;,</span><br><span class="line">      address = #&#123;record.address,jdbcType=VARCHAR&#125;,</span><br><span class="line">      age = #&#123;record.age,jdbcType=INTEGER&#125;,</span><br><span class="line">      name = #&#123;record.name,jdbcType=VARCHAR&#125;</span><br><span class="line">    &lt;if test="_parameter != null"&gt;</span><br><span class="line">      &lt;include refid="Update_By_Example_Where_Clause" /&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/update&gt;</span><br><span class="line">  &lt;update id="updateByPrimaryKeySelective" parameterType="top.felixu.entity.Person"&gt;</span><br><span class="line">    update person</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test="address != null"&gt;</span><br><span class="line">        address = #&#123;address,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="age != null"&gt;</span><br><span class="line">        age = #&#123;age,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test="name != null"&gt;</span><br><span class="line">        name = #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/update&gt;</span><br><span class="line">  &lt;update id="updateByPrimaryKey" parameterType="top.felixu.entity.Person"&gt;</span><br><span class="line">    update person</span><br><span class="line">    set address = #&#123;address,jdbcType=VARCHAR&#125;,</span><br><span class="line">      age = #&#123;age,jdbcType=INTEGER&#125;,</span><br><span class="line">      name = #&#123;name,jdbcType=VARCHAR&#125;</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>namespace</strong></p><p>这个主要用于将xml关联到接口上</p></li><li><p><strong>resultMap/resultType</strong></p><p>|            |                  Pros                  |      Cons      |<br>| :——–: | :————————————: | :————: |<br>| ResultType | 多表关联字段是清除知道的，性能调优直观 | 创建很多实体类 |<br>| ResultMap  |            不需要写join字段            |   N + 1问题    |</p></li><li><p><strong>SQL</strong></p><p>sql语句</p></li><li><p><strong>CRUD</strong></p></li><li><p><strong>动态SQL</strong></p><p><a href="http://www.mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="noopener">动态SQL</a></p></li><li><p><strong>缓存</strong></p><ul><li><p>一级缓存</p><p>MyBatis的一级缓存是基于SqlSession级别的，并且是默认开启的，在操作数据库时需要构造SqlSession对象，在内存中用HashMap存储缓存数据。不同SqlSession之间的缓存数据区域是互不影响的。在执行DML操作时会清空缓存。</p></li><li><p>二级缓存</p><p>MyBatis的二级缓存是基于Mapper级别的，其作用域是Mapper的整个namespace，默认关闭。不同SqlSession执行同一namespace下同一sql，且参数相同均会命中缓存。但是在实际使用中，我们并不会去开启二级缓存，因为二级缓存会存在很大几率出现脏数据。</p></li></ul></li></ul><h1 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h1><ul><li><p><strong>分页</strong></p><ul><li><p>逻辑分页</p><p>所谓逻辑分页就是指在内存中分页，而非真正的分页。在MyBatis中原生其实就已经提供了这种分页方式，其org.apache.ibatis.executor.resultset.DefaultResultSetHandler #handleRowValuesForSimpleResultMap就是MyBatis自带的分页实现，它是对ResultSet的分页，其实所有数据已经进入内存了。</p></li><li><p>物理分页</p><p>物理分页就是sql上的分页，即limit。我们常用的分页要么是自己写sql，或者是使用一些第三方的插件或者开源实现，比如<a href="https://github.com/pagehelper/Mybatis- PageHelper" target="_blank" rel="noopener">PageHelper</a>，MyBatis-Plus。</p></li></ul></li><li><p><strong>批量操作</strong></p><p>批量操作一般会有以下几种操作方式：</p><p>|                    | 性能           | 限制                                                         |<br>| —————— | ————– | ———————————————————— |<br>| for循环插入        | 低，每次都要IO |                                                              |<br>| foreach拼SQL       | 高，一次IO     | 有 SQL 长度限制，定好 List 大小<br>show variables like ‘%packet%’;<br>show variables like ‘%net_buffer%’; |<br>| ExecutorType.BATCH | 高，一次IO     |                                                              |</p></li><li><p><strong>联合查询</strong></p><ul><li>嵌套结果</li><li>嵌套查询</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis简介与部分配置</title>
      <link href="/2018/08/20/MyBatis%E7%B3%BB%E5%88%97-2018-08-20-MyBatis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/08/20/MyBatis%E7%B3%BB%E5%88%97-2018-08-20-MyBatis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h1><ol><li><p><strong>MyBatis是什么</strong></p><blockquote><p>MyBatis is a first class persistence framework with support for custom SQL, stored procedures and advanced mappings.MyBatis是一个一流的持久性框架，支持定制SQL、存储过程和高级映射。</p></blockquote></li><li><p><strong>MyBatis有什么优势</strong></p><blockquote><p>MyBatis eliminates almost all of the JDBC code and manual setting of parameters and retrieval of results.MyBatis消除了几乎所有的JDBC代码和手动设置参数以及检索结果。</p></blockquote></li><li><p><strong>MyBatis是怎么做到ORM的</strong></p><blockquote><p>MyBatis can use simple XML or Annotations for configuration and map primitives, Map interfaces and Java POJOs (Plain Old Java Objects) to database records.MyBatis可以使用简单的XML或注释来配置和映射原语、映射接口和Java pojo(普通的旧Java对象)到数据库记录。</p></blockquote></li></ol><p>以上是<code>MyBatis</code>官网对Mybatis的描述。可以说是已经描述的非常清楚了，那么我们使用MyBatis和使用传统的JDBC有什么不同呢。</p><p><img src="" alt="MyBatis和JDBC使用对比"></p><h1 id="MyBatis的使用"><a href="#MyBatis的使用" class="headerlink" title="MyBatis的使用"></a>MyBatis的使用</h1><p>一般MyBatis有两种使用方式：</p><ol><li>编程式</li><li>集成式</li></ol><p>在讲MyBatis怎么使用之前，先来说说MyBatis的generator，我们一般会使用generator来生成我们使用MyBatis所需要的</p><ul><li>entity</li><li>dao</li><li>mapper</li></ul><p>那么generator怎么使用呢：</p><p>第一种方式，是使用maven的插件</p><ol><li><p>引入依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.3&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;configurationFile&gt;src/main/resources/generator/generator_config.xml&lt;/configurationFile&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置<code>generator_config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"/Users/felixu/github/felixu1024/GP/MyBatisLearning/Generator/src/main/resources/generator/mysql-connector-java-5.1.34.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MysqlTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--去除注释  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;useJDBCCompliantTimezoneShift=true&amp;amp;useLegacyDatetimeCode=false&amp;amp;serverTimezone=UTC"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.felixu.entity"</span> <span class="attr">targetProject</span>=<span class="string">"/Users/felixu/github/felixu1024/GP/MyBatisLearning/Generator/src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.felixu.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"/Users/felixu/github/felixu1024/GP/MyBatisLearning/Generator/src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"top.felixu.dao"</span> <span class="attr">targetProject</span>=<span class="string">"/Users/felixu/github/felixu1024/GP/MyBatisLearning/Generator/src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"test"</span> <span class="attr">tableName</span>=<span class="string">"person"</span> <span class="attr">domainObjectName</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"test"</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>执行<code>mvn mybatis-generator:generate</code>便会自动生成相关实体和对应的mapper与xml文件。</p></li><li><p>所需文件</p><p><img src="" alt="所需文件"></p></li></ol><p>第二种方式不使用maven插件的方式，而直接使用jar包：</p><ol><li><p>下载所需文件到任意位置</p><p><img src="" alt="所需文件"></p></li><li><p>配置<code>mybatis_generator_config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定数据库连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"mysql-connector-java-5.1.34.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"imama"</span>  <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name="suppressDate" value="true" /&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jdbc连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实体生成的位置和包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.felixu.entity"</span> <span class="attr">targetProject</span>=<span class="string">"gen"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- xml生成的位置和包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"/"</span> <span class="attr">targetProject</span>=<span class="string">"../resources/mappers"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mapper生成的位置和包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.felixu.dao"</span> <span class="attr">targetProject</span>=<span class="string">"gen"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置需要生成的表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"test"</span> <span class="attr">tableName</span>=<span class="string">"person"</span> <span class="attr">domainObjectName</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span> <span class="attr">type</span>=<span class="string">"post"</span> <span class="attr">identity</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以直接在目录下执行，当然也可以将其写到一个可执行文件中，每次执行就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf gen/*</span><br><span class="line">java -jar mybatis-generator-core-1.3.2.jar -configfile mybatis_generator_config.xml</span><br></pre></td></tr></table></figure></li></ol><p>说完了怎么使用generator，下面就说说怎么使用MyBatis了。</p><h2 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h2><p>编程式即为不与<code>Spring</code>一类的框架集成使用。</p><ol><li><p>首先使用<code>Generator</code>生成我们对应的实体类。</p></li><li><p>引入依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;6.0.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>MyBatis</code>的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;useJDBCCompliantTimezoneShift=true&amp;amp;useLegacyDatetimeCode=false&amp;amp;serverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/PersonMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用就简单举个栗子了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(queryPersonById(getSqlSession(), <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String resource = <span class="string">"/Users/felixu/github/felixu1024/GP/MyBatisLearning/MyBatis/src/main/java/top/felixu/config/mybatis-config.xml"</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        SqlSessionFactory build = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="keyword">return</span> build.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertPerson</span><span class="params">(SqlSession sqlSession, Person person)</span> </span>&#123;</span><br><span class="line">        PersonMapper mapper = sqlSession.getMapper(PersonMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.insert(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Person <span class="title">queryPersonById</span><span class="params">(SqlSession sqlSession, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        PersonMapper mapper = sqlSession.getMapper(PersonMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="集成式"><a href="#集成式" class="headerlink" title="集成式"></a>集成式</h2><h1 id="MyBatis部分配置解读"><a href="#MyBatis部分配置解读" class="headerlink" title="MyBatis部分配置解读"></a>MyBatis部分配置解读</h1><ul><li><p><strong>Environment</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;useJDBCCompliantTimezoneShift=true&amp;amp;useLegacyDatetimeCode=false&amp;amp;serverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在MyBatis中的environment标签是用来配置数据源的，当这里配置多个时就是多数据源配置，在使用时指定对应数据源的id就可以实现多数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory build = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is, environment:<span class="string">"development"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>TypeHandler</strong></p><p>TypeHandler的作用是Java类型和表字段类型的映射实现，就是它使得Java类型和数据库类型可以互相转化的，在官方有很多定义好的<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" target="_blank" rel="noopener">TypeHandlers</a>。</p><p>当然我们也可以来自定义类型处理器。需要做以下几件事：</p><ol><li><p>实现 <code>org.apache.ibatis.type.TypeHandler</code> 接口， 或继承一个很便利的类 <code>org.apache.ibatis.type.BaseTypeHandler</code>， 然后可以选择性地将它映射到一个 JDBC 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedJdbcTypes</span>(value = JdbcType.VARCHAR)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeHandlerOne</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps.setString(i, <span class="string">"felixu"</span>.equals(parameter) ? parameter + <span class="string">"是帅逼"</span> : parameter + <span class="string">"是丑逼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rs.getString(columnName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rs.getString(columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cs.getString(columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册</p><p>编程式在其配置文件中增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">&lt;typeHandler handler="top.felixu.handler.TypeHandlerOne"/&gt;</span><br><span class="line">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure><p>集成式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">    sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">    sqlSessionFactoryBean.setTypeHandlers(<span class="keyword">new</span> TypeHandler[]&#123;<span class="keyword">new</span> TypeHandlerOne()&#125;);  </span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在以前旧版本中，还会有第三步，需要在对应的xml文件中指定某字段来使用自定义的TypeHandler。 这意味着除非显式的设置，否则TypeHandler在<code>ResultMap</code>中将是无效的。 如果希望在<code>ResultMap</code>中使用TypeHandler，那么设置<code>@MappedJdbcTypes</code>注解的<code>includeNullJdbcType=true</code>即可。 然而从Mybatis 3.4.0开始，如果<strong>只有一个</strong>注册的TypeHandler来处理Java类型，那么它将是<code>ResultMap</code>使用Java类型时的默认值（即使没有<code>includeNullJdbcType=true</code>。</p></li><li><p><strong>plugins</strong></p><p>MyBatis可以通过实现Interceptor接口，来做一些拦截操作。但是仅限于拦截以下操作：</p><ul><li><p>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</p></li><li><p>ParameterHandler (getParameterObject, setParameters)</p></li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>那么具体要怎么来使用呢：</p><ol><li><p>实现Interceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = Executor.class,</span><br><span class="line">        method = <span class="string">"query"</span>,</span><br><span class="line">        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorOne</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"from my interceptor one"</span>);</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册</p><p>编程式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor="top.felixu.interceptor.InterceptorOne"/&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><p>集成式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">    sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">    sqlSessionFactoryBean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> InterceptorOne()&#125;);</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以根据实际情况来对查询结果等做一些操作，我们熟知的分页插件，其实也是通过这种方式来实现的。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>从上面可以知道，Mapper的生命周期在Spring下是Application级别的，可是官方给的却是Session级别的。那么为什么Spring下可以延长到整个Application呢。<br>这主要是从Mapper的实际作用出发的，Mapper在MyBatis中并不会实际调用方法，它的主要作用是用来对应的SQL。所以Spring中可以将其做成单例，让其生命周期变为Application级别。</li><li><p>在Spring集成环境下，没有Mapper对应的xml可不可以。<br>MyBatis支持Annotation和Xml两种方式，只要他们的ID没有重复，可以以互补性兼容的方式共存，只选其一也是可以的。那么这两种方式有哪些优缺点呢：</p><ul><li>Mapper形式<ul><li>Pros<ol><li>跟接口分离便于统一管理</li><li>复杂语句可以不影响接口的可读性</li></ol></li><li>Cons<ol><li>过多的XML文件</li></ol></li></ul></li><li>Annotation形式<ul><li>Pros<ol><li>接口中就可以看到对应SQL语句，不需要xml，方便</li></ol></li><li>Cons<ol><li>复杂的联合查询不好维护、代码可读性差</li></ol></li></ul></li></ul></li><li><p>如果存在多个Plugin，谁会先执行，顺序是由什么决定的。<br>顺序是先注册的后执行，因为Plugin的原理是代理，而多个Plugin的时候，会根据先后顺序层层代理，最后注册反而是最外层的代理，所以会先执行。后续源码也会提到。</p></li></ol>]]></content>
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之适配器模式</title>
      <link href="/2018/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-16-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-16-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Convert the interface of a class into another interface clients expect.Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p></blockquote><p>适配器模式在生活中是很常见的，比如我们电脑上的电源适配器，又比如各种转接头。</p><h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p><img src="" alt=""></p><p>图中参与者：</p><ul><li><code>Client</code>：调用方。</li><li><code>Target</code>：目标角色，调用方需要使用的对象。</li><li><code>Adapter</code>：适配器对象，它是整个适配器模式的核心角色，它的作用是将源对象转换为目标对象。</li><li><code>Adaptee</code>：源对象，是需要被适配器转换为目标对象的对象。</li></ul><p>目标对象和源对象一般为已经存在且运行良好的类或对象。他们经过适配器的包装之后，可以转换为目标角色供系统调用。适配器需要持有这两种角色，而持有方式可以是继承也可以是组合。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ol><li>可以让两个本没有关系的类能够在一起工作。</li><li>提高了类的复用性。</li><li>灵活性好，即使以后不用了，再去掉也非常方便。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>适用场景</strong><ol><li>当需要使用一个已经存在的类，而它的接口并不符合所要求的情况。</li><li>当要适配多个子类时，可以考虑适配它们的父类。</li></ol></li></ul><p>适配器模式一般不会在设计阶段考虑，它不是为了解决设计开发阶段的问题，而是为了解决现有系统扩展延伸的问题，只有在扩展系统时，不符合原有设计才会考虑使用适配器模式来减少代码修改的风险。</p>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之模板方法模式</title>
      <link href="/2018/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-16-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-16-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Define the skeleton of an algorithm in an operation,deferring some steps to subclasses.Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><p>这个定义，相对来说已经比较容易理解了，如果还不理解，我们可以这样来想。银行的账单就可以理解为一个模板，它将公共的内容都已经定义好了，只有少量的地方，需要根据客户的不同，来去填充，这其实就是模板方法模式的思想。在定义中说<strong>定义一个操作中的算法的框架</strong>其实就是抽象出算法的固定逻辑或者步骤，放到抽象类中，也就是账单中的固定内容，<strong>而将一些步骤延迟到子类中</strong>便是说将某些步骤由子类根据其需要去个性化实现，但是整体算法的结构是没有改变过的，而这些子类就是对应使用账单的不同客户。</p><h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p><img src="http://oss-blog.felixu.top/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg" alt="模版方法模式结构图"></p><p>图中参与者：</p><ul><li><code>AbstractClass</code>：抽象模板，也就是定义中的算法框架。</li><li><code>ConcreteClass</code>：具体模版，继承自抽象模版，根据需要具体实现抽象模板中的抽象方法。</li></ul><p>在抽象模版中有两类方法：</p><ul><li><strong>基本方法</strong>：是由子类实现，并在模板方法中被调用的方法。</li><li><strong>模板方法</strong>：算法框架中实现对基本方法的调度，完成固定的逻辑，一般为<code>final</code>。</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>抽象模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getCustomerType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"尊贵的"</span> + getCustomerType() + <span class="string">"客户，您本月的账单金额为：%.2f元"</span>, getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatinumCardBill</span> <span class="keyword">extends</span> <span class="title">Bill</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCustomerType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"白金卡"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000.34</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackCardBill</span> <span class="keyword">extends</span> <span class="title">Bill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCustomerType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"黑卡"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">234567.89</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> BlackCardBill().getBill());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> PlatinumCardBill().getBill());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">尊贵的黑卡客户，您本月的账单金额为：234567.89元</span><br><span class="line">尊贵的白金卡客户，您本月的账单金额为：1000.34元</span><br></pre></td></tr></table></figure><p>这里以最简单的例子描述了模板方法模式的过程</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ol><li>封装公共不变部分的代码，扩展可变部分，便于维护。</li><li>由父类控制其算法的行为，由子类去具体实现。</li></ol><p><strong>缺点</strong>：</p><ol><li>提高了代码的复杂度，阅读难度加大。因为正常是抽象类负责最抽象的部分，由子类实现调用父类的方法，完成调用逻辑。而模板方法模式则是相反，子类实现影响父类模板方法的调用结果。正是这种倒置行为导致了代码复杂度增加。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>使用场景</strong><ol><li>多个类的逻辑基本相同，可以抽取其公共部分，差异化部分由子类实现。</li><li>模板方法模式中，模板方法部分是稳定不变的，基本方法是各子类的扩展点。</li><li>重构代码时，可以将相同代码抽取到模板中，然后通过钩子方法(Hook Method)来控制其模板行为。</li></ol></li><li><strong>特点</strong><ol><li>模板方法通过扩展子类来增加其行为，是符合开闭原则的。</li><li>基本方法应该用<code>protected</code>修饰，保证只有子类可以访问。</li></ol></li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之委派模式</title>
      <link href="/2018/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-16-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-16-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>委派模式不属于23种经典设计模式之一，但是他是面向对象设计模式中一种常用的模式。它像是结合了静态代理和策略模式。其原理是B和A是两个没有任何关系的类，B和A具有一模一样的方法和属性；并且调用B中的方法或者属性就是调用A中同名的方法或者属性。B对于A而言就是一个授权委托者。全部事情找到的是B但实际做事的却是A。第三方代码不需要知道A的存在，也不需要和A有任何联系，就可以通过B使用A的功能。</p><h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之策略模式</title>
      <link href="/2018/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-08-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-08-08-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Define a family of algorithms,encapsulate each one,and make them interchangeable.定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p></blockquote><p>从策略模式的定义来说，可能不那么好理解，其实策略模式可以说是为达到某一目的，而采取不同的手段，其本质是目标与手段分离，使用者只关注结果，而不关注具体实现过程，具体使用哪个实现会依据场景来选择。举例来说就比如我们的网上购物的支付方式、去某地旅游的不同出行方式等等，都可以认为是策略模式。</p><h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p><img src="http://oss-blog.felixu.top/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg" alt="策略模式结构图"></p><p>图中的参与者：</p><ul><li><code>Strategy</code>：抽象的策略接口</li><li><code>ConcreteStrategy</code>：具体的策略实现</li><li><code>Context</code>：对策略的封装，调用者调用<code>Context</code></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>以我们选择支付方式来演示策略模式，假设我们有两种支付方式，支付宝支付和微信支付。现在我们开始一步步完成代码。</p><p>支付的抽象接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支付方式的抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line">    <span class="function">PayResult <span class="title">pay</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支付宝实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支付宝支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PayResult <span class="title">pay</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PayResult(OrderConstants.Status.PAY_DONE, <span class="string">"使用支付宝支付了"</span> + order.getPrice() + <span class="string">"元，支付成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信支付实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信支付</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatPay</span> <span class="keyword">implements</span> <span class="title">Payment</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PayResult <span class="title">pay</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PayResult(OrderConstants.Status.PAY_DONE, <span class="string">"使用微信支付了"</span> + order.getPrice() + <span class="string">"元，支付成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订单实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String id, <span class="keyword">double</span> price, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支付结果封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PayResult</span><span class="params">(<span class="keyword">int</span> status, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderConstants</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> WAIT_PAY = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> PAY_DONE = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PayEnum &#123;</span><br><span class="line">    ALI_APY() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PayResult <span class="title">pay</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AliPay().pay(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WECHAT_PAY() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PayResult <span class="title">pay</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WechatPay().pay(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> PayResult <span class="title">pay</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order(<span class="string">"1"</span>, <span class="number">23.45</span>, OrderConstants.Status.WAIT_PAY);</span><br><span class="line">        <span class="comment">// 这里我们可以用枚举来选择相应的支付方式</span></span><br><span class="line">        PayResult result = PayEnum.ALI_APY.pay(order);</span><br><span class="line">        System.out.println(result.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用微信支付 --&gt; 使用微信支付了23.45元，支付成功！</span><br><span class="line">使用支付宝支付 --&gt; 使用支付宝支付了23.45元，支付成功！</span><br></pre></td></tr></table></figure><p>简单的认为购物整个过程是像下图这样的，策略模式则是支付这一环节，我们封装了具体的支付细节，根据用户的相关参数，相关场景去动态选择真正的支付逻辑。</p><p><img src="http://oss-blog.felixu.top/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%94%AF%E4%BB%98%E6%A8%A1%E6%8B%9F.jpg" alt="支付模拟"></p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ol><li>基于继承实现，部分通用代码可以共用，减少重复代码。</li><li>避免了多重条件判断(if/else、switch等)。</li></ol><p><strong>缺点</strong>：</p><ol><li>调用者需要知道所有策略，并决定使用哪一种策略。</li><li>功能较为复杂时，可能会造成产生大量策略类。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><strong>使用场景</strong></p><p>策略模式是一个非常简单的模式。它在项目中使用得非常多，但它单独使用的地方就比较少了，因为它有致命缺陷：所有的策略都需要暴露出去，这样才方便客户端决定使用哪一个策略。而且在策略较多时，对策略类的管理将会是一个相对比较头疼的问题，所有很多时候，我们会结合工厂来解决管理和产生策略类的问题。那么一般在哪些情况下可能会用到策略模式呢。</p><ol><li>当多个类，区别仅在于行为上的不同，在不同的场景下分别使用不同的类，那么我们就可以使用策略模式，来让这多个类，在不同的场景下动态切换。</li><li>需要动态选择不同算法，且客户不关心算法细节的时候，我们可以使用策略模式来对算法进行抽象和封装。</li></ol></li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式汇总</title>
      <link href="/2018/04/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-05-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2018/04/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-05-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<blockquote><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。只有精通了设计模式，才敢说真正理解了软件工程。可以说，设计模式是每一个架构师所必备的技能之一。</p></blockquote><h2 id="六大设计原则"><a href="#六大设计原则" class="headerlink" title="六大设计原则"></a>六大设计原则</h2><ul><li><input name="subject" type="checkbox" checked="checked" disabled="true"> <a href="https://blogs.felixu.top/2018/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-01-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/">单一职责原则(Single Responsibility Principle)</a> </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">里氏替换原则(Liskov Substitution Principle)</a>      </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">依赖倒置原则(Dependence Inversion Principle)</a>       </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">接口隔离原则(Interface Segregation Principle)</a>     </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">迪米特法制(Law Of Demeter)</a>     </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">开闭原则(Open Close Principle)</a></li></ul><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><ul><li><input name="subject" type="checkbox" checked="checked" disabled="true"> <a href="https://blogs.felixu.top/2018/04/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-04-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">工厂方法模式(Factory Method Pattern)</a>    </li><li><input name="subject" type="checkbox" checked="checked" disabled="true"> <a href="https://blogs.felixu.top/2018/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-03-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">抽象工厂模式(Abstract Factory Pattern)</a></li><li><input name="subject" type="checkbox" disabled="true"> <a href="">建造者模式(Builder Pattern)</a>    </li><li><input name="subject" type="checkbox" checked="checked" disabled="true"> <a href="https://blogs.felixu.top/2018/03/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-03-09-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/">原型模式(Prototype Pattern)</a>    </li><li><input name="subject" type="checkbox" checked="checked" disabled="true"> <a href="https://blogs.felixu.top/2018/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-01-16-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">单例模式(Singleton Pattern)</a></li></ul><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><ul><li><input name="subject" type="checkbox" disabled="true"> <a href="">适配器模式(Adapter Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">桥接模式(Bridge Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">组合模式(Composite Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">装饰者模式(Decorator Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">门面模式(Facade Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">享元模式(Flyweight Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">代理模式(Proxy Pattern)</a>    </li></ul><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2><ul><li><input name="subject" type="checkbox" disabled="true"> <a href="">解释器模式(Interpreter Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">模板方法模式(Template Method Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">责任链模式(Chain Of Responsibility Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">命令模式(Command Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">迭代器模式(Iterator Pattern)</a>     </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">调解者模式(Mediator Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">备忘录模式(Memento Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">观察者模式(Observer Pattern)</a>    </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">状态模式(State Pattern)</a>     </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">策略模式(Strategy Pattern)</a>     </li><li><input name="subject" type="checkbox" disabled="true"> <a href="">访问者模式(Visitor Pattern)</a>  </li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之抽象工厂模式</title>
      <link href="/2018/04/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-04-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-04-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>前面讲了工厂方法模式、简单工厂，这里接着讲讲抽象工厂模式。我们知道了，工厂方法模式，其实就是屏蔽了产生对象的细节，而只对调用需要的结果负责。那么抽象工厂模式又是什么呢，又和工厂方法模式有什么关系呢      </p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.（为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类）</p></blockquote><p>其实抽象工厂模式是工厂方法模式的升级，工厂方法模式是针对于一个产品的，而抽象工厂模式是针对于一组产品而言的。那么怎么理解这个产品组呢。</p><p>以前面造车为例：</p><ul><li>工厂方法模式中，车只有一个抽象，工厂创建的是一个一个的产品实例</li><li>抽象工厂模式中，车会被再次抽象，工厂创建的是同一个产品族的产品，比如同属于SUV，或者同属于轿车</li><li>可以说工厂方法模式是一对多的概念(即：一个产品等级结构对应着多个产品实现)，而抽象工厂模式则是多对多的概念(即：有多个产品等级结构，每个产品等级结构对应着多个产品实现)。</li></ul><h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p><img src="http://oss-blog.felixu.top/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg" alt="抽象工厂模式"></p><p>图中的参与者：</p><ul><li><code>AbstractProduct</code>：一类产品的抽象</li><li><code>Product</code>：产品的具体实现</li><li><code>AbstractFactory</code>：抽象工厂</li><li><code>Factory</code>：工厂的具体实现</li><li><code>Client</code>：调用方</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>还是以车为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车的最顶层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宝马牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBmw</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是宝马牌"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBenz</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是奔驰牌"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们实现宝马牌的两个实现，奔驰类似，就不重复给出了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轿车实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BmwA</span> <span class="keyword">extends</span> <span class="title">AbstractBmw</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是小汽车"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SUV实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BmwB</span> <span class="keyword">extends</span> <span class="title">AbstractBmw</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是SUV吧"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂以及工厂实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractBmw <span class="title">createBmw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractBenz <span class="title">createBenz</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轿车工厂</span></span><br><span class="line"><span class="comment"> * 创建的是轿车产品族的产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractBmw <span class="title">createBmw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BmwA();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractBenz <span class="title">createBenz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenzA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SUV工厂</span></span><br><span class="line"><span class="comment"> * 创建的是SUV产品族的产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuvFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractBmw <span class="title">createBmw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BmwB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractBenz <span class="title">createBenz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenzB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFactory factoryA = <span class="keyword">new</span> CarFactory();</span><br><span class="line">        AbstractFactory factoryB = <span class="keyword">new</span> SuvFactory();</span><br><span class="line">        <span class="comment">// 想要一辆宝马的SUV</span></span><br><span class="line">        AbstractBmw bmw = factoryB.createBmw();</span><br><span class="line">        System.out.println(bmw.getName() + <span class="string">" "</span> + bmw.getType());</span><br><span class="line">        <span class="comment">//想要一辆奔驰的小轿车</span></span><br><span class="line">        AbstractBenz benz = factoryA.createBenz();</span><br><span class="line">        System.out.println(benz.getName() + <span class="string">" "</span> + benz.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是SUV吧 我是宝马牌</span><br><span class="line">我是小轿车 我是奔驰牌</span><br></pre></td></tr></table></figure><p>SUV和小轿车就是所谓的产品族了，他们同属于同一产品族，或者叫相同的产品等级结构。对于产品族的划分也会有不同的考虑点，这里就不再展开。</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ol><li>良好的封装性，不需要关注对象如何创建，屏蔽细节部分。</li><li>产品族内约束，隐式对产品族内进行了约束。</li></ol><p><strong>缺点</strong>：产品族的扩展会很难，当有新的产品族加入，代码会有较大改变，违反开闭原则。 </p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，便可以使用抽象工厂模式。说的更明白一点，就是一个继承体系中，如果存在着多个等级结构（即存在着多个抽象类），并且分属各个等级结构中的实现类之间存在着一定的关联或者约束，就可以使用抽象工厂模式。假如各个等级结构中的实现类之间不存在关联或约束，则使用多个独立的工厂来对产品进行创建，则更合适一点。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>无论是简单工厂模式，工厂方法模式，还是抽象工厂模式，他们都属于工厂模式，在形式和特点上也是极为相似的，他们的最终目的都是为了解耦。在使用时，我们不必去在意这个模式到底工厂方法模式还是抽象工厂模式，因为他们之间的演变常常是令人琢磨不透的。经常你会发现，明明使用的工厂方法模式，当新需求来临，稍加修改，加入了一个新方法后，由于类中的产品构成了不同等级结构中的产品族，它就变成抽象工厂模式了；而对于抽象工厂模式，当减少一个方法使的提供的产品不再构成产品族之后，它就演变成了工厂方法模式。所以，在使用工厂模式时，只需要关心降低耦合度的目的是否达到了。</p>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之工厂方法模式</title>
      <link href="/2018/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-03-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-04-03-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>工厂方法模式总体来说就是，屏蔽了产品创建的细节，只操作工厂，从工厂中获得想要的产品。</p><p>工厂模式有三种：</p><ol><li><strong>简单工厂模式</strong></li><li><strong>工厂方法模式</strong></li><li><strong>抽象工厂模式</strong></li></ol><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>这种模式，并不属于23种设计模式，它是工厂方法模式的简化，也称作是静态工厂模式(Static Factory Pattern)。简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="http://oss-blog.felixu.top/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg" alt="简单工厂模式"></p><p>图中的参与者：</p><ul><li><code>IProduct</code>：产品抽象类。</li><li><code>ProductA</code>：具体实现类A。</li><li><code>ProductB</code>： 具体实现类B。</li><li><code>Factory</code>：工厂类，用于创建产品。</li><li><code>Client</code>： 客户端，调用工厂创建产品的。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>以车为上图中的<code>IProduct</code>来做个简单的演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车的抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车的具体实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Benz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车的具体实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BMW"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道在不使用工厂的情况下，我们创建车的实例，需要这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不使用工厂的情况下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ICar car = <span class="keyword">new</span> Benz();</span><br><span class="line">        System.out.println(<span class="string">"没有工厂时，我们造了一辆车，它是："</span> + car.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没有工厂时，我们造了一辆车，它是：Benz</span><br></pre></td></tr></table></figure><p>在使用简单工厂模式的情况下，我们需要增加工厂实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICar <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"BMW"</span>.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BMW();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Benz"</span>.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"car's name is not exist"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clinet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = SimpleFactory.getCar(<span class="string">"BMW"</span>);</span><br><span class="line">        System.out.println(<span class="string">"通过工厂，我们得到一辆想要的车，它是："</span> + car.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过工厂，我们得到一辆想要的车，它是：BWM</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点</strong>：隔离创建和使用，屏蔽了对象创建的细节。</p><p><strong>缺点</strong>：违反了<a href="www.baidu.com">开闭原则</a>，不利于扩展。</p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>工厂方法模式是由接口定义创建对象的方法，而具体实现延迟到子类中去实现</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构<img src="http://oss-blog.felixu.top/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg" alt="工厂方法模式"></h2><p>图上参与者：</p><ul><li><code>IProduct</code>：产品抽象类。</li><li><code>ProductA</code>： 具体产品实现A。</li><li><code>ProdcutB</code>：具体产品实现B。</li><li><code>AbstractFactory</code>： 抽象工厂，定义创建接口的方法，具体由其子类去实现。</li><li><code>Factory</code>：工厂实现，具体创建产品的方法。</li><li><code>Clent</code>： 调用方。</li></ul><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>同样我们还以之前车的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车的抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车的具体实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Benz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车的具体实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BMW"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryImpl</span> <span class="keyword">implements</span> <span class="title">ICarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends ICar&gt; <span class="function">T <span class="title">createCar</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        T instance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            instance = clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ICarFactory carFactory = <span class="keyword">new</span> CarFactoryImpl();</span><br><span class="line">        ICar car = carFactory.createCar(Benz.class);</span><br><span class="line">        System.out.println(<span class="string">"使用工厂方法模式，我们得到一辆想要的车，它是："</span> + car.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用工厂方法模式，我们得到一辆想要的车，它是：Benz</span><br></pre></td></tr></table></figure><h2 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点</strong>：</p><ol><li>优秀的拓展性。</li><li>良好的封装性。</li><li>屏蔽具体产品类。</li><li>解耦合。</li></ol><p><strong>缺点</strong>：增加了代码的复杂度。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><strong>工厂方法模式和简单工厂模式</strong>     </p><p>简单工厂模式是工厂方法模式的弱化，因为简单，所以叫做简单工厂模式，也叫做静态工厂模式。它就是去掉了抽象工厂，把创建实例对象的方法变为静态方法。但它其实是不符合开闭原则的，不难想象，这样的工厂其实是很难去扩展的，当然，在产品部分它是符合开闭原则的，而工厂方法模式是符合开闭原则的，但是会增加代码的复杂度。现实中其实简单工厂模式是很少会被使用的。</p></li><li><p><strong>使用场景</strong>  </p><p>既然工厂方法模式有这么多的好处，那我们是不是就要经常去使用它呢，也不完全是这样的，因为通过上面的案例也可以看到，它相比我们直接<code>new</code>对象，明显多了一些类，增加了代码的复杂度。所以我们也需要考虑它的使用场景：</p><ol><li>需要灵活可扩展的框架时，比如<code>JDBC</code>连接数据库，我们可能用<code>Mysql</code>也可能用<code>Oracle</code>，只需要切换驱动就行了</li><li>当调用方不需要知道对象创建过程 </li></ol></li><li><p><strong>拓展</strong></p><p>工厂模式会有多种形态，不必去拘泥小节，比如，不在工厂实现中使用反射，而是每个产品对应一个自己的工厂，这种也同样是工厂方法模式，也有人称之为多工厂模式，但总归是工厂方法模式的一种类型。</p></li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之原型模式</title>
      <link href="/2018/03/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-03-09-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-03-09-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Specify the kinds of objects to create using a prototypical instance,and create new objects by copying this prototype.用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><h1 id="复制对象和复制引用"><a href="#复制对象和复制引用" class="headerlink" title="复制对象和复制引用"></a>复制对象和复制引用</h1><p>对象是存储在堆中的，而引用是存储在栈中的，引用通过地址找到真实的对象</p><p><strong>复制引用</strong>只是将对象的地址赋值给一个新的变量，完成引用的复制</p><p><strong>复制对象</strong>是需要在堆中重新分配一块与目标对象一模一样大小的空间，将其地址赋值给新的变量 </p><p>下面我们来举例说明：</p><p>先创建一个<code>Person</code>类       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sex <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个<code>Sex</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sex</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Sex sex = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sex = (Sex) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"felixu"</span>, <span class="number">26</span>, <span class="keyword">new</span> Sex(<span class="string">"男"</span>));</span><br><span class="line">        <span class="comment">// 复制引用，我们都知道，p其实是对象的引用，指向对象真实地址</span></span><br><span class="line">        Person p1 = p;</span><br><span class="line">        System.out.println(<span class="string">"复制引用:"</span> + p1 + <span class="string">" 姓名:"</span> + p1.getName() + <span class="string">" 年龄:"</span> + p1.getAge() + <span class="string">" 性别:"</span> + p1.getSex());</span><br><span class="line">        <span class="comment">// 复制对象，重新申请空间，将对象复制到新的空间上</span></span><br><span class="line">        Person p2 = (Person) p.clone();</span><br><span class="line">        System.out.println(<span class="string">"复制对象:"</span> + p2 + <span class="string">" 姓名:"</span> + p2.getName() + <span class="string">" 年龄:"</span> + p2.getAge() + <span class="string">" 性别:"</span> + p2.getSex());</span><br><span class="line">        System.out.println(<span class="string">"原始对象:"</span> + p + <span class="string">" 姓名:"</span> + p.getName() + <span class="string">" 年龄:"</span> + p.getAge() + <span class="string">" 性别:"</span> + p.getSex());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">复制引用:top.felixu.Person@511d50c0 姓名:felixu 年龄:26 性别:top.felixu.Sex@60e53b93</span><br><span class="line">复制对象:top.felixu.Person@5e2de80c 姓名:felixu 年龄:26 性别:top.felixu.Sex@60e53b93</span><br><span class="line">原始对象:top.felixu.Person@511d50c0 姓名:felixu 年龄:26 性别:top.felixu.Sex@60e53b93</span><br></pre></td></tr></table></figure></p><p>复制对象和复制引用可以用下面的图来表示<br><img src="http://felixu-blog.oss-cn-hangzhou.aliyuncs.com/Design%20Pattern/2018-03-13/%E5%BC%95%E7%94%A8%E5%A4%8D%E5%88%B6%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6.jpeg" alt="对象复制和引用复制"></p><div align="center" style="color:gray;">(左边为复制引用，右边为复制对象)</div><h1 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h1><p>在解释深拷贝和浅拷贝前，我们先了解一下<code>clone</code>对象和<code>new</code>对象有什么区别：</p><p><strong>new</strong>：需要先分配空间，调用构造函数，初始化对象，将地址的引用赋值给某个变量，以便外部使用和操作这个对象。</p><p><strong>clone</strong>：先分配一块与目标对象一样大小的空间，用原对象的各个域填充当前clone的对象，然后将地址的引用赋值给某个变量，以便外部使用和操作这个对象。</p><p>那什么又是浅拷贝和深拷贝呢，我们还用之前的例子来说明，<code>Person</code>和<code>Sex</code>类不变。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"felixu"</span>, <span class="number">26</span>, <span class="keyword">new</span> Sex(<span class="string">"man"</span>));</span><br><span class="line">        Person p1 = (Person) p.clone();</span><br><span class="line">        System.out.println(<span class="string">"原始对象:"</span> + p + <span class="string">" 姓名:"</span> + p.getName() + <span class="string">" 年龄:"</span> + p.getAge() + <span class="string">" 性别:"</span> + p.getSex());</span><br><span class="line">        System.out.println(<span class="string">"原始对象:"</span> + p1 + <span class="string">" 姓名:"</span> + p.getName() + <span class="string">" 年龄:"</span> + p1.getAge() + <span class="string">" 性别:"</span> + p1.getSex());</span><br><span class="line">        System.out.println(<span class="string">"是否为同一个对象:"</span> + (p == p1));</span><br><span class="line">        System.out.println(<span class="string">"是否为浅拷贝:"</span> + (p.getSex() == p1.getSex()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原始对象:top.felixu.Person@511d50c0 姓名:felixu 年龄:26 性别:top.felixu.Sex@60e53b93</span><br><span class="line">原始对象:top.felixu.Person@5e2de80c 姓名:felixu 年龄:26 性别:top.felixu.Sex@60e53b93</span><br><span class="line">是否为同一个对象:false</span><br><span class="line">是否为浅拷贝:true</span><br></pre></td></tr></table></figure></p><p><code>jdk</code>的<code>clone</code>方法执行的是对象的浅拷贝，即只拷贝了对象，对象中的引用变量拷贝的还是它的引用，从结果中可以看到，对象虽然不是同一个对象，但是对于性别，两个对象引用的还是同一个</p><p>浅拷贝的示意图：<img src="http://felixu-blog.oss-cn-hangzhou.aliyuncs.com/Design%20Pattern/2018-03-13/%E6%B5%85%E6%8B%B7%E8%B4%9D.jpeg" alt="浅拷贝">       </p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>想要实现深拷贝，必须重新实现<code>clone</code>方法      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person1</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person1</span><span class="params">(String name, <span class="keyword">int</span> age, Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sex <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person1 person = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            person = (Person1) <span class="keyword">super</span>.clone();</span><br><span class="line">            sex = (Sex) sex.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person1 p = <span class="keyword">new</span> Person1(<span class="string">"felixu"</span>, <span class="number">26</span>, <span class="keyword">new</span> Sex(<span class="string">"man"</span>));</span><br><span class="line">        Person1 p1 = (Person1) p.clone();</span><br><span class="line">        System.out.println(<span class="string">"原始对象:"</span> + p + <span class="string">" 姓名:"</span> + p.getName() + <span class="string">" 年龄:"</span> + p.getAge() + <span class="string">" 性别:"</span> + p.getSex());</span><br><span class="line">        System.out.println(<span class="string">"原始对象:"</span> + p1 + <span class="string">" 姓名:"</span> + p.getName() + <span class="string">" 年龄:"</span> + p1.getAge() + <span class="string">" 性别:"</span> + p1.getSex());</span><br><span class="line">        System.out.println(<span class="string">"是否为同一个对象:"</span> + (p == p1));</span><br><span class="line">        System.out.println(<span class="string">"是否为浅拷贝:"</span> + (p.getSex() == p1.getSex()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原始对象:top.felixu.deep.Person1@511d50c0 姓名:felixu 年龄:26 性别:top.felixu.Sex@60e53b93</span><br><span class="line">原始对象:top.felixu.deep.Person1@5e2de80c 姓名:felixu 年龄:26 性别:top.felixu.Sex@1d44bcfa</span><br><span class="line">是否为同一个对象:false</span><br><span class="line">是否为浅拷贝:false</span><br></pre></td></tr></table></figure></p><p>此时我们可以看的，对于对象内部的<code>Sex</code>和复制后的对象也是不一样的，此时也就实现类对象的深拷贝。但是这真的深拷贝吗，其实也仅仅算是深拷贝，并不是彻底的深拷贝 。深拷贝需要目标对象中的引用类型变量也要去实现<code>Cloneable</code>接口，在目标对象实现<code>clone</code>方法时，也需要将引用变量拷贝，这在现实中其实是很难做到的，而且有的已存在对象，可能本身并没有实现<code>Cloneable</code>接口。</p><p>深拷贝示意图：<img src="http://felixu-blog.oss-cn-hangzhou.aliyuncs.com/Design%20Pattern/2018-03-13/%E6%B7%B1%E6%8B%B7%E8%B4%9D.jpeg" alt="深拷贝">      </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>原型模式，其实就是通过<code>clone</code>已存在的模型，产生新的对象。         </li><li><code>clone</code>在平时开发中也很少使用，深拷贝并不那么好实现，彻底的深拷贝实际中基本是不存在的。</li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之代理模式</title>
      <link href="/2018/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-03-02-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-03-02-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>代理模式是一种使用率非常高的设计模式，它有这样的定义:</p><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问.      </p></blockquote><p>其实就是说，将原先对目标对象的访问转移到对代理对象的访问上了，这样做可以在保持目标对象不变的情况下，很好的拓展目标对象。</p><p>那么在什么情况下使用代理模式呢？可以总结为以下三点：</p><ol><li>两个角色：被代理对象、执行者。     </li><li>注重过程，一定要做的，但是自己又不做。      </li><li>执行者必须拿到被代理对象的资料。(执行者必须持有被代理对象的引用) </li></ol><p>满足以上条件就可以使用代理模式，生活中的例子也比比皆是，比如中介，比如黄牛，比如经纪人等等。。。    </p><p>常见的代理模式分为静态代理和动态代理，动态代理又分为<code>JDK</code>的动态代理和<code>CGLib</code>的动态代理。</p><h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>静态代理需要自己实现代理对象类。    </p><p>静态代理要求代理对象与被代理对象实现同一个接口，下面我们用找中介找房子做简单讲解：     </p><p>首先是接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findHouse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被代理对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Felixu</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"felixu"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---felixu---"</span>);</span><br><span class="line">        System.out.println(<span class="string">"I need beautiful house"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---felixu---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticIntermediary</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticIntermediary</span><span class="params">(Person target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---static intermediary---"</span>);</span><br><span class="line">        target.findHouse();</span><br><span class="line">        System.out.println(<span class="string">"oh~~~find one"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---static intermediary---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaticIntermediary obj = <span class="keyword">new</span> StaticIntermediary(<span class="keyword">new</span> Felixu());</span><br><span class="line">        obj.findHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到如下执行结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---static intermediary---</span><br><span class="line">---felixu---</span><br><span class="line">I need beautiful house</span><br><span class="line">---felixu---</span><br><span class="line">oh~~~find one</span><br><span class="line">---static intermediary---</span><br></pre></td></tr></table></figure></p><p>我们可以看到，通过静态代理，我们实现了对目标对象的拓展，但是缺点是这样并不灵活，一旦目标接口有改变，改动会很大。</p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>动态代理我们可以动态的获得代理对象。      </p><ol><li><p><code>JDK</code>代理      </p><p><code>JDK</code>的动态代理只能针对实现了接口的类生成代理。       </p><p>下面我们同样用上面的例子来说明：      </p><p>首先是接口    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findHouse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被代理对象        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Felixu</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"felixu"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---felixu---"</span>);</span><br><span class="line">        System.out.println(<span class="string">"I need beautiful house"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---felixu---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Intermediary</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Person target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        Class&lt;? extends Person&gt; clazz = target.getClass();</span><br><span class="line">        System.out.println(<span class="string">"obj is: "</span> + clazz);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---intermediary---"</span>);</span><br><span class="line">        method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"oh~find one"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---intermediary---"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person obj = (Person)<span class="keyword">new</span> Intermediary().getInstance(<span class="keyword">new</span> Felixu());</span><br><span class="line">        System.out.println(<span class="string">"proxy class is: "</span> + obj.getClass());</span><br><span class="line">        obj.findHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：         </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj is: class top.felixu.jdk.Felixu</span><br><span class="line">proxy class is: class com.sun.proxy.$Proxy0</span><br><span class="line">---intermediary---</span><br><span class="line">---felixu---</span><br><span class="line">I need beautiful house</span><br><span class="line">---felixu---</span><br><span class="line">oh~find one</span><br><span class="line">---intermediary---</span><br></pre></td></tr></table></figure><p>为了理解jdk动态代理的原理，我们可以自己手动实现<code>JDK</code>的动态代理。首先我们来分析整个过程，我们发现，首先是，我们需要个<code>InvocationHandler</code>的<code>invoke</code>方法，其次是<code>Proxy</code>的<code>newProxyInstance</code>方法，当然还有<code>ClassLoader</code>的<code>findClass</code>，整个过程，其实就是字节码重组的过程，所以在生成代理对象的时候，一共有以下几个过程:     </p><ul><li>生成源代码</li><li>将源代码输出到磁盘</li><li>编译源代码生成class文件</li><li>将class文件加载到jvm中</li><li>返回被代理后的对象  </li></ul><p>接下来就带着代码一起看吧：<br>首先，我们需要一个自己的InvocationHandler，好吧，直接从jdk中的InvocationHandler复制过来就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参照之前jdk的，我们知道，接下来应该是需要Proxy和ClassLoader了，那我们先完成ClassLoader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File baseDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String path = MyClassLoader.class.getResource(<span class="string">""</span>).getPath();</span><br><span class="line">        <span class="keyword">this</span>.baseDir = <span class="keyword">new</span> File(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        String className = MyClassLoader.class.getPackage().getName() + <span class="string">"."</span> + name;</span><br><span class="line">        <span class="keyword">if</span> (baseDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File classFile = <span class="keyword">new</span> File(baseDir, name.replace(<span class="string">"\\."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>);</span><br><span class="line">            <span class="keyword">if</span> (classFile.exists()) &#123;</span><br><span class="line">                FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">                ByteArrayOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                    out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = in.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        out.write(buff, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> defineClass(className, out.toByteArray(), <span class="number">0</span>, out.size());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != in) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            in.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != out) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            out.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    classFile.delete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们完成Proxy，要生成代理对象，就要用到我们上面提到的几个过程了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String ln = <span class="string">"\r\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(MyClassLoader loader, Class&lt;?&gt;[] interfaces, MyInvocationHandler h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.生成源代码</span></span><br><span class="line">            String proxySrc = generateSrc(interfaces[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.将源代码输出到磁盘</span></span><br><span class="line">            String path = MyProxy.class.getResource(<span class="string">""</span>).getPath();</span><br><span class="line">            File file = <span class="keyword">new</span> File(path + <span class="string">"$Proxy0.java"</span>);</span><br><span class="line">            FileWriter writer = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">            writer.write(proxySrc);</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.编译源代码生成class文件</span></span><br><span class="line">            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">            StandardJavaFileManager manager = compiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            Iterable&lt;? extends JavaFileObject&gt; iterable = manager.getJavaFileObjects(file);</span><br><span class="line">            JavaCompiler.CompilationTask task = compiler.getTask(<span class="keyword">null</span>, manager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, iterable);</span><br><span class="line">            task.call();</span><br><span class="line">            manager.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.将class文件加载到jvm中</span></span><br><span class="line">            Class&lt;?&gt; proxyClass = loader.findClass(<span class="string">"$Proxy0"</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = proxyClass.getConstructor(MyInvocationHandler.class);</span><br><span class="line">            file.delete();</span><br><span class="line">            <span class="comment">// 5.返回被代理后的对象</span></span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(h);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">generateSrc</span><span class="params">(Class&lt;?&gt; interfaces)</span> </span>&#123;</span><br><span class="line">        StringBuffer src = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        src.append(<span class="string">"package top.felixu.my;"</span> + ln);</span><br><span class="line">        src.append(ln);</span><br><span class="line">        src.append(<span class="string">"import java.lang.reflect.Method;"</span> + ln);</span><br><span class="line">        src.append(ln);</span><br><span class="line">        src.append(<span class="string">"public class $Proxy0 implements "</span> + interfaces.getName() + <span class="string">"&#123;"</span> + ln);</span><br><span class="line">        src.append(<span class="string">"MyInvocationHandler h;"</span> + ln);</span><br><span class="line">        src.append(<span class="string">"public $Proxy0(MyInvocationHandler h) &#123;"</span> + ln);</span><br><span class="line">        src.append(<span class="string">"this.h = h;"</span> + ln);</span><br><span class="line">        src.append(<span class="string">"&#125;"</span> + ln);</span><br><span class="line">        <span class="keyword">for</span> (Method method : interfaces.getMethods()) &#123;</span><br><span class="line">            src.append(<span class="string">"public "</span> + method.getReturnType().getName() + <span class="string">" "</span> + method.getName() + <span class="string">"() &#123;"</span> + ln);</span><br><span class="line">            src.append(<span class="string">"try &#123;"</span> + ln);</span><br><span class="line">            src.append(<span class="string">"Method m = "</span> + interfaces.getName() + <span class="string">".class.getMethod(\""</span> + method.getName() + <span class="string">"\", new Class[]&#123;&#125;);"</span> + ln);</span><br><span class="line">            src.append(<span class="string">"this.h.invoke(this, m, null);"</span> + ln);</span><br><span class="line">            src.append(<span class="string">"&#125; catch(Throwable e) &#123;"</span> + ln);</span><br><span class="line">            src.append(<span class="string">"e.printStackTrace();"</span> + ln);</span><br><span class="line">            src.append(<span class="string">"&#125;"</span> + ln);</span><br><span class="line">            src.append(<span class="string">"&#125;"</span> + ln);</span><br><span class="line">        &#125;</span><br><span class="line">        src.append(<span class="string">"&#125;"</span>);</span><br><span class="line">        <span class="keyword">return</span> src.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就差不多完成了，好了，我们还安装之前jdk的方式，我们写个代理类，然后写个测试，跑一下看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntermediary</span> <span class="keyword">implements</span> <span class="title">MyInvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Person target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        Class&lt;? extends Person&gt; clazz = target.getClass();</span><br><span class="line">        System.out.println(<span class="string">"obj is: "</span> + clazz);</span><br><span class="line">        <span class="keyword">return</span> MyProxy.newProxyInstance(<span class="keyword">new</span> MyClassLoader(), clazz.getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---meipo---"</span>);</span><br><span class="line">        method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"oh~find one"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---meipo---"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person obj = (Person) <span class="keyword">new</span> MyIntermediary().getInstance(<span class="keyword">new</span> Felixu());</span><br><span class="line">        System.out.println(<span class="string">"proxy class is: "</span> + obj.getClass());</span><br><span class="line">        obj.findHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj is: class top.felixu.jdk.Felixu</span><br><span class="line">proxy class is: class top.felixu.my.$Proxy0</span><br><span class="line">---my intermediary---</span><br><span class="line">---felixu---</span><br><span class="line">I need beautiful house</span><br><span class="line">---felixu---</span><br><span class="line">oh~find one</span><br><span class="line">---my intermediary---</span><br></pre></td></tr></table></figure></li><li><p><code>CGLib</code>代理</p><p><code>CGLib</code>采用了非常底层的字节码技术，其原理是通过字节码技术为一个类生成它的子类，并在子类中拦截所有父类方法，顺势植入横切逻辑。由于<code>CGLib</code>的这种机制，被代理对象不可以是<code>final</code>的，<code>final/static</code>的方法也将不会被拦截。            </p><p>还以之前的中介为例：            </p><p>被代理对象          </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Felixu</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"felixu"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---felixu---"</span>);</span><br><span class="line">        System.out.println(<span class="string">"I need beautiful house"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---felixu---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象            </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CgIntermediary</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">enhancer.setSuperclass(clazz);</span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---cg intermediary---"</span>);</span><br><span class="line">        proxy.invokeSuper(obj, args);</span><br><span class="line">        System.out.println(<span class="string">"---cg intermediary---"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Felixu obj = (Felixu)<span class="keyword">new</span> CgIntermediary().getInstance(Felixu.class);</span><br><span class="line">obj.findHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---cg intermediary---</span><br><span class="line">---felixu---</span><br><span class="line">I need beautiful house</span><br><span class="line">---felixu---</span><br><span class="line">---cg intermediary---</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>使用代理模式要满足三个必要条件，不再赘述</li><li><code>CGLib</code>不需要接口外，其他都需要接口</li><li>所谓代理模式，在<code>Java</code>中其实最核心的就是字节码重组。<ol><li>持有被代理对象的引用，反射获取所有接口。</li><li>重新生成新的类实现被代理的所有方法。</li><li>动态生成Java代码，织入增强逻辑。</li><li>编译新的类生成<code>class</code>文件。</li><li>加载到<code>JVM</code>中运行。</li></ol></li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>23种设计模式之单例模式</title>
      <link href="/2018/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-01-16-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-01-16-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>单例模式是一种被广泛使用的设计模式，确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例        。</p><h1 id="单例的几种实现方式"><a href="#单例的几种实现方式" class="headerlink" title="单例的几种实现方式"></a>单例的几种实现方式</h1><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>饿汉式的单例模式是最简单的一种单例实现方式</p><p><strong>优点</strong>：类加载的时候创建一次实例，后面不会再创建，避免了线程同步的问题。</p><p><strong>缺点</strong>：即便这个实例没有用到也会被创建，浪费内存</p><p>实现饿汉式的单例模式有以下方式：</p><ol><li><p>最简单的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其实这两种方式是完全一样的。可以看出通过这种方式实现单例，他会在类加载的时候就去完成实例化，所以不存在线程安全问题。但可能存在的问题是，不论这个类是否被用到，这个类始终存在，占据着内存空间</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>懒汉式的单例模式，是在需要用到时才会去实例化的，它主要有下面几种创建方式：</p><ol><li><p>这种方式<code>lazy loading</code>特性很明显，但是显然多线程下是有问题的，可能会造成产生多个实例。比如有两个线程A和B，A到达<code>if(instance == null)</code>，判断为<code>true</code>，执行实例化，而在A尚未完成初始化时，B线程到达判断，同样为<code>true</code>，这时就实例化了两次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这种方式跟上面的很相似，不同的是用锁解决了多线程同步问题，但是这样同样会有问题，<code>synchronized</code>锁会带来的性能问题(虽然经过优化后已经好很多了)，而且大多数情况下是根本不用同步的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="双重锁校验"><a href="#双重锁校验" class="headerlink" title="双重锁校验"></a>双重锁校验</h2><p>双重锁校验同样也属于是懒汉式的方式，只是做了一些优化。</p><ol><li><p>双重锁校验方式，这种方式解决了线程同步问题，也避开了多次执行<code>synchronized</code>同步代码块，从而提高了性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面的这种方式看似好像都考虑到了，是不是真的就很好呢，并不是的，它同样会有一些问题。问题在于，<code>Java</code>中的指令重排优化，所谓指令重排优化是指在不改变原来语义的前提下，通过调整指令顺序，从而提高程序运行效率。由于指令重排的存在，导致初始化<code>Singleton</code>和将对象地址赋给<code>instance</code>字段的顺序是不确定的。在某个线程创建单例对象时，在构造方法被调用之前，就为该对象分配了内存空间并将对象的字段设置为默认值。此时就可以将分配的内存地址赋值给<code>instance</code>字段了，然而该对象可能还没有初始化。若紧接着另外一个线程来调用<code>getInstance()</code>，取到的就是状态不正确的对象，程序就会出错。不过还好在<code>JDK 1.5</code>及之后版本增加了<code>volatile</code>关键字。<code>volatile</code>的一个语义是禁止指令重排序优化，也就保证了<code>instance</code>变量被赋值的时候对象已经是初始化过的，从而避免了上面说到的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ol><li><p>这种方式是利用类加载机制产生的实例，因此不存在线程问题。不同的是在内部类里面去创建对象实例，只要内部类不被调用，<code>JVM</code>就不会去加载这个单例类，也就不会创建实例对象，实现了<code>lazy loading</code>，既保证了延迟加载又避免了线程安全问题。属于一种懒汉式单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// static保证了共享</span></span><br><span class="line">    <span class="comment">// final保证了不会被子类重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>之前的方式呢，都有两个问题</p><ol><li>在序列化的时候需要做处理，否则在反序列化的时候，就可以多次复原，从而造成多实例。</li><li>可以使用反射强行调用私有构造器（如果要避免这种情况，可以修改构造器，让它在创建第二个实例的时候抛异常）。</li></ol><p>而枚举类很好的解决了这两个问题，使用枚举除了线程安全和防止反射调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。因此《Effective Java》作者推荐使用的方法。</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注册式"><a href="#注册式" class="headerlink" title="注册式"></a>注册式</h2><p>这种方式很少有提到，但是在Spring的源码中，ioc的实现方式就是使用了这种方式</p><ol><li><p>使用了一个<code>Map</code>来存储单例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BeanFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; ioc = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!ioc.containsKey(name)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            ioc.put(name, Class.forname(name)).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><strong>优点</strong>：</p><ol><li>可以保证程序中，一个类只有一个实例存在。能够避免实例对象的重复创建，不仅可以减少对象创建和销毁所产生的开销，还可以节约内存空间。</li><li>可以避免对资源的多重占用。</li><li>可以在系统设置全局的访问点，优化和共享资源访问。        </li></ol><p><strong>缺点</strong>：</p><ol><li>一般没有接口，很难扩展。</li><li>单例模式没有完成，无法进行mock测试，对测试不利。</li><li>与单一原则有冲突，一个类应该只实现一个逻辑，而不关心他是否是单例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>单例是相对于ClassLoader而言的，不同ClassLoader同样会导致单例失效       </li><li>对于这几种单例模式各自有优劣，不同的场景下可能会有不同的选择，我更倾向于使用双重校验锁的第二种方式，静态内部类和枚举的方式。</li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单一职责原则</title>
      <link href="/2018/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-01-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/"/>
      <url>/2018/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-2018-01-10-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/</url>
      <content type="html"><![CDATA[<blockquote><p>想要精通设计模式，必须要先搞清楚设计模式的六大原则。</p></blockquote><p>在开始设计模式之前，先来谈谈设计模式的六大设计原则，第一个便是单一职责原则<code>(Single Responsibility Principle)</code>了。</p><h2 id="单一职责原则定义"><a href="#单一职责原则定义" class="headerlink" title="单一职责原则定义"></a>单一职责原则定义</h2><blockquote><p>There should never be more than one reason for a class to change.   </p></blockquote><p>这句话意思很简单，不应该存在多于一个导致类变更的原因。通俗来说就是，一个类应该只有一项职责。</p><h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>我们设计这样一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsername</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显看到这样一个接口，谁都会觉得有问题，用户属性怎么可以和用户行为放在一起。肯定应该是用户属性放一起，用户行为放一起啊。</p><h2 id="单一职责解决问题"><a href="#单一职责解决问题" class="headerlink" title="单一职责解决问题"></a>单一职责解决问题</h2><p>对啊，根据这样的想法，我们把刚刚的接口拆成两个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsername</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserBiz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这就是单一职责原则。<br>有人可能就要说了，这也太简单了吧。对啊，对于一个从未接触过设计模式的小白来说，在设计接口的时候，都会去这么设计的。<br>是啊，真的很简单，可是有时候却又十分的难去实现，因为职责的划分很难，就比如手机打电话来说<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dial</span><span class="params">(String phoneNumber)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chat</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们定义一个手机接口，我们来划分职责，接通和挂断应该是通信协议上的，而聊电话则是数据传输。那按照单一原则来说，我们应该给它们也拆到两个接口中去，但是拆开之后呢，我们会发现，当我想打电话的时候我需要将他们再组装到一起，这样反而是增加了系统的复杂度，我想平时遇到类似情况的时候，我们都是放在一个接口中的。</p><p>另一方面，职责扩散，就是由于某种原因，导致原来单一的职责变成了若干了更细粒度的职责。这时候如果再去拆分，代价还是比较高的。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>单一职责原则会有以下优点：</p><ol><li>降低了类的复杂度，实现什么职责都有清晰明确的定义。</li><li>提高了可读性。</li><li>提高了可维护性。</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到过大佬有这样的说法，只有逻辑足够简单，才可以在方法级别上违反单一职责原则，只有类中方法数量足够少，才可以在类级别上违反单一职责原则。     </p><p>单一职责原则看起来很简单，做起来却很难，单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类的设计是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。       </p><p>因此对于单一职责原则，我的建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</p>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot集成官方的Modeler设计器</title>
      <link href="/2017/09/29/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B3%BB%E5%88%97-2017-09-29-Spring-Boot%E9%9B%86%E6%88%90%E5%AE%98%E6%96%B9%E7%9A%84Modeler%E8%AE%BE%E8%AE%A1%E5%99%A8/"/>
      <url>/2017/09/29/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B3%BB%E5%88%97-2017-09-29-Spring-Boot%E9%9B%86%E6%88%90%E5%AE%98%E6%96%B9%E7%9A%84Modeler%E8%AE%BE%E8%AE%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul><li>activiti版本为5.22.0</li><li>Spring Boot版本为1.5.2</li><li>java8</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>下载<a href="https://github.com/Activiti/Activiti/tree/5.22.0-release" target="_blank" rel="noopener">activiti-5.22.0</a>的源码，并解压</li><li>一个最基本的Spring Boot项目</li><li>添加依赖，这三个都得有  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- activiti --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-spring-boot-starter-basic&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-modeler&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-diagram-rest&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="copy代码"><a href="#copy代码" class="headerlink" title="copy代码"></a>copy代码</h2><p>现在准备工作都已经结束了，后面就正式开始整合的工作了</p><ul><li>整合之后的基本结构大概是这样的</li><li><p><img src="http://felix-blog.oss-cn-hangzhou.aliyuncs.com/activiti/2017-9-29/%E6%95%B4%E5%90%88modeler%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%93%E6%9E%84.jpg" alt="这里写图片描述"></p></li><li><p>其中 <strong>1</strong> 部分来自activiti-modeler</p></li><li><strong>2、3、4</strong> 部分来自activiti-webapp-explorer2</li><li><p>拷贝过来之后就类似我现在这样的结构了，但是现在这样是不行的，还需要做一些修改</p></li><li><p>确认stencilset.json文件是否放到了resource目录下，如果不是需要修改StencilsetRestResource.java中”stencilset.json”为”xxx/stencilset.json”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream stencilsetStream = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"stencilset.json"</span>);</span><br></pre></td></tr></table></figure></li><li><p>在<code>StencilsetRestResource.java</code>、<code>ModelEditorJsonRestResource.java</code>、<code>ModelSaveRestResource.java</code>上加上@RequestMapping(“xxx”)，xxx是啥就看你心情了</p></li><li>然后需要改<code>app-cfg.js</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACTIVITI.CONFIG = &#123;</span><br><span class="line"><span class="string">'contextRoot'</span> : <span class="string">'/activiti-explorer/service'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>改为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACTIVITI.CONFIG = &#123;</span><br><span class="line"><span class="string">'contextRoot'</span> : <span class="string">'/xxx'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li><code>ModelSaveRestResource.java</code>参数修改，参考自<a href="http://blog.csdn.net/chenhai201/article/details/72668275" target="_blank" rel="noopener">chenhai201</a></li><li><img src="http://felix-blog.oss-cn-hangzhou.aliyuncs.com/activiti/2017-9-29/ModelSaveRestResource%E4%BF%AE%E6%94%B9.jpg" alt="这里写图片描述"></li><li>修改<code>JsonpCallbackFilte.java</code>，<code>加上@WebFilter(&quot;/xxx/*&quot;)</code></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>配置的话跟上一篇文章整合的时候没有区别  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/activiti_learning</span><br><span class="line">    username: root</span><br><span class="line">    password: </span><br><span class="line">    druid:</span><br><span class="line">      validationQuery: SELECT 1</span><br><span class="line">      initialSize: 10</span><br><span class="line">      minIdle: 10</span><br><span class="line">      maxActive: 200</span><br><span class="line">      minEvictableIdleTimeMillis: 180000</span><br><span class="line">      testOnBorrow: false</span><br><span class="line">      testWhileIdle: true</span><br><span class="line">      removeAbandoned: true</span><br><span class="line">      removeAbandonedTimeout: 1800</span><br><span class="line">      logAbandoned: true</span><br><span class="line">      poolPreparedStatements: true</span><br><span class="line">      maxOpenPreparedStatements: 100</span><br><span class="line">  activiti:</span><br><span class="line">    check-process-definitions: false</span><br><span class="line">security:</span><br><span class="line">  basic:</span><br><span class="line">    enabled: false</span><br><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:/mappers/*.xml</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>启动项目</li><li>访问localhost:xxx/modeler.html?modelId=1看到这样的界面</li><li><img src="http://felix-blog.oss-cn-hangzhou.aliyuncs.com/activiti/2017-9-29/%E6%89%93%E5%BC%80model%E8%AE%BE%E8%AE%A1%E5%99%A8%E9%A1%B5%E9%9D%A2.jpg" alt="这里写图片描述"></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>关于汉化，stencilset.json为界面上各组件的配置，从网上找一个替换一下就好</li><li>直接画出来的图，在流程图上可能会乱码，我们需要设置一下字体，有时候这样设置好了也会乱码，需要检查当前系统是否有设置的字体<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivitiConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource druidDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringProcessEngineConfiguration <span class="title">getProcessEngineConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringProcessEngineConfiguration config = <span class="keyword">new</span> SpringProcessEngineConfiguration();</span><br><span class="line">        config.setDataSource(druidDataSource);</span><br><span class="line">        config.setTransactionManager(transactionManager);</span><br><span class="line">        config.setDatabaseType(<span class="string">"mysql"</span>);<span class="comment">// 必须小写。。。，不配置的话，activiti会根据DataSource去判断的</span></span><br><span class="line">        config.setDatabaseSchemaUpdate(<span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//流程图字体</span></span><br><span class="line">        config.setActivityFontName(<span class="string">"宋体"</span>);</span><br><span class="line">        config.setAnnotationFontName(<span class="string">"宋体"</span>);</span><br><span class="line">        config.setLabelFontName(<span class="string">"宋体"</span>);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>好了，就这样吧。。。</p>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot集成Activiti工作流</title>
      <link href="/2017/09/27/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B3%BB%E5%88%97-2017-09-27-Spring-Boot%E9%9B%86%E6%88%90Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>/2017/09/27/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B3%BB%E5%88%97-2017-09-27-Spring-Boot%E9%9B%86%E6%88%90Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      <content type="html"><![CDATA[<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ul><li>使用IDE或者在<a href="http://start.spring.io" target="_blank" rel="noopener">start.spring.io</a>上创建一个SpringBoot的基础项目，差不多是这样的目录结构<br><img src="http://felix-blog.oss-cn-hangzhou.aliyuncs.com/activiti/2017-9-27/%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg" alt="目录结构"></li></ul><ul><li><p>引入相关依赖 </p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- activiti --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-spring-boot-starter-basic&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-modeler&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-diagram-rest&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- db --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.drtrang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatisplus-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><p>这样基本的东西也就差不多了</p><h2 id="配置activiti"><a href="#配置activiti" class="headerlink" title="配置activiti"></a>配置activiti</h2><ul><li><p>我这里将application.properties改成了yml格式(个人比较喜欢吧)，配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-activiti</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/activiti_learning?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: </span><br><span class="line">    druid:</span><br><span class="line">      validationQuery: SELECT 1</span><br><span class="line">      initialSize: 10</span><br><span class="line">      minIdle: 10</span><br><span class="line">      maxActive: 200</span><br><span class="line">      minEvictableIdleTimeMillis: 180000</span><br><span class="line">      testOnBorrow: false</span><br><span class="line">      testWhileIdle: true</span><br><span class="line">      removeAbandoned: true</span><br><span class="line">      removeAbandonedTimeout: 1800</span><br><span class="line">      logAbandoned: true</span><br><span class="line">      poolPreparedStatements: true</span><br><span class="line">      maxOpenPreparedStatements: 100</span><br><span class="line">  activiti:</span><br><span class="line">    check-process-definitions: false</span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: /**</span><br><span class="line">security:</span><br><span class="line">  basic:</span><br><span class="line">    enabled: false</span><br><span class="line">server:</span><br><span class="line">  port: 6000</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:mapper/*Mapper.xml</span><br><span class="line">  typeAliasesPackage: com.xiaoantimes.taichi.entity</span><br><span class="line">  global-config:</span><br><span class="line">    id-type: 2</span><br><span class="line">    field-strategy: 2</span><br><span class="line">    auto-set-db-type: true</span><br><span class="line">    db-column-underline: true</span><br><span class="line">    refresh-mapper: true</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    cache-enabled: false</span><br></pre></td></tr></table></figure></li><li><p>配置activiti的SpringProcessEngineConfiguration</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ActivitiConfig &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  DruidDataSource druidDataSource;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public SpringProcessEngineConfiguration getProcessEngineConfiguration()&#123;</span><br><span class="line">      SpringProcessEngineConfiguration config =  </span><br><span class="line">     new SpringProcessEngineConfiguration();</span><br><span class="line">      config.setDataSource(druidDataSource);</span><br><span class="line">      config.setTransactionManager(transactionManager);</span><br><span class="line">      config.setDatabaseType("mysql");</span><br><span class="line">      config.setDatabaseSchemaUpdate("true");</span><br><span class="line">      return config;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里SpringBoot已经集成好了Activiti</p></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>我们启动我们到程序，这时候，你可以在数据库中看到生成了Activiti相关到表，说明我们集成成功了<br> <img src="http://felix-blog.oss-cn-hangzhou.aliyuncs.com/activiti/2017-9-27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8.jpg" alt="activiti数据库表"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>看到有的人是在配置的时候，还配置了八大接口，其实不需要，用起步依赖，这些都不需要我们来做了，需要用的时候直接注入就行</li></ul>]]></content>
      
      <categories>
          
          <category> Activiti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
