<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java异常处理体系</title>
      <link href="/2018/12/13/Java-2018-12-13-Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/"/>
      <url>/2018/12/13/Java-2018-12-13-Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>吹逼两小时，代码五分钟。平常写代码中异常无处不在，早就练就了我们<code>try{...} actch(){...}finally{...}</code>一把梭的深厚功力。毕竟它看起来真的很简单，我们用着也蛮顺心，但是你真的了解它吗，真的不会出错吗？</p><h1 id="Java异常体系"><a href="#Java异常体系" class="headerlink" title="Java异常体系"></a>Java异常体系</h1><p>下面是Java中的异常继承图：</p><p><img src="https://felixu-blog.oss-cn-hangzhou.aliyuncs.com/%E5%BC%82%E5%B8%B8%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt=""></p><p><code>Throwable</code>是整个异常体系中的顶级父类，它拥有两个子类，分别是<code>Error</code>和<code>Exception</code>。</p><p><code>Error</code>是由机器底层抛出的错误，我们无法处理的，比如<code>OutOfMemoryError</code>，当遇到这类错误时，<code>JVM</code>会直接终止进程，应用终止。此类异常我们不要去捕获，因为捕获了也处理不了。</p><p><code>Exception</code>是程序可以处理的错误，主要分为运行时异常，和非运行时异常。或者叫做受检异常和非受检异常。</p><p>运行时异常都是<code>RuntimeException</code>及其子类，比如，<code>NullPointException</code>、<code>ArrayIndexOutOfBoundsException</code>等等，这类的异常属于非受检异常(<code>UnChecked</code>)，我们可以对其捕获处理，也可以不处理，而我们一般也不会做处理的，因为这类错误通常是我们逻辑错误所导致的，我们应该尽量避免此类<code>Bug</code>。</p><p>而非运行时异常，比如<code>IOException</code>、<code>EOFException</code>等等所有非<code>RuntimeException</code>及其子类，都是非运行时异常，也就是受检异常(<code>Checked</code>)，当方法抛出了这类异常，则调用者必须在调用该方法时对其进行处理，否则将无法编译。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>那么我们该怎么去处理异常呢，这时候自然而然会想到<code>try-catch-finally</code>，我们来下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(test1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flag = test2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test1] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test1] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 分别调用test3()和test4()</span></span><br><span class="line">            flag = test4();</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"[test2] result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test2] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test2] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test3] result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test3] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test3] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">2</span> / <span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">"[test4] result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test4] catch exception result="</span> + flag);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"[test4] finally result="</span> + flag);</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当其中<code>test2()</code>方法分别调用<code>test3()</code>和<code>teset4()</code>，打印顺序会是怎么样的呢，不如先思考一下。</p><p>调用<code>test3()</code>时，打印结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[test3] result=true</span><br><span class="line">[test3] finally result=true</span><br><span class="line">[test2] result=true</span><br><span class="line">[test2] finally result=true</span><br><span class="line">[test1] finally result=true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>调用<code>test4()</code>时，打印结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[test4] catch exception result=true</span><br><span class="line">[test4] finally result=false</span><br><span class="line">[test2] finally result=false</span><br><span class="line">[test1] finally result=false</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>不知道这段代码的实际执行结果和你所想的有没有出入，众所周知的是，当<code>try{···}</code>块中的代码执行未发生异常，贼执行<code>finally{...}</code>块中的代码，如果执行出现异常，则会先执行<code>catch(){...}</code>中的代码，再执行<code>finally{...}</code>中的代码。但是当这些代码块中出现<code>return</code>、<code>throw</code>则会发生变化。</p><p><strong>当try{···}块或者catch(){…}块中有return、throw时，在return或者throw执行前回优先执行finally{…}代码块中的内容</strong></p><blockquote><p>特别提醒，<code>finally</code>中禁止使用<code>return</code>，这里使用，只是为了演示用。</p></blockquote><p>所以当<code>finally</code>中有<code>throw</code>或者<code>return</code>时，它会覆盖<code>try</code>块中和<code>catch</code>块中的<code>throw</code>以及<code>return</code>，从而出现异常屏蔽现象，比如下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"catch"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它将打印出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread "main" java.lang.RuntimeException: finally</span><br><span class="line">at top.felixu.exception.ExceptionDemo1.main(ExceptionDemo1.java:14)</span><br></pre></td></tr></table></figure><p><code>catch</code>块中的异常就被覆盖了，这种现象还是有可能出现在<code>try-catch-finally</code>捕获处理流相关操作中，在<code>finally</code>中手动关闭流出现异常时，但是在<code>JDK7</code>版本以后，<code>try-with-resource</code>可以帮我们自动关闭流了。在<code>JDK7</code>中，所有的<code>IO</code>类都实现了<code>AutoCloseable</code>接口，并且需要实现其中的<code>close()</code>函数，资源释放过程需要在该函数中完成。那么，编译器在编译时，会自动添加<code>finally</code>代码块，并将<code>close()</code>函数中的资源释放代码加入<code>finally</code>代码块中，从而提高代码可读性。这里就不具体介绍了。</p><h1 id="异常处理约定"><a href="#异常处理约定" class="headerlink" title="异常处理约定"></a>异常处理约定</h1><ol><li>对于非受检异常，我们不要去捕获处理，而是通过测试和<code>review</code>代码来规避此类问题。</li><li>异常不要用来做流程控制，条件控制，因为异常处理的效率比分支处理要低。</li><li>对大块代码的<code>try-catch</code>是不负责的行为，我们要区分稳定代码已经不稳定代码。</li><li>捕获异常是为了处理异常，如果捕获了什么都不处理，不如不捕获，将其抛给其上层调用者。而最上层的调用者必须处理，防止用户看到无法理解的异常信息。</li><li><code>try</code>块中有事物代码，则<code>catch</code>到异常要手动回滚，或者抛出异常，让<code>AOP</code>框架来回滚，否则会吞掉异常，导致异常却未回滚。</li><li>不能在<code>finally</code>中使用<code>return</code>。</li><li>捕获异常必须与所抛出的异常匹配，或者所捕获的异常是抛出异常的父类。</li></ol>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决JS处理Long类型丢失精度</title>
      <link href="/2018/12/10/Spring-2018-12-10-%E8%A7%A3%E5%86%B3JS%E5%A4%84%E7%90%86Long%E7%B1%BB%E5%9E%8B%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6/"/>
      <url>/2018/12/10/Spring-2018-12-10-%E8%A7%A3%E5%86%B3JS%E5%A4%84%E7%90%86Long%E7%B1%BB%E5%9E%8B%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>我想每一个小白都曾经遇到过这样一个问题吧，后端看到的<code>Long</code>类型的数值和前端看到的不一样，甚是诡异，这是怎么回事呢，原因在于<code>JS</code>在处理<code>Long</code>数据时会出现处理精度不足的问题，从而造成我们的数据不一致，那么我们要怎么解决这个问题呢。</p><p>对此，我们一般会选择将<code>Long</code>类型的数值序列化成<code>String</code>类型，从而来避免问题。而对于不同的<code>JSON</code>框架的使用，处理方式也不一样，常用一般是<code>Jackson</code>、<code>fastjson</code>。</p><p>不管是使用哪种，<code>Spring MVC</code>返回到前端都会出现同样的问题，那么具体需要怎么来解决呢，下面直接上代码：</p><h1 id="Spring-Boot1-x或Spring5以下"><a href="#Spring-Boot1-x或Spring5以下" class="headerlink" title="Spring Boot1.x或Spring5以下"></a>Spring Boot1.x或Spring5以下</h1><h2 id="使用Jackson"><a href="#使用Jackson" class="headerlink" title="使用Jackson"></a>使用Jackson</h2><p>在使用<code>Jackson</code>时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jackson2HttpMessageConverter =</span><br><span class="line">                <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        simpleModule.addSerializer(BigInteger.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        jackson2HttpMessageConverter.setObjectMapper(objectMapper);</span><br><span class="line">        converters.add(jackson2HttpMessageConverter);</span><br><span class="line">        converters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建这样一个配置类，继承<code>WebMvcConfigurerAdapter</code>，重写<code>configureMessageConverters</code>方法，将各种<code>Long</code>类型替换为<code>Sting</code>类型，就可以解决这个问题啦。</p><h2 id="使用fastjson"><a href="#使用fastjson" class="headerlink" title="使用fastjson"></a>使用fastjson</h2><p>当然有时候也可能是使用的<code>fastjson</code>，我想大家都应该知道<code>Spring MVC</code>其实默认使用的是<code>Jackson</code>，但是有些人会要求将其替换为<code>fastjson</code>，嗯，我以前做过的一个项目就干过🤦‍♀️。那么我们要怎么替换这里的序列化框架呢，这里有两种方式来实现：</p><ol><li><p>第一种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpMessageConverters <span class="title">fastJsonHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpMessageConverters(<span class="keyword">new</span> FastJsonHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = </span><br><span class="line">        <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>替换完成之后呢，我们同样需要去处理精度丢失的问题，那么对于<code>fastjson</code>我们需要怎么去做呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = </span><br><span class="line">        <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        SerializeConfig serializeConfig = SerializeConfig.globalInstance;</span><br><span class="line">        serializeConfig.put(BigInteger.class, ToStringSerializer.instance);</span><br><span class="line">        serializeConfig.put(Long.class, ToStringSerializer.instance);</span><br><span class="line">        serializeConfig.put(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        fastJsonConfig.setSerializeConfig(serializeConfig);</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这里使用的<code>fastjson</code>的版本为<code>1.2.31</code>，版本不同，方式略有不同。</p><h1 id="Spring-Boot2-x或Spring5以上"><a href="#Spring-Boot2-x或Spring5以上" class="headerlink" title="Spring Boot2.x或Spring5以上"></a>Spring Boot2.x或Spring5以上</h1><p><code>Spring Boot2.x</code>相比于<code>Spring Boot1.x</code>做了很大的变化，<code>Spring5</code>相比于<code>Spring5</code>以前的版本也是如此，在<code>Spring5</code>中，将<code>WebMvcConfigurerAdapter</code>标记为过期了，那么这里我们又要怎么去处理呢，其实方法都是一样的，只是将<code>WebMvcConfigurerAdapter</code>换成了其父类<code>WebMvcConfigurer</code>，而其他地方完全一样。所以这里也不再赘述。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这里也给个小<code>demo</code>，使用<code>Swagger</code>来演示其丢失精度以及修复后的样子，有需要可以瞅一眼(但是应该没有人需要把)，<a href="https://github.com/felixu1992/demo/tree/master/JsParseLong" target="_blank" rel="noopener">戳这里</a>。</p><p>需要说明的是<code>Swagger</code>不同版本对于丢精度也做了处理，这里使用的是<code>2.7.0</code>版本来复现这个问题的。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java8新时间API</title>
      <link href="/2018/12/10/Java-2018-12-10-Java8%E6%96%B0%E6%97%B6%E9%97%B4API/"/>
      <url>/2018/12/10/Java-2018-12-10-Java8%E6%96%B0%E6%97%B6%E9%97%B4API/</url>
      <content type="html"><![CDATA[<p>Java 8日期/时间API是<code>JSR-310</code>的实现，它的实现目标是克服旧的日期时间实现中所有的缺陷。利用它可以更加方便我们去处理时间和日期的计算等问题。</p><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><p>新的日期/时间API它遵循以下的设计原则：</p><ul><li><strong>不变性</strong>：在新的日期/时间API中，所有的类都被设计成不可变的，这在多线程环境下也是没有问题的。</li><li><strong>关注点分离</strong>：在<code>Java8</code>中，相比于之前旧的时间和日历类，较大的改变是将人可读的日期时间和机器时间(unix timestamp)明确分离，为日期(Date)、时间(Time)、日期时间(DateTime)、时间戳(unix timestamp)以及时区定义了不同的类。</li><li><strong>清晰</strong>：在所有的类中，方法都被明确定义用以完成相同的行为。举个例子，要拿到当前实例我们可以使用now()方法，在所有的类中都定义了format()和parse()方法，而不是像以前那样专门有一个独立的类。为了更好的处理问题，所有的类都使用了工厂模式和策略模式，一旦你使用了其中某个类的方法，与其他类协同工作并不困难。</li><li><strong>实用操作</strong>：所有新的日期/时间API类都实现了一系列方法用以完成通用的任务，如：加、减、- - 格式化、解析、从日期/时间中提取单独部分，等等。</li><li><strong>可扩展性</strong>： 新的日期/时间API是工作在ISO-8601日历系统上的，但我们也可以将其应用在非IOS的日历上。</li></ul><h1 id="java-time"><a href="#java-time" class="headerlink" title="java.time"></a>java.time</h1><p><code>java.time</code>包中的是类是不可变且线程安全的。新的时间及日期API位于<code>java.time</code>中。下面是一些比较常用的类： </p><ul><li><code>Instant</code>：表示时间戳</li><li><code>LocalDate</code>：不包含具体时间点的日期</li><li><code>LocalTime</code>：不包含日期的时间点</li><li><code>LocalDateTime</code>：具体的日期时间点，不带时区</li><li><code>ZonedDateTime</code>：包含时区的完整的日期时间点，偏移量是以UTC/格林威治时间为基准的。 </li></ul><h1 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h1><p>对于这些类，它们都有以下一些方法：</p><ul><li>of：静态工厂方法。</li><li>parse：静态工厂方法，关注于解析。</li><li>get：获取某些东西的值。</li><li>is：检查某些东西的是否是true。</li><li>with：不可变的setter等价物。</li><li>plus：加一些量到某个对象。</li><li>minus：从某个对象减去一些量。</li><li>to：转换到另一个类型。</li><li>at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。</li></ul><h2 id="计算日期-时间"><a href="#计算日期-时间" class="headerlink" title="计算日期/时间"></a>计算日期/时间</h2><h3 id="获取当前时间-日期"><a href="#获取当前时间-日期" class="headerlink" title="获取当前时间/日期"></a>获取当前时间/日期</h3><p>以前有<code>Date</code>类可以获取当前时间，有<code>Calendar</code>类来做日历相关操作。而在Java8中，提供了多个类来获取当前的日期、时间、时间戳等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        System.out.println(LocalDate.now());</span><br><span class="line">        <span class="comment">// 获取当前时间点</span></span><br><span class="line">        System.out.println(LocalTime.now());</span><br><span class="line">        <span class="comment">// 获取当前时间点去掉纳秒</span></span><br><span class="line">        System.out.println(LocalTime.now().withNano(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 获取当前的日期时间</span></span><br><span class="line">        System.out.println(LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 获取当前年</span></span><br><span class="line">        System.out.println(LocalDate.now().getYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-09-04</span><br><span class="line">22:03:49.502</span><br><span class="line">22:03:49</span><br><span class="line">2018-09-04T22:03:49.502</span><br><span class="line">2018</span><br></pre></td></tr></table></figure><p>更多方法就需要大家自己去点点看啦。</p><h3 id="判断两个日期是否相等"><a href="#判断两个日期是否相等" class="headerlink" title="判断两个日期是否相等"></a>判断两个日期是否相等</h3><p>在Java8的众多类中，它们都重写了<code>toString()</code>方法。所以对于日期是否相同的判断，我们可以直接使用它的<code>equals()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        <span class="comment">// 构建2018-09-03</span></span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 判断是否相等</span></span><br><span class="line">        System.out.println(today.equals(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="判断一个日期是否在另一个日期之前"><a href="#判断一个日期是否在另一个日期之前" class="headerlink" title="判断一个日期是否在另一个日期之前"></a>判断一个日期是否在另一个日期之前</h3><p>有时候可能会有这样的需求，需要判断一个日期在另一个日期的前面还是后面，这时候就会用到<code>isBefore()</code>和<code>isAfter()</code>方法，这样就可以方便的作出判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建2018-09-04</span></span><br><span class="line">        LocalDate d1 = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 构建2018-09-03</span></span><br><span class="line">        LocalDate d2 = LocalDate.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 判断d1是否在d2后面</span></span><br><span class="line">        System.out.println(d1.isAfter(d2));</span><br><span class="line">        <span class="comment">// 判断d1是否在d2前面</span></span><br><span class="line">        System.out.println(d1.isBefore(d2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>可以看到我们直接可以使用<code>isBefore()</code>和<code>isAfter()</code>来判断两个日期谁前谁后了，而不需要向之前使用<code>Calendar</code>来进行麻烦的操作了。</p><h3 id="检查重复日期"><a href="#检查重复日期" class="headerlink" title="检查重复日期"></a>检查重复日期</h3><p>对于一些特定的日期，比如生日、纪念日等，我们可以轻易来判断某一日期是不是我们需要的特定日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate dateOfBirth = LocalDate.of(<span class="number">1992</span>, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">        MonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth());</span><br><span class="line">        MonthDay currentMonthDay = MonthDay.from(LocalDate.now());</span><br><span class="line">        <span class="keyword">if</span>(currentMonthDay.equals(birthday))&#123;</span><br><span class="line">            System.out.println(<span class="string">"Happy Birthday !"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Sorry, today is not your birthday！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy Birthday !</span><br></pre></td></tr></table></figure><h3 id="判断某个日期是不是周几"><a href="#判断某个日期是不是周几" class="headerlink" title="判断某个日期是不是周几"></a>判断某个日期是不是周几</h3><p>同样，我们可以很方便的来判断某天是周几。<code>DayOfWeek</code>构建的是周几，然后使用<code>from()</code>方法，来构建某一日期为周几，这样我们就可以轻松判断出某一日期是周几，而不必向以前一样麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DayOfWeek dayOfWeek = DayOfWeek.of(<span class="number">2</span>);</span><br><span class="line">        DayOfWeek from = DayOfWeek.from(LocalDate.now());</span><br><span class="line">        System.out.println(from.equals(dayOfWeek));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="延迟或者推前时间"><a href="#延迟或者推前时间" class="headerlink" title="延迟或者推前时间"></a>延迟或者推前时间</h3><p>有时候我们可能会需要用到一些日期计算，比如，昨天，前天，明天，一周前，一年前等。在Java8中可以轻松实现，因为这些类中已经提供了相关方法。<code>plus</code>开头的表示往后算，<code>minus</code>表示往前算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(today);</span><br><span class="line">        <span class="comment">// 推前一天</span></span><br><span class="line">        System.out.println(today.minusDays(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 延后一天</span></span><br><span class="line">        System.out.println(today.plusDays(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-09-04</span><br><span class="line">2018-09-03</span><br><span class="line">2018-09-05</span><br></pre></td></tr></table></figure><h3 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h3><p><code>Java8</code>提供了时钟类，利用时钟类可以实现和<code>System.currentTimeMillis()</code>一样的功能，还能够获取当前时区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        System.out.println(Clock.systemUTC().millis());</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 获取当前系统默认时区</span></span><br><span class="line">        System.out.println(Clock.systemDefaultZone().getZone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1536101287531</span><br><span class="line">1536101287531</span><br><span class="line">Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="检查闰年"><a href="#检查闰年" class="headerlink" title="检查闰年"></a>检查闰年</h3><p>可以使用<code>isLeapYear()</code>方法直接判断是否为闰年，而不用我们再自己去计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>).isLeapYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="带时区计算"><a href="#带时区计算" class="headerlink" title="带时区计算"></a>带时区计算</h3><p><code>Java 8</code>不仅将日期和时间进行了分离，同时还有时区。现在已经有好几组与时区相关的类了，比如<code>ZonId</code>代表的是某个特定的时区，而<code>ZonedDateTime</code>代表的是带时区的时间。它等同于<code>Java 8</code>以前的<code>GregorianCalendar</code>类。使用这个类，你可以将本地时间转换成另一个时区中的对应时间。用<code>ZoneOffset</code>类来代表某个时区，比如印度是<code>GMT</code>或者<code>UTC5：30</code>，你可以使用它的静态方法<code>ZoneOffset.of()</code>方法来获取对应的时区。只要获取到了这个偏移量，你就可以拿<code>LocalDateTime</code>和这个偏移量创建出一个<code>OffsetDateTime</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 设置时区</span></span><br><span class="line">        ZonedDateTime zonedDateTime = ZonedDateTime.of(now, ZoneId.of(<span class="string">"Australia/Darwin"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Current date and time in a particular timezone : "</span> + zonedDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建一个时间</span></span><br><span class="line">        LocalDateTime datetime = LocalDateTime.of(<span class="number">2018</span>, Month.SEPTEMBER, <span class="number">5</span>, <span class="number">7</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 设置偏移量</span></span><br><span class="line">        ZoneOffset offset = ZoneOffset.of(<span class="string">"+05:30"</span>);</span><br><span class="line">        <span class="comment">// 构建带偏移量的日期和时间</span></span><br><span class="line">        OffsetDateTime date = OffsetDateTime.of(datetime, offset);</span><br><span class="line">        System.out.println(<span class="string">"Date and Time with timezone offset in Java : "</span> + date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Current date and time in a particular timezone : 2018-09-05T07:50:43.187+09:30[Australia/Darwin]</span><br><span class="line">Date and Time with timezone offset in Java : 2018-09-05T07:50+05:30</span><br></pre></td></tr></table></figure><p><code>OffSetDateTime</code>主要是给机器来理解的，如果是给人看的，可以使用<code>ZoneDateTime</code>类。</p><h3 id="固定日期"><a href="#固定日期" class="headerlink" title="固定日期"></a>固定日期</h3><p>在前面我们用过一个<code>MonthDay</code>的类，用来构建特定的几月几日。这里用到了另一个<code>YearMonth</code>，它表示某年某月，我们可以它来知道某年某月有多少天，使用<code>YearMonth</code>的<code>lengthOfMonth()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前年月</span></span><br><span class="line">        YearMonth current = YearMonth.now();</span><br><span class="line">        System.out.println(current);</span><br><span class="line">        <span class="comment">// 获取这个月有多少天</span></span><br><span class="line">        System.out.println(current.lengthOfMonth());</span><br><span class="line">        <span class="comment">// 构建一个固定日期</span></span><br><span class="line">        YearMonth expire = YearMonth.of(<span class="number">2018</span>, Month.NOVEMBER);</span><br><span class="line">        System.out.println(expire);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-09</span><br><span class="line">30</span><br><span class="line">2018-11</span><br></pre></td></tr></table></figure><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dayAfterTomorrow = <span class="string">"20180905"</span>;</span><br><span class="line">        LocalDate formatted = LocalDate.parse(dayAfterTomorrow,</span><br><span class="line">                DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">        System.out.printf(<span class="string">"Date generated from String %s is %s %n"</span>, dayAfterTomorrow, formatted);</span><br><span class="line"></span><br><span class="line">        String goodFriday = <span class="string">"Sep 05 2018"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"MMM dd yyyy"</span>);</span><br><span class="line">            LocalDate holiday = LocalDate.parse(goodFriday, formatter);</span><br><span class="line">            System.out.printf(<span class="string">"Successfully parsed String %s, date is %s%n"</span>, goodFriday, holiday);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeParseException ex) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s is not parsable!%n"</span>, goodFriday);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LocalDateTime arrivalDate = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"MMM dd yyyy hh:mm a"</span>);</span><br><span class="line">            String landing = arrivalDate.format(format);</span><br><span class="line">            System.out.printf(<span class="string">"Arriving at : %s %n"</span>, landing);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeException ex) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s can't be formatted!%n"</span>, arrivalDate);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date generated from String 20180905 is 2018-09-05 </span><br><span class="line">Successfully parsed String Sep 05 2018, date is 2018-09-05</span><br><span class="line">Arriving at : Sep 06 2018 07:47 AM</span><br></pre></td></tr></table></figure><h2 id="计算时间间隔"><a href="#计算时间间隔" class="headerlink" title="计算时间间隔"></a>计算时间间隔</h2><p>Java 8为我们提供了三个类来方便计算时间间隔，分别是</p><ul><li>Duration：计算秒、纳秒</li><li>ChronoUnit：计算天、时、分、秒</li><li>Period：计算年、月、日</li></ul><h3 id="秒、纳秒"><a href="#秒、纳秒" class="headerlink" title="秒、纳秒"></a>秒、纳秒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳</span></span><br><span class="line">        Instant i1 = Instant.now();</span><br><span class="line">        <span class="comment">// 当前时间推后10s</span></span><br><span class="line">        Instant i2 = i1.plusSeconds(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 获取时间差</span></span><br><span class="line">        Duration between = Duration.between(i1, i2);</span><br><span class="line">        <span class="comment">// 获取时间差的毫秒值</span></span><br><span class="line">        System.out.println(between.toMillis());</span><br><span class="line">        <span class="comment">// 获取时间差的纳秒值</span></span><br><span class="line">        System.out.println(between.toNanos());</span><br><span class="line">        <span class="comment">// 获取时间差的天数值</span></span><br><span class="line">        System.out.println(between.toDays());</span><br><span class="line">        <span class="comment">// 获取时间差的小时值</span></span><br><span class="line">        System.out.println(between.toHours());</span><br><span class="line">        <span class="comment">// 获取时间差的分钟值</span></span><br><span class="line">        System.out.println(between.toMinutes());</span><br><span class="line">        <span class="comment">// 获取时间差的秒数值</span></span><br><span class="line">        System.out.println(between.getSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10000</span><br><span class="line">10000000000</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="天、时、分、秒"><a href="#天、时、分、秒" class="headerlink" title="天、时、分、秒"></a>天、时、分、秒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        LocalDateTime d1 = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 当前时间延后90000s</span></span><br><span class="line">        LocalDateTime d2 = d1.plusSeconds(<span class="number">90000</span>);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了几个半天</span></span><br><span class="line">        <span class="keyword">long</span> b1 = ChronoUnit.HALF_DAYS.between(d1, d2);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了几个小时</span></span><br><span class="line">        <span class="keyword">long</span> b2 = ChronoUnit.HOURS.between(d1, d2);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">        <span class="comment">// 获取两个时间之间隔了多少毫秒</span></span><br><span class="line">        <span class="keyword">long</span> b3 = ChronoUnit.MILLIS.between(d1, d2);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">25</span><br><span class="line">90000000</span><br></pre></td></tr></table></figure><h3 id="年、月、日"><a href="#年、月、日" class="headerlink" title="年、月、日"></a>年、月、日</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期</span></span><br><span class="line">        LocalDate d1 = LocalDate.now();</span><br><span class="line">        <span class="comment">// 构建2018-10-01</span></span><br><span class="line">        LocalDate d2 = LocalDate.of(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 获取两个日期的差值</span></span><br><span class="line">        Period between = Period.between(d1, d2);</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少年</span></span><br><span class="line">        System.out.println(between.getYears());</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少月</span></span><br><span class="line">        System.out.println(between.getMonths());</span><br><span class="line">        <span class="comment">// 获取两个日期隔了多少天</span></span><br><span class="line">        System.out.println(between.getDays());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">26</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开启我的博客</title>
      <link href="/2018/12/08/Essay-2018-12-08-%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/12/08/Essay-2018-12-08-%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>在经历了一番思考(对，其实就是瞎JB想想)后，决定重新开始写博客，做笔记。为了坚持下去，整了自建的静态博客<a href="https://blogs.felixu.top">Hexo</a>，整了<a href="https://blog.csdn.net/xufei_0320" target="_blank" rel="noopener">CSDN</a>，整了<a href="https://www.jianshu.com/u/84a0da787393" target="_blank" rel="noopener">简书</a>，整了个公众号。打算洗心革面，呸！打算从头开始在自己的这个小天地中坚持写笔记，坚持写博客。希望能坚持下去吧！常言道，万事开头难。然而，经验告诉我们，好像不是开头难，而是坚持难。就比如博客这件事，从第一次搭博客写文章，再到后面换主题，换框架，刚开始的时候热情满满，大概能坚持个两星期，然后就慢慢忘了这件事了，毕竟写一篇文章有时候会需要耗费蛮久的时间。emmm，所以这是不知道第多少次再打算写博客来记录一下我这坎坷的编程之路。</p><p>从接触Java到从一个土木专业的学生正式转入这一行也有快3年了。工作的常态是问题能解决，工作能完成，原理搞明白隔两天就忘。生活的常态是一直在学习，看上去蛮努力，但其实毛也没学到。已经快27了，却总是觉得自己好像还是个小白，接触的东西越多，越觉得自己无知。</p><p>然而再次决定要写东西来记录一下我这小白的编程之路，在于最近其实是有思考一些东西：</p><ol><li>中年危机吧，反正觉得年纪越来越大，嗯，无房无车无女票，这么些年走过来，总特么该留下点什么吧，那就留下点木有人看的文字好了。</li><li>入编程的坑已经是有些年头了，接触过的技术可以说也是蛮多了，用起来都没有什么大问题，然而知其然却不知所以然，很多时候有种茫然无力感。故，以此为开始，边深究，边记录，边内化，边输出。</li><li>对于以前做过的项目，遇到的问题，当时记得，也搞明白了怎么回事，隔了一段时间再遇到，我是谁，我在哪，我在干嘛的茫然油然而生，还是记录下来更靠谱一点。</li><li>这么几年过来，除了当初下定决心转行，并且好好坚持学习了一段时间，好像再也没有坚持去做过什么事情了，浮躁的社会，快节奏的生活，好像已经很难再去坚持做什么了，给自己找点事情做吧算是。</li></ol><p>深圳是个包容的城市，这里什么都有，只要你努力，当然这里还有挤不完的地铁、熬不完的夜。</p>]]></content>
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> About Me </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
