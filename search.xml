<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>解决JS处理Long类型丢失精度</title>
      <link href="/2018/12/10/Spring-%E8%A7%A3%E5%86%B3JS%E5%A4%84%E7%90%86Long%E7%B1%BB%E5%9E%8B%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6/"/>
      <url>/2018/12/10/Spring-%E8%A7%A3%E5%86%B3JS%E5%A4%84%E7%90%86Long%E7%B1%BB%E5%9E%8B%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>我想每一个小白都曾经遇到过这样一个问题吧，后端看到的<code>Long</code>类型的数值和前端看到的不一样，甚是诡异，这是怎么回事呢，原因在于<code>JS</code>在处理<code>Long</code>数据时会出现处理精度不足的问题，从而造成我们的数据不一致，那么我们要怎么解决这个问题呢。</p><p>对此，我们一般会选择将<code>Long</code>类型的数值序列化成<code>String</code>类型，从而来避免问题。而对于不同的<code>JSON</code>框架的使用，处理方式也不一样，常用一般是<code>Jackson</code>、<code>fastjson</code>。</p><p>不管是使用哪种，<code>Spring MVC</code>返回到前端都会出现同样的问题，那么具体需要怎么来解决呢，下面直接上代码：</p><h1 id="Spring-Boot1-x或Spring5以下"><a href="#Spring-Boot1-x或Spring5以下" class="headerlink" title="Spring Boot1.x或Spring5以下"></a>Spring Boot1.x或Spring5以下</h1><h2 id="使用Jackson"><a href="#使用Jackson" class="headerlink" title="使用Jackson"></a>使用Jackson</h2><p>在使用<code>Jackson</code>时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jackson2HttpMessageConverter =</span><br><span class="line">                <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        simpleModule.addSerializer(BigInteger.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        jackson2HttpMessageConverter.setObjectMapper(objectMapper);</span><br><span class="line">        converters.add(jackson2HttpMessageConverter);</span><br><span class="line">        converters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建这样一个配置类，继承<code>WebMvcConfigurerAdapter</code>，重写<code>configureMessageConverters</code>方法，将各种<code>Long</code>类型替换为<code>Sting</code>类型，就可以解决这个问题啦。</p><h2 id="使用fastjson"><a href="#使用fastjson" class="headerlink" title="使用fastjson"></a>使用fastjson</h2><p>当然有时候也可能是使用的<code>fastjson</code>，我想大家都应该知道<code>Spring MVC</code>其实默认使用的是<code>Jackson</code>，但是有些人会要求将其替换为<code>fastjson</code>，嗯，我以前做过的一个项目就干过🤦‍♀️。那么我们要怎么替换这里的序列化框架呢，这里有两种方式来实现：</p><ol><li><p>第一种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpMessageConverters <span class="title">fastJsonHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpMessageConverters(<span class="keyword">new</span> FastJsonHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = </span><br><span class="line">        <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>替换完成之后呢，我们同样需要去处理精度丢失的问题，那么对于<code>fastjson</code>我们需要怎么去做呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = </span><br><span class="line">        <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        SerializeConfig serializeConfig = SerializeConfig.globalInstance;</span><br><span class="line">        serializeConfig.put(BigInteger.class, ToStringSerializer.instance);</span><br><span class="line">        serializeConfig.put(Long.class, ToStringSerializer.instance);</span><br><span class="line">        serializeConfig.put(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        fastJsonConfig.setSerializeConfig(serializeConfig);</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(fastConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这里使用的<code>fastjson</code>的版本为<code>1.2.31</code>，版本不同，方式略有不同。</p><h1 id="Spring-Boot2-x或Spring5以上"><a href="#Spring-Boot2-x或Spring5以上" class="headerlink" title="Spring Boot2.x或Spring5以上"></a>Spring Boot2.x或Spring5以上</h1><p><code>Spring Boot2.x</code>相比于<code>Spring Boot1.x</code>做了很大的变化，<code>Spring5</code>相比于<code>Spring5</code>以前的版本也是如此，在<code>Spring5</code>中，将<code>WebMvcConfigurerAdapter</code>标记为过期了，那么这里我们又要怎么去处理呢，其实方法都是一样的，只是将<code>WebMvcConfigurerAdapter</code>换成了其父类<code>WebMvcConfigurer</code>，而其他地方完全一样。所以这里也不再赘述。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这里也给个小<code>demo</code>，使用<code>Swagger</code>来演示其丢失精度以及修复后的样子，有需要可以瞅一眼(但是应该没有人需要把)，<a href="https://github.com/felixu1992/demo/tree/master/JsParseLong" target="_blank" rel="noopener">戳这里</a>。</p><p>需要说明的是<code>Swagger</code>不同版本对于丢精度也做了处理，这里使用的是<code>2.7.0</code>版本来复现这个问题的。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开启我的博客</title>
      <link href="/2018/12/08/Essay-2018-12-08-%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/12/08/Essay-2018-12-08-%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>在经历了一番思考(对，其实就是瞎JB想想)后，决定重新开始写博客，做笔记。为了坚持下去，整了自建的静态博客<a href="https://blogs.felixu.top">Hexo</a>，整了<a href="https://blog.csdn.net/xufei_0320" target="_blank" rel="noopener">CSDN</a>，整了<a href="https://www.jianshu.com/u/84a0da787393" target="_blank" rel="noopener">简书</a>，整了个公众号。打算洗心革面，呸！打算从头开始在自己的这个小天地中坚持写笔记，坚持写博客。希望能坚持下去吧！常言道，万事开头难。然而，经验告诉我们，好像不是开头难，而是坚持难。就比如博客这件事，从第一次搭博客写文章，再到后面换主题，换框架，刚开始的时候热情满满，大概能坚持个两星期，然后就慢慢忘了这件事了，毕竟写一篇文章有时候会需要耗费蛮久的时间。emmm，所以这是不知道第多少次再打算写博客来记录一下我这坎坷的编程之路。</p><p>从接触Java到从一个土木专业的学生正式转入这一行也有快3年了。工作的常态是问题能解决，工作能完成，原理搞明白隔两天就忘。生活的常态是一直在学习，看上去蛮努力，但其实毛也没学到。已经快27了，却总是觉得自己好像还是个小白，接触的东西越多，越觉得自己无知。</p><p>然而再次决定要写东西来记录一下我这小白的编程之路，在于最近其实是有思考一些东西：</p><ol><li>中年危机吧，反正觉得年纪越来越大，嗯，无房无车无女票，这么些年走过来，总特么该留下点什么吧，那就留下点木有人看的文字好了。</li><li>入编程的坑已经是有些年头了，接触过的技术可以说也是蛮多了，用起来都没有什么大问题，然而知其然却不知所以然，很多时候有种茫然无力感。故，以此为开始，边深究，边记录，边内化，边输出。</li><li>对于以前做过的项目，遇到的问题，当时记得，也搞明白了怎么回事，隔了一段时间再遇到，我是谁，我在哪，我在干嘛的茫然油然而生，还是记录下来更靠谱一点。</li><li>这么几年过来，除了当初下定决心转行，并且好好坚持学习了一段时间，好像再也没有坚持去做过什么事情了，浮躁的社会，快节奏的生活，好像已经很难再去坚持做什么了，给自己找点事情做吧算是。</li></ol><p>深圳是个包容的城市，这里什么都有，只要你努力，当然这里还有挤不完的地铁、熬不完的夜。</p>]]></content>
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> About Me </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
